{
    "pipes": [],
    "interfaces": [
        {
            "name": "AuthResponse",
            "id": "interface-AuthResponse-f3b3d4ed331333c6169aaa814c144a7f8da5268a24426b3ac0a4b91164df37b167988ce16cb8b1940ff8b6da1776096c0ae1a7a2d3a160fa6a6a71839349a2af",
            "file": "src/app/core/models/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  role: string;\n  isVerified: boolean;\n}\n\nexport interface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  user: User;\n}\n\nexport interface RegisterDto {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CoinGeckoSearchResult",
            "id": "interface-CoinGeckoSearchResult-66a3cbabbabe3ed04ce61e596c4d08d756948836d743c811abb9a0fd84afec017a3320725370699707287e317e2c974cc0e0426728763342b6daaa975f75c571",
            "file": "src/app/core/services/crypto.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, catchError, throwError } from 'rxjs';\n\ninterface CoinGeckoSearchResult {\n  coins: Array<{\n    id: string;\n    symbol: string;\n    name: string;\n    market_cap_rank: number;\n  }>;\n}\n\nexport interface CryptoSearchResult {\n  id: string;\n  symbol: string;\n  name: string;\n  market_cap_rank: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CryptoService {\n  private readonly baseUrl = 'https://api.coingecko.com/api/v3';\n  private http = inject(HttpClient);\n\n  constructor() {}\n\n  getCryptoPrice(coinId: string, currency: string = 'usd'): Observable<number> {\n    return this.http\n      .get<any>(`${this.baseUrl}/simple/price`, {\n        params: {\n          ids: coinId,\n          vs_currencies: currency,\n        },\n      })\n      .pipe(\n        map((response) => {\n          const price = response[coinId]?.[currency];\n          if (!price) {\n            throw new Error(`Price not found for ${coinId}`);\n          }\n          return price;\n        }),\n        catchError((error) => {\n          if (error.status === 404) {\n            return throwError(() => new Error(`Cryptocurrency ${coinId} not found`));\n          }\n          return throwError(() => error);\n        })\n      );\n  }\n\n  searchCryptos(query: string): Observable<CryptoSearchResult[]> {\n    return this.http\n      .get<CoinGeckoSearchResult>(`${this.baseUrl}/search`, {\n        params: { query: query.trim() },\n      })\n      .pipe(\n        map((result) => result.coins),\n        catchError((error) => {\n          console.error('Error searching cryptocurrencies:', error);\n          return throwError(() => new Error('Failed to search cryptocurrencies'));\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "coins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Array<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CryptoSearchResult",
            "id": "interface-CryptoSearchResult-66a3cbabbabe3ed04ce61e596c4d08d756948836d743c811abb9a0fd84afec017a3320725370699707287e317e2c974cc0e0426728763342b6daaa975f75c571",
            "file": "src/app/core/services/crypto.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, catchError, throwError } from 'rxjs';\n\ninterface CoinGeckoSearchResult {\n  coins: Array<{\n    id: string;\n    symbol: string;\n    name: string;\n    market_cap_rank: number;\n  }>;\n}\n\nexport interface CryptoSearchResult {\n  id: string;\n  symbol: string;\n  name: string;\n  market_cap_rank: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CryptoService {\n  private readonly baseUrl = 'https://api.coingecko.com/api/v3';\n  private http = inject(HttpClient);\n\n  constructor() {}\n\n  getCryptoPrice(coinId: string, currency: string = 'usd'): Observable<number> {\n    return this.http\n      .get<any>(`${this.baseUrl}/simple/price`, {\n        params: {\n          ids: coinId,\n          vs_currencies: currency,\n        },\n      })\n      .pipe(\n        map((response) => {\n          const price = response[coinId]?.[currency];\n          if (!price) {\n            throw new Error(`Price not found for ${coinId}`);\n          }\n          return price;\n        }),\n        catchError((error) => {\n          if (error.status === 404) {\n            return throwError(() => new Error(`Cryptocurrency ${coinId} not found`));\n          }\n          return throwError(() => error);\n        })\n      );\n  }\n\n  searchCryptos(query: string): Observable<CryptoSearchResult[]> {\n    return this.http\n      .get<CoinGeckoSearchResult>(`${this.baseUrl}/search`, {\n        params: { query: query.trim() },\n      })\n      .pipe(\n        map((result) => result.coins),\n        catchError((error) => {\n          console.error('Error searching cryptocurrencies:', error);\n          return throwError(() => new Error('Failed to search cryptocurrencies'));\n        })\n      );\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "market_cap_rank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "symbol",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginDto",
            "id": "interface-LoginDto-f3b3d4ed331333c6169aaa814c144a7f8da5268a24426b3ac0a4b91164df37b167988ce16cb8b1940ff8b6da1776096c0ae1a7a2d3a160fa6a6a71839349a2af",
            "file": "src/app/core/models/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  role: string;\n  isVerified: boolean;\n}\n\nexport interface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  user: User;\n}\n\nexport interface RegisterDto {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginForm",
            "id": "interface-LoginForm-7f73f096c0b553d2517296973fd1c0e5e379302a8357ffbb5b97b3e345b90d554e2a4bf20755072e13e369af749fa5528104239aaa1905ec4b2e53ebb0785fb7",
            "file": "src/app/features/auth/components/login/login.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators, FormControl } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { DialogModule } from 'primeng/dialog';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { AuthService } from '../../services/auth.service';\nimport { finalize } from 'rxjs';\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    PasswordModule,\n    DialogModule,\n    ProgressSpinnerModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent {\n  private fb = inject(FormBuilder);\n  private authService = inject(AuthService);\n\n  @Input() visible = false;\n  @Output() visibleChange = new EventEmitter<boolean>();\n\n  isLoading = false;\n  errorMessage = '';\n\n  form = this.fb.group({\n    email: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.email] }\n    ),\n    password: new FormControl({ value: '', disabled: false }, { nonNullable: true, validators: [Validators.required] }),\n  });\n\n  onDialogHide(): void {\n    this.visibleChange.emit(false);\n    this.resetForm();\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.form.disable();\n\n      const formValue = this.form.value as LoginForm;\n      this.authService\n        .login(formValue)\n        .pipe(\n          finalize(() => {\n            this.isLoading = false;\n            this.form.enable();\n          })\n        )\n        .subscribe({\n          next: () => {\n            console.log(`Login successful! ${formValue.email}`);\n            this.visibleChange.emit(false);\n            this.resetForm();\n          },\n          error: (error) => {\n            this.errorMessage = error.error?.message || 'Login failed. Please try again.';\n          },\n        });\n    }\n  }\n\n  private resetForm(): void {\n    this.form.reset();\n    this.form.enable();\n    this.errorMessage = '';\n  }\n\n  get emailControl() {\n    return this.form.get('email');\n  }\n\n  get passwordControl() {\n    return this.form.get('password');\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MetalPriceResponse",
            "id": "interface-MetalPriceResponse-534fb820158e464d539fe43878c23f8abf3bf93753fdd4991669881aa40c939a90c11a004f32e17df537b43abe21051282f5d31c34c99d698c18bb1f5283ca3a",
            "file": "src/app/core/services/metal.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { environment } from '@/env/environment';\n\nexport interface MetalPriceResponse {\n  success: boolean;\n  base: string;\n  timestamp: number;\n  rates: {\n    [key: string]: number;\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetalService {\n  private readonly API_URL = 'https://api.metalpriceapi.com/v1';\n  private readonly API_KEY = environment.METAL_PRICE_API_KEY;\n  private http = inject(HttpClient);\n\n  constructor() {}\n\n  getMetalPrice(symbol: string, currency: string = 'USD'): Observable<number> {\n    return this.http\n      .get<MetalPriceResponse>(`${this.API_URL}/latest`, {\n        params: {\n          api_key: this.API_KEY,\n          base: currency,\n          currencies: symbol,\n        },\n      })\n      .pipe(map((response) => response.rates[`USD${symbol}`]));\n  }\n\n  getHistoricalMetalPrice(symbol: string, date: string, currency: string = 'USD'): Observable<number> {\n    return this.http\n      .get<MetalPriceResponse>(`${this.API_URL}/${date}`, {\n        params: {\n          api_key: this.API_KEY,\n          base: currency,\n          currencies: symbol,\n        },\n      })\n      .pipe(map((response) => response.rates[`USD${symbol}`]));\n  }\n}\n",
            "properties": [
                {
                    "name": "base",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "rates",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "timestamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterDto",
            "id": "interface-RegisterDto-f3b3d4ed331333c6169aaa814c144a7f8da5268a24426b3ac0a4b91164df37b167988ce16cb8b1940ff8b6da1776096c0ae1a7a2d3a160fa6a6a71839349a2af",
            "file": "src/app/core/models/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  role: string;\n  isVerified: boolean;\n}\n\nexport interface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  user: User;\n}\n\nexport interface RegisterDto {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterForm",
            "id": "interface-RegisterForm-ec633f47b831c289f6ebe2ed289812edef0e5c63cdd9a2e27cd857c1829d61a0b013a1834f4ea0fc95ada15973cad9b4e49cb95737f987c3e311a51791dad0ab",
            "file": "src/app/features/auth/components/register/register.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators, FormControl } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { DialogModule } from 'primeng/dialog';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { AuthService } from '../../services/auth.service';\nimport { finalize } from 'rxjs';\n\ninterface RegisterForm {\n  email: string;\n  password: string;\n}\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    PasswordModule,\n    DialogModule,\n    ProgressSpinnerModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RegisterComponent {\n  private fb = inject(FormBuilder);\n  private authService = inject(AuthService);\n\n  @Input() visible = false;\n  @Output() visibleChange = new EventEmitter<boolean>();\n\n  isLoading = false;\n  errorMessage = '';\n\n  form = this.fb.group({\n    email: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.email] }\n    ),\n    password: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.minLength(8)] }\n    ),\n  });\n\n  constructor() {\n    // Constructor code if needed\n  }\n\n  onDialogHide(): void {\n    this.visibleChange.emit(false);\n    this.resetForm();\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.form.disable();\n\n      const formValue = this.form.value as RegisterForm;\n      this.authService\n        .register(formValue)\n        .pipe(\n          finalize(() => {\n            this.isLoading = false;\n            this.form.enable();\n          })\n        )\n        .subscribe({\n          next: () => {\n            this.visibleChange.emit(false);\n            this.resetForm();\n          },\n          error: (error) => {\n            this.errorMessage = error.error?.message || 'Registration failed. Please try again.';\n          },\n        });\n    }\n  }\n\n  private resetForm(): void {\n    this.form.reset();\n    this.form.enable();\n    this.errorMessage = '';\n  }\n\n  get emailControl() {\n    return this.form.get('email');\n  }\n\n  get passwordControl() {\n    return this.form.get('password');\n  }\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-f3b3d4ed331333c6169aaa814c144a7f8da5268a24426b3ac0a4b91164df37b167988ce16cb8b1940ff8b6da1776096c0ae1a7a2d3a160fa6a6a71839349a2af",
            "file": "src/app/core/models/auth.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  id: string;\n  email: string;\n  firstName: string | null;\n  lastName: string | null;\n  role: string;\n  isVerified: boolean;\n}\n\nexport interface AuthResponse {\n  accessToken: string;\n  refreshToken: string;\n  user: User;\n}\n\nexport interface RegisterDto {\n  email: string;\n  password: string;\n  firstName?: string;\n  lastName?: string;\n}\n\nexport interface LoginDto {\n  email: string;\n  password: string;\n}\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isVerified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-989c86bad5456a781a0be959df2d917f6d2b54ce35e92cd9a8bb9a90db08b54c6d7113ade46eeba70e9507a276129fee51989225aee3f0ca114ea5050f400708",
            "file": "src/app/features/auth/services/auth.service.ts",
            "properties": [
                {
                    "name": "API_URL",
                    "defaultValue": "`${environment.API_BASE_URL}/user`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "currentUser$",
                    "defaultValue": "this.currentUserSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "currentUserSubject",
                    "defaultValue": "new BehaviorSubject<User | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "platformId",
                    "defaultValue": "inject(PLATFORM_ID)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "REFRESH_TOKEN_KEY",
                    "defaultValue": "'refresh_token'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "refreshTokenTimeout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "TOKEN_KEY",
                    "defaultValue": "'auth_token'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCurrentUser",
                    "args": [],
                    "optional": false,
                    "returnType": "User | null",
                    "typeParameters": [],
                    "line": 164,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getStoredRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getStoredToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 139,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserRole",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleAuthResponse",
                    "args": [
                        {
                            "name": "response",
                            "type": "AuthResponse",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 130,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "response",
                            "type": "AuthResponse",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleTokenRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 168,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuthenticatedUser",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 147,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isRegularUser",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 156,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isSuperUser",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 160,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadStoredUser",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "login",
                    "args": [
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthResponse>",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "LoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 121,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "register",
                    "args": [
                        {
                            "name": "dto",
                            "type": "RegisterDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<AuthResponse>",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "dto",
                            "type": "RegisterDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "startRefreshTokenTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "stopRefreshTokenTimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 81,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject, PLATFORM_ID } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, tap, map, catchError, throwError } from 'rxjs';\nimport { environment } from '@/env/environment';\nimport { User, AuthResponse, RegisterDto, LoginDto } from '@/core/models/auth.model';\nimport { isPlatformBrowser } from '@angular/common';\n\nexport enum UserRole {\n  USER = 'USER',\n  SUPER_USER = 'SUPER_USER',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AuthService {\n  private readonly TOKEN_KEY = 'auth_token';\n  private readonly REFRESH_TOKEN_KEY = 'refresh_token';\n  private readonly API_URL = `${environment.API_BASE_URL}/user`;\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  private platformId = inject(PLATFORM_ID);\n  private refreshTokenTimeout: any;\n\n  public currentUser$ = this.currentUserSubject.asObservable();\n\n  constructor(private http: HttpClient) {\n    if (isPlatformBrowser(this.platformId)) {\n      this.loadStoredUser();\n    }\n  }\n\n  private loadStoredUser() {\n    const token = this.getStoredToken();\n    if (token) {\n      this.http.get<User>(`${this.API_URL}/me`).subscribe({\n        next: (user) => {\n          this.currentUserSubject.next(user);\n          this.startRefreshTokenTimer();\n        },\n        error: () => this.logout(),\n      });\n    }\n  }\n\n  private startRefreshTokenTimer() {\n    if (!isPlatformBrowser(this.platformId)) return;\n\n    const token = this.getStoredToken();\n    if (!token) return;\n\n    try {\n      const jwtToken = JSON.parse(atob(token.split('.')[1]));\n      const expires = new Date(jwtToken.exp * 1000);\n      const timeout = expires.getTime() - Date.now() - 2 * 60 * 1000; // Refresh 2 minutes before expiry\n\n      if (timeout <= 0) {\n        this.refreshToken().subscribe({\n          error: (err) => {\n            console.error('Error refreshing token:', err);\n            this.logout();\n          },\n        });\n        return;\n      }\n\n      this.stopRefreshTokenTimer();\n      this.refreshTokenTimeout = setTimeout(() => {\n        this.refreshToken().subscribe({\n          error: (err) => {\n            console.error('Error refreshing token:', err);\n            this.logout();\n          },\n        });\n      }, timeout);\n    } catch (error) {\n      console.error('Error parsing JWT token:', error);\n      this.logout();\n    }\n  }\n\n  private stopRefreshTokenTimer() {\n    if (isPlatformBrowser(this.platformId)) {\n      clearTimeout(this.refreshTokenTimeout);\n    }\n  }\n\n  private refreshToken() {\n    const userId = this.currentUserSubject.value?.id;\n    const refreshToken = this.getStoredRefreshToken();\n\n    if (!userId || !refreshToken) {\n      return new Observable((subscriber) => {\n        this.logout();\n        subscriber.complete();\n      });\n    }\n\n    return this.http.post<AuthResponse>(`${this.API_URL}/refresh-token`, { userId, refreshToken }).pipe(\n      tap((response) => {\n        this.handleAuthResponse(response);\n        this.startRefreshTokenTimer();\n      })\n    );\n  }\n\n  register(dto: RegisterDto): Observable<AuthResponse> {\n    return this.http\n      .post<AuthResponse>(`${this.API_URL}/register`, dto)\n      .pipe(tap((response) => this.handleAuthResponse(response)));\n  }\n\n  login(dto: LoginDto): Observable<AuthResponse> {\n    return this.http\n      .post<AuthResponse>(`${this.API_URL}/login`, {\n        username: dto.email,\n        password: dto.password,\n      })\n      .pipe(tap((response) => this.handleAuthResponse(response)));\n  }\n\n  logout() {\n    if (isPlatformBrowser(this.platformId)) {\n      localStorage.removeItem(this.TOKEN_KEY);\n      localStorage.removeItem(this.REFRESH_TOKEN_KEY);\n    }\n    this.currentUserSubject.next(null);\n    this.stopRefreshTokenTimer();\n  }\n\n  private handleAuthResponse(response: AuthResponse) {\n    if (isPlatformBrowser(this.platformId)) {\n      localStorage.setItem(this.TOKEN_KEY, response.accessToken);\n      localStorage.setItem(this.REFRESH_TOKEN_KEY, response.refreshToken);\n    }\n    this.currentUserSubject.next(response.user);\n    this.startRefreshTokenTimer();\n  }\n\n  getStoredToken(): string | null {\n    return isPlatformBrowser(this.platformId) ? localStorage.getItem(this.TOKEN_KEY) : null;\n  }\n\n  private getStoredRefreshToken(): string | null {\n    return isPlatformBrowser(this.platformId) ? localStorage.getItem(this.REFRESH_TOKEN_KEY) : null;\n  }\n\n  isAuthenticatedUser(): boolean {\n    return !!this.currentUserSubject.value;\n  }\n\n  getUserRole(): string {\n    const currentUser = this.currentUserSubject.value;\n    return currentUser?.role || '';\n  }\n\n  isRegularUser(): boolean {\n    return this.getUserRole() === UserRole.USER;\n  }\n\n  isSuperUser(): boolean {\n    return this.getUserRole() === UserRole.SUPER_USER;\n  }\n\n  getCurrentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n\n  handleTokenRefresh(): Observable<string> {\n    const userId = this.currentUserSubject.value?.id;\n    const refreshToken = this.getStoredRefreshToken();\n\n    if (!userId || !refreshToken) {\n      this.logout();\n      return throwError(() => new Error('No refresh token available'));\n    }\n\n    return this.http.post<AuthResponse>(`${this.API_URL}/refresh-token`, { userId, refreshToken }).pipe(\n      tap((response) => {\n        this.handleAuthResponse(response);\n        this.startRefreshTokenTimer();\n      }),\n      map((response) => response.accessToken),\n      catchError((error) => {\n        this.logout();\n        return throwError(() => error);\n      })\n    );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 24,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "CryptoService",
            "id": "injectable-CryptoService-66a3cbabbabe3ed04ce61e596c4d08d756948836d743c811abb9a0fd84afec017a3320725370699707287e317e2c974cc0e0426728763342b6daaa975f75c571",
            "file": "src/app/core/services/crypto.service.ts",
            "properties": [
                {
                    "name": "baseUrl",
                    "defaultValue": "'https://api.coingecko.com/api/v3'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getCryptoPrice",
                    "args": [
                        {
                            "name": "coinId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'usd'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "coinId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'usd'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "searchCryptos",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<CryptoSearchResult[]>",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map, catchError, throwError } from 'rxjs';\n\ninterface CoinGeckoSearchResult {\n  coins: Array<{\n    id: string;\n    symbol: string;\n    name: string;\n    market_cap_rank: number;\n  }>;\n}\n\nexport interface CryptoSearchResult {\n  id: string;\n  symbol: string;\n  name: string;\n  market_cap_rank: number;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CryptoService {\n  private readonly baseUrl = 'https://api.coingecko.com/api/v3';\n  private http = inject(HttpClient);\n\n  constructor() {}\n\n  getCryptoPrice(coinId: string, currency: string = 'usd'): Observable<number> {\n    return this.http\n      .get<any>(`${this.baseUrl}/simple/price`, {\n        params: {\n          ids: coinId,\n          vs_currencies: currency,\n        },\n      })\n      .pipe(\n        map((response) => {\n          const price = response[coinId]?.[currency];\n          if (!price) {\n            throw new Error(`Price not found for ${coinId}`);\n          }\n          return price;\n        }),\n        catchError((error) => {\n          if (error.status === 404) {\n            return throwError(() => new Error(`Cryptocurrency ${coinId} not found`));\n          }\n          return throwError(() => error);\n        })\n      );\n  }\n\n  searchCryptos(query: string): Observable<CryptoSearchResult[]> {\n    return this.http\n      .get<CoinGeckoSearchResult>(`${this.baseUrl}/search`, {\n        params: { query: query.trim() },\n      })\n      .pipe(\n        map((result) => result.coins),\n        catchError((error) => {\n          console.error('Error searching cryptocurrencies:', error);\n          return throwError(() => new Error('Failed to search cryptocurrencies'));\n        })\n      );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 26
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LegalService",
            "id": "injectable-LegalService-28ec766d8cb7a52bcbf84ffb56223884b999ece9279b7928aac32a18973a3c86cfa32e869c8460f0fe7319862608357cb90f1f18c029e9f2523bb7ce65c0d1da",
            "file": "src/app/core/services/legal.service.ts",
            "properties": [
                {
                    "name": "DISCLAIMER_KEY",
                    "defaultValue": "'disclaimer_shown'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "disclaimerShownSignal",
                    "defaultValue": "signal<boolean>(\n    this.isBrowser ? localStorage.getItem(this.DISCLAIMER_KEY) === 'true' : false\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isBrowser",
                    "defaultValue": "isPlatformBrowser(inject(PLATFORM_ID))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "markDisclaimerAsShown",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { PLATFORM_ID, inject } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class LegalService {\n  private readonly DISCLAIMER_KEY = 'disclaimer_shown';\n  private readonly isBrowser = isPlatformBrowser(inject(PLATFORM_ID));\n  private disclaimerShownSignal = signal<boolean>(\n    this.isBrowser ? localStorage.getItem(this.DISCLAIMER_KEY) === 'true' : false\n  );\n\n  markDisclaimerAsShown(): void {\n    if (this.isBrowser) {\n      localStorage.setItem(this.DISCLAIMER_KEY, 'true');\n    }\n    this.disclaimerShownSignal.set(true);\n  }\n\n  get disclaimerShown() {\n    return this.disclaimerShownSignal.asReadonly();\n  }\n}\n",
            "accessors": {
                "disclaimerShown": {
                    "name": "disclaimerShown",
                    "getSignature": {
                        "name": "disclaimerShown",
                        "type": "",
                        "returnType": "",
                        "line": 22
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "MetalService",
            "id": "injectable-MetalService-534fb820158e464d539fe43878c23f8abf3bf93753fdd4991669881aa40c939a90c11a004f32e17df537b43abe21051282f5d31c34c99d698c18bb1f5283ca3a",
            "file": "src/app/core/services/metal.service.ts",
            "properties": [
                {
                    "name": "API_KEY",
                    "defaultValue": "environment.METAL_PRICE_API_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "API_URL",
                    "defaultValue": "'https://api.metalpriceapi.com/v1'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getHistoricalMetalPrice",
                    "args": [
                        {
                            "name": "symbol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'USD'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "symbol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "date",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'USD'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getMetalPrice",
                    "args": [
                        {
                            "name": "symbol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'USD'"
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<number>",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "symbol",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "currency",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "'USD'",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, map } from 'rxjs';\nimport { environment } from '@/env/environment';\n\nexport interface MetalPriceResponse {\n  success: boolean;\n  base: string;\n  timestamp: number;\n  rates: {\n    [key: string]: number;\n  };\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class MetalService {\n  private readonly API_URL = 'https://api.metalpriceapi.com/v1';\n  private readonly API_KEY = environment.METAL_PRICE_API_KEY;\n  private http = inject(HttpClient);\n\n  constructor() {}\n\n  getMetalPrice(symbol: string, currency: string = 'USD'): Observable<number> {\n    return this.http\n      .get<MetalPriceResponse>(`${this.API_URL}/latest`, {\n        params: {\n          api_key: this.API_KEY,\n          base: currency,\n          currencies: symbol,\n        },\n      })\n      .pipe(map((response) => response.rates[`USD${symbol}`]));\n  }\n\n  getHistoricalMetalPrice(symbol: string, date: string, currency: string = 'USD'): Observable<number> {\n    return this.http\n      .get<MetalPriceResponse>(`${this.API_URL}/${date}`, {\n        params: {\n          api_key: this.API_KEY,\n          base: currency,\n          currencies: symbol,\n        },\n      })\n      .pipe(map((response) => response.rates[`USD${symbol}`]));\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 21
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "NotificationService",
            "id": "injectable-NotificationService-43c9e40f174f6cfd1e61c8fb77deacb6e043c2ee4b7f101a3b2e88baa89b079cbabc41e45b0ba0bd4a956c8c4af432c86033da3a842455c209ca445adba60752",
            "file": "src/app/core/services/notification.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "requestPermission",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<boolean>",
                    "typeParameters": [],
                    "line": 8,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "showNotification",
                    "args": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "NotificationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ],
                    "jsdoctags": [
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "NotificationOptions",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { inject } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class NotificationService {\n  async requestPermission(): Promise<boolean> {\n    if (!('Notification' in window)) {\n      console.warn('Notifications not supported in this browser');\n      return false;\n    }\n\n    console.log('Current permission:', Notification.permission);\n    if (Notification.permission === 'granted') {\n      return true;\n    }\n\n    const permission = await Notification.requestPermission();\n    console.log('Permission after request:', permission);\n    return permission === 'granted';\n  }\n\n  async showNotification(title: string, options?: NotificationOptions): Promise<void> {\n    console.log('Attempting to show notification:', title);\n    const hasPermission = await this.requestPermission();\n    if (!hasPermission) {\n      console.warn('Notification permission not granted');\n      return;\n    }\n\n    try {\n      new Notification(title, options);\n      console.log('Notification created successfully');\n    } catch (error) {\n      console.error('Failed to create notification:', error);\n    }\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SettingsService",
            "id": "injectable-SettingsService-6ce0683b4403f16784c89d399471fd7b48eba835d4fa574128b2ce173ea7949e590f7e8ea829f66d5c492dfb9e2a99d6e508aa262bdb84845b4fff285f43bc63",
            "file": "src/app/core/services/settings.service.ts",
            "properties": [
                {
                    "name": "defaultCurrencySignal",
                    "defaultValue": "signal<Currency>('usd')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "setDefaultCurrency",
                    "args": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal, effect } from '@angular/core';\nimport { Currency } from '@/core/models/currency.model';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class SettingsService {\n  private readonly defaultCurrencySignal = signal<Currency>('usd');\n\n  constructor() {\n    effect(() => {\n      const currency = this.defaultCurrencySignal();\n      console.log('Settings changed - Default Currency:', currency);\n    });\n  }\n\n  get defaultCurrency() {\n    return this.defaultCurrencySignal;\n  }\n\n  setDefaultCurrency(currency: Currency): void {\n    this.defaultCurrencySignal.set(currency);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 8
            },
            "accessors": {
                "defaultCurrency": {
                    "name": "defaultCurrency",
                    "getSignature": {
                        "name": "defaultCurrency",
                        "type": "",
                        "returnType": "",
                        "line": 17
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AccountComponent",
            "id": "component-AccountComponent-70540df3140d818c4a81dc4026888631b410de7f1156272106af99d642e0030d47c6b628e84d74b44b5c0710b4a11c965ff3fa2c640368ea490667cd04e7058b",
            "file": "src/app/core/pages/account/account.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-account",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-6\">\n  <h1 class=\"text-2xl font-semibold mb-6\">Account</h1>\n  <div class=\"max-w-xl\">\n    <div class=\"bg-surface-700 rounded-lg p-6\">\n      <div class=\"flex flex-col gap-4\">\n        <div>\n          <label class=\"text-sm text-surface-200\">Email</label>\n          <p class=\"text-lg\">{{ email$ | async }}</p>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "email$",
                    "defaultValue": "this.authService.currentUser$.pipe(map((user) => user?.email))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AuthService } from '@/features/auth/services/auth.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-account',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"p-6\">\n      <h1 class=\"text-2xl font-semibold mb-6\">Account</h1>\n      <div class=\"max-w-xl\">\n        <div class=\"bg-surface-700 rounded-lg p-6\">\n          <div class=\"flex flex-col gap-4\">\n            <div>\n              <label class=\"text-sm text-surface-200\">Email</label>\n              <p class=\"text-lg\">{{ email$ | async }}</p>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AccountComponent {\n  private authService = inject(AuthService);\n  email$ = this.authService.currentUser$.pipe(map((user) => user?.email));\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": []
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-0bd3bb58a2632c5f1a917198a946f49306df260251cf0725343a23a78c49e743ba6c9fd7e63bdf6b0f19f7f9dbbad3eb359e6b2eae9195f785bdf6a1f1039b08",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disclaimerDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisclaimerDialogComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DisclaimerDialogComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "legalService",
                    "defaultValue": "inject(LegalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "DisclaimerDialogComponent",
                    "type": "component"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, ViewChild, OnInit, AfterViewInit, inject, Inject, PLATFORM_ID } from '@angular/core';\nimport { RouterOutlet } from '@angular/router';\nimport { SidebarComponent } from '@/core/layout/sidebar/sidebar.component';\nimport { FooterComponent } from '@/core/layout/footer/footer.component';\nimport { DisclaimerDialogComponent } from '@/core/legal/disclaimer-dialog.component';\nimport { LegalService } from '@/core/services/legal.service';\nimport { HeaderComponent } from '@/core/layout/header/header.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  standalone: true,\n  imports: [RouterOutlet, SidebarComponent, FooterComponent, DisclaimerDialogComponent, HeaderComponent],\n})\nexport class AppComponent implements OnInit, AfterViewInit {\n  @ViewChild(DisclaimerDialogComponent) disclaimerDialog!: DisclaimerDialogComponent;\n  private legalService = inject(LegalService);\n\n  constructor(@Inject(PLATFORM_ID) private platformId: object) {}\n\n  ngOnInit() {\n    console.log('platform is ', this.platformId);\n  }\n\n  ngAfterViewInit() {\n    if (!this.legalService.disclaimerShown()) {\n      setTimeout(() => {\n        this.disclaimerDialog.show();\n      }, 0);\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "platformId",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "platformId",
                        "type": "object",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"grid h-screen grid-cols-[auto_1fr] grid-rows-[40px_1fr_auto]\">\n  <app-header class=\"col-span-2\" />\n  <app-sidebar class=\"row-start-2 row-end-3\" />\n  <main class=\"overflow-y-auto\">\n    <router-outlet />\n  </main>\n  <app-footer class=\"col-span-2\" />\n</div>\n<app-disclaimer-dialog />\n"
        },
        {
            "name": "CreateAlertButtonComponent",
            "id": "component-CreateAlertButtonComponent-e91d6ab73f89bdcb0f086d3f8e005d956f86557c55326c54e3b44af46a7cdfa7523c9fdf905d6d927d76e0ee20e07e76b59c1954090f14ab16609965369b338f",
            "file": "src/app/features/alerts/components/buttons/create-alert-button.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-alert-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-alert-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "createAlertDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CreateAlertDialogComponent",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "CreateAlertDialogComponent, {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "selectAssetType",
                    "args": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "type",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "PopoverModule",
                    "type": "module"
                },
                {
                    "name": "CreateAlertDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { ButtonModule } from 'primeng/button';\nimport { PopoverModule } from 'primeng/popover';\nimport { CreateAlertDialogComponent } from '@/features/prices/components/dialogs/create-alert-dialog.component';\n\n@Component({\n  selector: 'app-create-alert-button',\n  imports: [ButtonModule, PopoverModule, CreateAlertDialogComponent],\n  templateUrl: './create-alert-button.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreateAlertButtonComponent {\n  @ViewChild(CreateAlertDialogComponent, { static: true }) createAlertDialog?: CreateAlertDialogComponent;\n\n  selectAssetType(type: string) {\n    if (type === 'crypto' || type === 'metal') {\n      this.createAlertDialog?.show();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p-button #btn type=\"button\" label=\"Create Alert\" styleClass=\"min-w-[140px]\" (click)=\"op.toggle($event)\"></p-button>\n\n<p-popover #op>\n  <ng-template pTemplate=\"content\">\n    <div class=\"flex flex-col gap-4\">\n      <div>\n        <span class=\"font-medium block mb-2\">Select Asset Type</span>\n        <ul class=\"list-none p-0 m-0 flex flex-col\">\n          <li\n            class=\"flex items-center gap-2 px-2 py-3 hover:bg-emphasis cursor-pointer rounded-border\"\n            (click)=\"selectAssetType('crypto')\"\n          >\n            <i class=\"pi pi-bitcoin text-xl\"></i>\n            <div>\n              <span class=\"font-medium\">Crypto</span>\n              <div class=\"text-sm text-surface-500 dark:text-surface-400\">Monitor crypto prices</div>\n            </div>\n          </li>\n          <li class=\"flex items-center gap-2 px-2 py-3 hover:bg-emphasis cursor-pointer rounded-border\">\n            <i class=\"pi pi-chart-line text-xl\"></i>\n            <div>\n              <span class=\"font-medium\">Stock</span>\n              <div class=\"text-sm text-surface-500 dark:text-surface-400\">Track stock prices</div>\n            </div>\n          </li>\n          <li\n            class=\"flex items-center gap-2 px-2 py-3 hover:bg-emphasis cursor-pointer rounded-border\"\n            (click)=\"selectAssetType('metal')\"\n          >\n            <i class=\"pi pi-dollar text-xl\"></i>\n            <div>\n              <span class=\"font-medium\">Precious Metal</span>\n              <div class=\"text-sm text-surface-500 dark:text-surface-400\">Track metal prices</div>\n            </div>\n          </li>\n        </ul>\n      </div>\n    </div>\n  </ng-template>\n</p-popover>\n\n<app-create-alert-dialog></app-create-alert-dialog>\n"
        },
        {
            "name": "CreateAlertDialogComponent",
            "id": "component-CreateAlertDialogComponent-2b512687d8da4bc82c5f0a8d25feb6915aeb486660ac19d3c635cd2ada79c72b9f7560cddef867a983629850a9195f19fcadbcc867828cabc1d5159904dbc49f",
            "file": "src/app/features/prices/components/dialogs/create-alert-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-alert-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-alert-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "MetalPriceComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, ChangeDetectionStrategy, ChangeDetectorRef } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { ButtonModule } from 'primeng/button';\nimport { MetalPriceComponent } from '@/features/prices/components/metal/metal-price.component';\n\n@Component({\n  selector: 'app-create-alert-dialog',\n  templateUrl: './create-alert-dialog.component.html',\n  imports: [DialogModule, ButtonModule, MetalPriceComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CreateAlertDialogComponent {\n  visible = false;\n  private cdr = inject(ChangeDetectorRef);\n\n  show() {\n    this.visible = true;\n    this.cdr.detectChanges();\n  }\n\n  hide() {\n    this.visible = false;\n    this.cdr.detectChanges();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p-dialog\n  [(visible)]=\"visible\"\n  [modal]=\"true\"\n  [draggable]=\"false\"\n  [resizable]=\"false\"\n  [closeOnEscape]=\"true\"\n  header=\"Create Price Alert\"\n  class=\"w-11/12 md:w-8/12 lg:w-6/12\"\n>\n  <div class=\"p-4\">\n    <app-metal-price></app-metal-price>\n  </div>\n</p-dialog>\n"
        },
        {
            "name": "CryptoPriceComponent",
            "id": "component-CryptoPriceComponent-55d41e01e58998a44c00f57d319361f75f8ad7726706e988ddd4bacbcbfd89dea3747cdbb840bf1cf2c2983cfccaadb72d7ed5c2313241f3d530b05f51143abe",
            "file": "src/app/features/prices/components/crypto/crypto-price.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-crypto-price",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./crypto-price.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "cryptoService",
                    "defaultValue": "inject(CryptoService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "price",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "searchSubject",
                    "defaultValue": "new Subject<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "selectedCrypto",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CryptoSearchResult | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "settingsService",
                    "defaultValue": "inject(SettingsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "suggestions",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CryptoSearchResult[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "methodsClass": [
                {
                    "name": "getPrice",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSearch",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "searchCryptos",
                    "args": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "query",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setupSearch",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "AutoCompleteModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "TooltipModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ChangeDetectorRef, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { AutoCompleteModule } from 'primeng/autocomplete';\nimport { TooltipModule } from 'primeng/tooltip';\nimport { CryptoService, CryptoSearchResult } from '@/core/services/crypto.service';\nimport { SettingsService } from '@/core/services/settings.service';\nimport { Subject, debounceTime, distinctUntilChanged } from 'rxjs';\n\n@Component({\n  selector: 'app-crypto-price',\n  templateUrl: './crypto-price.component.html',\n  imports: [CommonModule, FormsModule, AutoCompleteModule, ButtonModule, TooltipModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class CryptoPriceComponent {\n  private cryptoService = inject(CryptoService);\n  private settingsService = inject(SettingsService);\n  private cdr = inject(ChangeDetectorRef);\n\n  selectedCrypto: CryptoSearchResult | null = null;\n  suggestions: CryptoSearchResult[] = [];\n  price: number | null = null;\n  loading = false;\n  error = '';\n  private searchSubject = new Subject<string>();\n\n  constructor() {\n    this.setupSearch();\n  }\n\n  get selectedCurrency() {\n    return this.settingsService.defaultCurrency();\n  }\n\n  get canGetPrice(): boolean {\n    return this.selectedCrypto !== null && typeof this.selectedCrypto === 'object' && 'id' in this.selectedCrypto;\n  }\n\n  private setupSearch(): void {\n    this.searchSubject.pipe(debounceTime(300), distinctUntilChanged()).subscribe((query) => {\n      if (query) {\n        this.searchCryptos(query);\n      } else {\n        this.suggestions = [];\n        this.cdr.markForCheck();\n      }\n    });\n  }\n\n  onSearch(event: { query: string }): void {\n    this.searchSubject.next(event.query);\n  }\n\n  onSelect(): void {\n    this.error = '';\n    this.price = null;\n    this.cdr.markForCheck();\n  }\n\n  private searchCryptos(query: string): void {\n    this.cryptoService.searchCryptos(query).subscribe({\n      next: (results) => {\n        this.suggestions = results;\n        this.cdr.markForCheck();\n      },\n      error: (err) => {\n        this.error = err.message;\n        this.suggestions = [];\n        this.cdr.markForCheck();\n      },\n    });\n  }\n\n  getPrice(): void {\n    if (!this.canGetPrice) return;\n\n    this.loading = true;\n    this.error = '';\n    this.cdr.markForCheck();\n\n    this.cryptoService.getCryptoPrice(this.selectedCrypto!.id, this.selectedCurrency).subscribe({\n      next: (price) => {\n        this.price = price;\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n      error: (err) => {\n        this.error = err.message;\n        this.price = null;\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "extends": [],
            "accessors": {
                "selectedCurrency": {
                    "name": "selectedCurrency",
                    "getSignature": {
                        "name": "selectedCurrency",
                        "type": "",
                        "returnType": "",
                        "line": 33
                    }
                },
                "canGetPrice": {
                    "name": "canGetPrice",
                    "getSignature": {
                        "name": "canGetPrice",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 37
                    }
                }
            },
            "templateData": "<div class=\"flex flex-col gap-2 p-4\">\n  <div class=\"font-bold text-base mb-2\">Cryptocurrency Price</div>\n\n  <div class=\"flex items-center gap-2\">\n    <p-autoComplete\n      [(ngModel)]=\"selectedCrypto\"\n      [suggestions]=\"suggestions\"\n      (completeMethod)=\"onSearch($event)\"\n      (onSelect)=\"onSelect()\"\n      [field]=\"'symbol'\"\n      placeholder=\"Symbol (BTC, ETH, XRP ...)\"\n      [dropdown]=\"true\"\n      [showClear]=\"true\"\n      class=\"w-64 [&_.p-autocomplete-panel]:!w-64\"\n    >\n      <ng-template let-crypto pTemplate=\"item\">\n        <div class=\"flex flex-col w-52\">\n          <span class=\"font-medium truncate\">{{ crypto.symbol.toUpperCase() }}</span>\n          <span class=\"text-sm text-gray-500 truncate\" [pTooltip]=\"crypto.name\">{{ crypto.name }}</span>\n        </div>\n      </ng-template>\n    </p-autoComplete>\n\n    <p-button\n      [label]=\"loading ? 'Loading...' : 'Get Price'\"\n      [loading]=\"loading\"\n      (onClick)=\"getPrice()\"\n      [disabled]=\"!canGetPrice\"\n    ></p-button>\n  </div>\n\n  <div *ngIf=\"price !== null\" class=\"text-2xl font-mono mt-4 text-emerald-400\">\n    {{ selectedCurrency === 'usd' ? '$' : '€' }}{{ price.toLocaleString() }}\n  </div>\n\n  <div *ngIf=\"error\" class=\"text-red-500\">\n    {{ error }}\n  </div>\n</div>\n"
        },
        {
            "name": "DisclaimerDialogComponent",
            "id": "component-DisclaimerDialogComponent-9ceccff586bb27e0635341f8587272dcf406d3a4b6995916e3e3a5afc79975824bbdf5c1970fcf9db3f17c1c4ac8a98366af1ae47c6465fdc7f8860480239fe5",
            "file": "src/app/core/legal/disclaimer-dialog.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-disclaimer-dialog",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./disclaimer-dialog.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "legalService",
                    "defaultValue": "inject(LegalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "visible",
                    "defaultValue": "signal(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "methodsClass": [
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "show",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, signal, inject } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { ButtonModule } from 'primeng/button';\nimport { LegalService } from '@/core/services/legal.service';\n\n@Component({\n  selector: 'app-disclaimer-dialog',\n  templateUrl: './disclaimer-dialog.component.html',\n  imports: [DialogModule, ButtonModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class DisclaimerDialogComponent {\n  visible = signal(false);\n  private legalService = inject(LegalService);\n\n  constructor() {}\n\n  show(): void {\n    this.visible.set(true);\n  }\n\n  hide(): void {\n    this.visible.set(false);\n    this.legalService.markDisclaimerAsShown();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "templateData": "@defer (on immediate) {\n  <p-dialog\n    [visible]=\"visible()\"\n    (visibleChange)=\"visible.set($event)\"\n    [modal]=\"true\"\n    header=\"Disclaimer\"\n    [style]=\"{ width: '90%', maxWidth: '600px' }\"\n    [draggable]=\"false\"\n    [resizable]=\"false\"\n    [closeOnEscape]=\"false\"\n    [closable]=\"false\"\n    class=\"disclaimer-dialog\"\n  >\n    <div class=\"space-y-4 text-xs\">\n      <p>\n        Use at your own risk. I created this tool for fun. It is not intended to be used for financial decisions.\n        <br />\n        Use this instead:\n        <a href=\"https://cryptocurrencyalerting.com\" target=\"_blank\" class=\"text-blue-400 pl-1 underline\"\n          >cryptocurrencyalerting.com</a\n        >\n      </p>\n      <p>\n        This website is for educational and informational purposes only. The information provided should not be\n        construed as financial advice. We do not guarantee the accuracy, completeness, or timeliness of any information\n        presented. You acknowledge and agree that:\n      </p>\n      <ul class=\"list-disc pl-6 space-y-2\">\n        <li>Any investment decisions you make are solely your responsibility</li>\n        <li>We are not responsible for any financial gains or losses resulting from your use of this service</li>\n        <li>You should consult with qualified financial advisors before making any investment decisions</li>\n      </ul>\n      <p class=\"text-center text-md bold pt-1\">USE AT YOUR OWN RISK.</p>\n    </div>\n\n    <div class=\"flex justify-center mt-6\">\n      <p-button label=\"I Understand\" (onClick)=\"hide()\" severity=\"primary\"></p-button>\n    </div>\n  </p-dialog>\n} @placeholder {\n  <!-- Empty placeholder while dialog loads -->\n}\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-5447d10a2209f3d78135cf4f34fd6a3c2c706d6eb00e806785bc45ec8d5f890cb27b0151d0feb355020614700f90f98d9cd7ead2fcefd720c12b11c0bea1192b",
            "file": "src/app/core/layout/footer/footer.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "disclaimerDialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DisclaimerDialogComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "DisclaimerDialogComponent"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "showDisclaimer",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "DisclaimerDialogComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { DisclaimerDialogComponent } from '@/core/legal/disclaimer-dialog.component';\n\n@Component({\n  selector: 'app-footer',\n  templateUrl: './footer.component.html',\n  imports: [DisclaimerDialogComponent],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterComponent {\n  @ViewChild(DisclaimerDialogComponent)\n  disclaimerDialog!: DisclaimerDialogComponent;\n\n  showDisclaimer(): void {\n    this.disclaimerDialog.show();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<footer class=\"w-full py-4 border-t-2 border-gray-700\">\n  <div class=\"px-4\">\n    <div class=\"flex justify-center items-center space-x-4 text-sm text-gray-400\">\n      <button (click)=\"showDisclaimer()\" class=\"hover:text-gray-200 transition-colors\">Disclaimer</button>\n      <span>&copy; 2024 Price Alert</span>\n    </div>\n  </div>\n  <app-disclaimer-dialog />\n</footer>\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-29871a710cf4216af208c287ac7c9d91a8d9cc8d40d8456f6fd6dc1ea0e9e3fb387575b51bea866d288bd78b92fd354572cbd3a8da815d7a6528ec008ebbf48c",
            "file": "src/app/core/layout/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuthenticated$",
                    "defaultValue": "this.authService.currentUser$.pipe()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "showLoginDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showRegisterDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "onLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "RegisterComponent",
                    "type": "component"
                },
                {
                    "name": "LoginComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "NgIf"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { ButtonModule } from 'primeng/button';\nimport { AuthService } from '@/features/auth/services/auth.service';\nimport { RegisterComponent } from '@/features/auth/components/register/register.component';\nimport { LoginComponent } from '@/features/auth/components/login/login.component';\nimport { Router } from '@angular/router';\nimport { AsyncPipe, NgIf } from '@angular/common';\n\n@Component({\n  selector: 'app-header',\n  templateUrl: './header.component.html',\n  standalone: true,\n  imports: [ButtonModule, RegisterComponent, LoginComponent, AsyncPipe, NgIf],\n})\nexport class HeaderComponent {\n  private authService = inject(AuthService);\n  private router = inject(Router);\n\n  showRegisterDialog = false;\n  showLoginDialog = false;\n  isAuthenticated$ = this.authService.currentUser$.pipe();\n\n  onLogout() {\n    this.authService.logout();\n    this.router.navigate(['/']);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"flex items-center justify-end h-[40px] w-screen bg-surface-900 px-4\">\n  <div class=\"flex items-center gap-4\">\n    <ng-container *ngIf=\"!(isAuthenticated$ | async)\">\n      <p-button label=\"Register\" severity=\"secondary\" [text]=\"true\" (onClick)=\"showRegisterDialog = true\"></p-button>\n      <p-button label=\"Login\" severity=\"secondary\" [text]=\"true\" (onClick)=\"showLoginDialog = true\"></p-button>\n    </ng-container>\n    <ng-container *ngIf=\"isAuthenticated$ | async\">\n      <p-button label=\"Logout\" severity=\"secondary\" [text]=\"true\" (onClick)=\"onLogout()\"></p-button>\n    </ng-container>\n  </div>\n</div>\n\n<app-register [(visible)]=\"showRegisterDialog\"></app-register>\n<app-login [(visible)]=\"showLoginDialog\"></app-login>\n"
        },
        {
            "name": "HomeComponent",
            "id": "component-HomeComponent-ada9e2e70233e9f6d6ef708a58582bc6d9d515dcc8b809b94991fad1991e056c31d0000e912e0be7aeeaa49d5ef48e89b1dd9bb5925cab7d4b4c0760954e21cd",
            "file": "src/app/core/pages/home/home.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-home",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./home.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "RouterLink"
                },
                {
                    "name": "CreateAlertButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { RouterLink } from '@angular/router';\nimport { CreateAlertButtonComponent } from '@/features/alerts/components/buttons/create-alert-button.component';\n\n@Component({\n  selector: 'app-home',\n  imports: [RouterLink, CreateAlertButtonComponent],\n  templateUrl: './home.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HomeComponent {}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"container mx-auto p-8\">\n  <div class=\"max-w-6xl mx-auto\">\n    <div class=\"flex items-center justify-between mb-8\">\n      <div></div>\n      <app-create-alert-button></app-create-alert-button>\n    </div>\n\n    <div class=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8\">\n      <div class=\"bg-dark-card p-6 rounded-lg\">\n        <h3 class=\"text-lg font-semibold mb-2 text-gray-300\">Total Alerts</h3>\n        <p class=\"text-3xl font-bold text-slate-300\">0</p>\n      </div>\n      <div class=\"bg-dark-card p-6 rounded-lg\">\n        <h3 class=\"text-lg font-semibold mb-2 text-gray-300\">Triggered Today</h3>\n        <p class=\"text-3xl font-bold text-green-400\">0</p>\n      </div>\n    </div>\n\n    <div class=\"bg-dark-card p-6 rounded-lg\">\n      <div class=\"flex items-center justify-between mb-4\">\n        <h2 class=\"text-xl font-semibold text-gray-200\">Recent Alerts</h2>\n        <a class=\"text-slate-300 hover:text-slate-100 transition-colors\" routerLink=\"/alerts\">View All</a>\n      </div>\n      <div class=\"text-gray-400 text-center py-8\">\n        <p class=\"mb-4\">No alerts set yet</p>\n        <app-create-alert-button></app-create-alert-button>\n      </div>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-7f73f096c0b553d2517296973fd1c0e5e379302a8357ffbb5b97b3e345b90d554e2a4bf20755072e13e369af749fa5528104239aaa1905ec4b2e53ebb0785fb7",
            "file": "src/app/features/auth/components/login/login.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "visibleChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.email] }\n    ),\n    password: new FormControl({ value: '', disabled: false }, { nonNullable: true, validators: [Validators.required] }),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "onDialogHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "ProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators, FormControl } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { DialogModule } from 'primeng/dialog';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { AuthService } from '../../services/auth.service';\nimport { finalize } from 'rxjs';\n\ninterface LoginForm {\n  email: string;\n  password: string;\n}\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    PasswordModule,\n    DialogModule,\n    ProgressSpinnerModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LoginComponent {\n  private fb = inject(FormBuilder);\n  private authService = inject(AuthService);\n\n  @Input() visible = false;\n  @Output() visibleChange = new EventEmitter<boolean>();\n\n  isLoading = false;\n  errorMessage = '';\n\n  form = this.fb.group({\n    email: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.email] }\n    ),\n    password: new FormControl({ value: '', disabled: false }, { nonNullable: true, validators: [Validators.required] }),\n  });\n\n  onDialogHide(): void {\n    this.visibleChange.emit(false);\n    this.resetForm();\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.form.disable();\n\n      const formValue = this.form.value as LoginForm;\n      this.authService\n        .login(formValue)\n        .pipe(\n          finalize(() => {\n            this.isLoading = false;\n            this.form.enable();\n          })\n        )\n        .subscribe({\n          next: () => {\n            console.log(`Login successful! ${formValue.email}`);\n            this.visibleChange.emit(false);\n            this.resetForm();\n          },\n          error: (error) => {\n            this.errorMessage = error.error?.message || 'Login failed. Please try again.';\n          },\n        });\n    }\n  }\n\n  private resetForm(): void {\n    this.form.reset();\n    this.form.enable();\n    this.errorMessage = '';\n  }\n\n  get emailControl() {\n    return this.form.get('email');\n  }\n\n  get passwordControl() {\n    return this.form.get('password');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "",
                        "line": 89
                    }
                },
                "passwordControl": {
                    "name": "passwordControl",
                    "getSignature": {
                        "name": "passwordControl",
                        "type": "",
                        "returnType": "",
                        "line": 93
                    }
                }
            },
            "templateData": "<p-dialog\n  header=\"Login\"\n  [(visible)]=\"visible\"\n  [modal]=\"true\"\n  [draggable]=\"false\"\n  [resizable]=\"false\"\n  (onHide)=\"onDialogHide()\"\n  [style]=\"{ width: '400px' }\"\n  class=\"dark:bg-gray-900\"\n>\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"flex flex-col gap-4\">\n    <div class=\"flex flex-col gap-2\">\n      <label for=\"email\">Email</label>\n      <input\n        id=\"email\"\n        type=\"email\"\n        pInputText\n        formControlName=\"email\"\n        [class.ng-invalid]=\"emailControl?.invalid && emailControl?.touched\"\n      />\n      <small class=\"text-red-500\" *ngIf=\"emailControl?.invalid && emailControl?.touched\">\n        Please enter a valid email address\n      </small>\n    </div>\n\n    <div class=\"flex flex-col gap-2\">\n      <label for=\"password\">Password</label>\n      <p-password\n        id=\"password\"\n        formControlName=\"password\"\n        [feedback]=\"false\"\n        [toggleMask]=\"true\"\n        [class.ng-invalid]=\"passwordControl?.invalid && passwordControl?.touched\"\n      />\n      <small class=\"text-red-500\" *ngIf=\"passwordControl?.invalid && passwordControl?.touched\">\n        Password is required\n      </small>\n    </div>\n\n    <small class=\"text-red-500\" *ngIf=\"errorMessage\">\n      {{ errorMessage }}\n    </small>\n\n    <p-button\n      type=\"submit\"\n      label=\"Login\"\n      [loading]=\"isLoading\"\n      [disabled]=\"form.invalid || isLoading\"\n      styleClass=\"w-full\"\n    />\n  </form>\n</p-dialog>\n"
        },
        {
            "name": "MetalPriceComponent",
            "id": "component-MetalPriceComponent-1c07faa1251b210779929f8993d66ff9c005168a92801975503c23a81a2c40e70d163fd72956b4525e7a94ceb46e407defddc80f6efce743ecded3e51a6e384c",
            "file": "src/app/features/prices/components/metal/metal-price.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-metal-price",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./metal-price.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "alertPrice",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "cdr",
                    "defaultValue": "inject(ChangeDetectorRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "error",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "metalOptions",
                    "defaultValue": "[\n    { label: 'Gold', value: 'XAU' },\n    { label: 'Silver', value: 'XAG' },\n    { label: 'Platinum', value: 'XPT' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "metalService",
                    "defaultValue": "inject(MetalService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "notificationService",
                    "defaultValue": "inject(NotificationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "price",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "saving",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectedMetal",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "settingsService",
                    "defaultValue": "inject(SettingsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "createAlert",
                    "args": [],
                    "optional": false,
                    "returnType": "Promise<void>",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        134
                    ]
                },
                {
                    "name": "getPrice",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSelect",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "SelectButtonModule",
                    "type": "module"
                },
                {
                    "name": "InputNumberModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, ChangeDetectorRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { SelectButtonModule } from 'primeng/selectbutton';\nimport { InputNumberModule } from 'primeng/inputnumber';\nimport { MetalService } from '@/core/services/metal.service';\nimport { SettingsService } from '@/core/services/settings.service';\nimport { NotificationService } from '@/core/services/notification.service';\nimport { inject } from '@angular/core';\nimport { Decimal } from 'decimal.js';\n\n@Component({\n  selector: 'app-metal-price',\n  templateUrl: './metal-price.component.html',\n  imports: [CommonModule, FormsModule, ButtonModule, SelectButtonModule, InputNumberModule],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MetalPriceComponent {\n  metalOptions = [\n    { label: 'Gold', value: 'XAU' },\n    { label: 'Silver', value: 'XAG' },\n    { label: 'Platinum', value: 'XPT' },\n  ];\n\n  selectedMetal: string | null = null;\n  price: number | null = null;\n  alertPrice: number | null = null;\n  loading = false;\n  error = '';\n  saving = false;\n\n  private metalService = inject(MetalService);\n  private settingsService = inject(SettingsService);\n  private notificationService = inject(NotificationService);\n  private cdr = inject(ChangeDetectorRef);\n\n  get selectedCurrency() {\n    return this.settingsService.defaultCurrency();\n  }\n\n  get canGetPrice(): boolean {\n    return this.selectedMetal !== null;\n  }\n\n  get canSaveAlert(): boolean {\n    if (!this.selectedMetal || !this.alertPrice) return false;\n    try {\n      const decimal = new Decimal(this.alertPrice);\n      return decimal.isPositive() && decimal.isFinite();\n    } catch {\n      return false;\n    }\n  }\n\n  get selectedMetalName(): string {\n    return this.metalOptions.find((m) => m.value === this.selectedMetal)?.label || '';\n  }\n\n  onSelect(): void {\n    this.error = '';\n    this.price = null;\n    this.alertPrice = null;\n    this.cdr.markForCheck();\n  }\n\n  getPrice(): void {\n    if (!this.canGetPrice) return;\n\n    this.loading = true;\n    this.error = '';\n    this.cdr.markForCheck();\n\n    this.metalService.getMetalPrice(this.selectedMetal!, this.selectedCurrency).subscribe({\n      next: (price) => {\n        this.price = price;\n        this.alertPrice = price;\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n      error: (err) => {\n        this.error = err.message;\n        this.price = null;\n        this.alertPrice = null;\n        this.loading = false;\n        this.cdr.markForCheck();\n      },\n    });\n  }\n\n  async createAlert(): Promise<void> {\n    if (!this.selectedMetal || !this.alertPrice || !this.canSaveAlert) return;\n\n    this.saving = true;\n    this.cdr.markForCheck();\n\n    try {\n      // Mock save operation - replace with actual API call later\n      await new Promise((resolve) => setTimeout(resolve, 1000));\n      const message = `Alert created for ${this.selectedMetalName} at ${this.selectedCurrency === 'usd' ? '$' : '€'}${this.alertPrice.toLocaleString()}`;\n      await this.notificationService.showNotification(message);\n    } finally {\n      this.saving = false;\n      this.cdr.markForCheck();\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "selectedCurrency": {
                    "name": "selectedCurrency",
                    "getSignature": {
                        "name": "selectedCurrency",
                        "type": "",
                        "returnType": "",
                        "line": 38
                    }
                },
                "canGetPrice": {
                    "name": "canGetPrice",
                    "getSignature": {
                        "name": "canGetPrice",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 42
                    }
                },
                "canSaveAlert": {
                    "name": "canSaveAlert",
                    "getSignature": {
                        "name": "canSaveAlert",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                },
                "selectedMetalName": {
                    "name": "selectedMetalName",
                    "getSignature": {
                        "name": "selectedMetalName",
                        "type": "string",
                        "returnType": "string",
                        "line": 56
                    }
                }
            },
            "templateData": "<div class=\"flex flex-col gap-2 p-4\">\n  <div class=\"font-bold text-base mb-2\">Precious Metal Price</div>\n\n  <div class=\"flex items-center gap-2\">\n    <p-selectButton\n      [(ngModel)]=\"selectedMetal\"\n      [options]=\"metalOptions\"\n      (onSelect)=\"onSelect()\"\n      optionLabel=\"label\"\n      optionValue=\"value\"\n      class=\"w-64\"\n    ></p-selectButton>\n\n    <p-button\n      [label]=\"loading ? 'Loading...' : 'Get Price'\"\n      [loading]=\"loading\"\n      (onClick)=\"getPrice()\"\n      [disabled]=\"!canGetPrice\"\n    ></p-button>\n  </div>\n\n  <div *ngIf=\"price !== null\" class=\"flex flex-col gap-4\">\n    <div class=\"text-2xl font-mono mt-4 text-emerald-400\">\n      {{ selectedCurrency === 'usd' ? '$' : '€' }}{{ price.toLocaleString() }}\n    </div>\n\n    <div class=\"flex flex-col gap-2\">\n      <label for=\"alertPrice\" class=\"text-sm text-gray-400\">Alert Price</label>\n      <div class=\"flex items-center gap-2\">\n        <p-inputNumber\n          id=\"alertPrice\"\n          [(ngModel)]=\"alertPrice\"\n          [minFractionDigits]=\"2\"\n          [maxFractionDigits]=\"2\"\n          [min]=\"0\"\n          [showButtons]=\"false\"\n          [placeholder]=\"'Enter alert price'\"\n          class=\"w-48\"\n        ></p-inputNumber>\n\n        <p-button\n          [label]=\"saving ? 'Saving...' : 'Save Alert'\"\n          [loading]=\"saving\"\n          (onClick)=\"createAlert()\"\n          [disabled]=\"!canSaveAlert\"\n          severity=\"secondary\"\n          [outlined]=\"true\"\n        ></p-button>\n      </div>\n    </div>\n  </div>\n\n  <div *ngIf=\"error\" class=\"text-red-500\">\n    {{ error }}\n  </div>\n</div>\n"
        },
        {
            "name": "PreferencesComponent",
            "id": "component-PreferencesComponent-228a1579f06e31df8e619ebf878fc3633c38eb66f9af845077249e1e75f569d31de173e955365b85b09c92c3a47c96afe1a55b455d9a41f4d8049dcec9498136",
            "file": "src/app/core/pages/preferences/preferences.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-preferences",
            "styleUrls": [],
            "styles": [],
            "template": "<div class=\"p-6\">\n  <h1 class=\"text-2xl font-semibold mb-6\">Preferences</h1>\n  <div class=\"max-w-xl\">\n    <div class=\"bg-surface-700 rounded-lg p-6\">\n      <h2 class=\"text-xl mb-4\">Currency Preferences</h2>\n      <div class=\"flex items-center gap-4\">\n        <label class=\"text-surface-200\">Default Currency:</label>\n        <p-selectButton\n          [options]=\"currencyOptions\"\n          [ngModel]=\"selectedCurrency\"\n          (ngModelChange)=\"onCurrencyChange($event)\"\n          optionLabel=\"value\"\n          optionValue=\"value\"\n        >\n          <ng-template let-item>\n            <i [class]=\"item.icon\"></i>\n          </ng-template>\n        </p-selectButton>\n      </div>\n    </div>\n  </div>\n</div>\n",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currencyOptions",
                    "defaultValue": "[\n    { icon: 'pi pi-dollar', value: 'usd' as Currency },\n    { icon: 'pi pi-euro', value: 'eur' as Currency },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "settingsService",
                    "defaultValue": "inject(SettingsService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "onCurrencyChange",
                    "args": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "currency",
                            "type": "Currency",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "SelectButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { SelectButtonModule } from 'primeng/selectbutton';\nimport { SettingsService } from '@/core/services/settings.service';\nimport { Currency } from '@/core/models/currency.model';\n\n@Component({\n  selector: 'app-preferences',\n  standalone: true,\n  imports: [CommonModule, FormsModule, SelectButtonModule],\n  template: `\n    <div class=\"p-6\">\n      <h1 class=\"text-2xl font-semibold mb-6\">Preferences</h1>\n      <div class=\"max-w-xl\">\n        <div class=\"bg-surface-700 rounded-lg p-6\">\n          <h2 class=\"text-xl mb-4\">Currency Preferences</h2>\n          <div class=\"flex items-center gap-4\">\n            <label class=\"text-surface-200\">Default Currency:</label>\n            <p-selectButton\n              [options]=\"currencyOptions\"\n              [ngModel]=\"selectedCurrency\"\n              (ngModelChange)=\"onCurrencyChange($event)\"\n              optionLabel=\"value\"\n              optionValue=\"value\"\n            >\n              <ng-template let-item>\n                <i [class]=\"item.icon\"></i>\n              </ng-template>\n            </p-selectButton>\n          </div>\n        </div>\n      </div>\n    </div>\n  `,\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class PreferencesComponent {\n  private settingsService = inject(SettingsService);\n\n  currencyOptions = [\n    { icon: 'pi pi-dollar', value: 'usd' as Currency },\n    { icon: 'pi pi-euro', value: 'eur' as Currency },\n  ];\n\n  get selectedCurrency() {\n    return this.settingsService.defaultCurrency();\n  }\n\n  onCurrencyChange(currency: Currency): void {\n    this.settingsService.setDefaultCurrency(currency);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "selectedCurrency": {
                    "name": "selectedCurrency",
                    "getSignature": {
                        "name": "selectedCurrency",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            }
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-ec633f47b831c289f6ebe2ed289812edef0e5c63cdd9a2e27cd857c1829d61a0b013a1834f4ea0fc95ada15973cad9b4e49cb95737f987c3e311a51791dad0ab",
            "file": "src/app/features/auth/components/register/register.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "visibleChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorMessage",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "fb",
                    "defaultValue": "inject(FormBuilder)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "form",
                    "defaultValue": "this.fb.group({\n    email: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.email] }\n    ),\n    password: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.minLength(8)] }\n    ),\n  })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                }
            ],
            "methodsClass": [
                {
                    "name": "onDialogHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onSubmit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "ProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, ReactiveFormsModule, Validators, FormControl } from '@angular/forms';\nimport { ButtonModule } from 'primeng/button';\nimport { InputTextModule } from 'primeng/inputtext';\nimport { PasswordModule } from 'primeng/password';\nimport { DialogModule } from 'primeng/dialog';\nimport { ProgressSpinnerModule } from 'primeng/progressspinner';\nimport { AuthService } from '../../services/auth.service';\nimport { finalize } from 'rxjs';\n\ninterface RegisterForm {\n  email: string;\n  password: string;\n}\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  standalone: true,\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    ButtonModule,\n    InputTextModule,\n    PasswordModule,\n    DialogModule,\n    ProgressSpinnerModule,\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class RegisterComponent {\n  private fb = inject(FormBuilder);\n  private authService = inject(AuthService);\n\n  @Input() visible = false;\n  @Output() visibleChange = new EventEmitter<boolean>();\n\n  isLoading = false;\n  errorMessage = '';\n\n  form = this.fb.group({\n    email: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.email] }\n    ),\n    password: new FormControl(\n      { value: '', disabled: false },\n      { nonNullable: true, validators: [Validators.required, Validators.minLength(8)] }\n    ),\n  });\n\n  constructor() {\n    // Constructor code if needed\n  }\n\n  onDialogHide(): void {\n    this.visibleChange.emit(false);\n    this.resetForm();\n  }\n\n  onSubmit(): void {\n    if (this.form.valid) {\n      this.isLoading = true;\n      this.errorMessage = '';\n      this.form.disable();\n\n      const formValue = this.form.value as RegisterForm;\n      this.authService\n        .register(formValue)\n        .pipe(\n          finalize(() => {\n            this.isLoading = false;\n            this.form.enable();\n          })\n        )\n        .subscribe({\n          next: () => {\n            this.visibleChange.emit(false);\n            this.resetForm();\n          },\n          error: (error) => {\n            this.errorMessage = error.error?.message || 'Registration failed. Please try again.';\n          },\n        });\n    }\n  }\n\n  private resetForm(): void {\n    this.form.reset();\n    this.form.enable();\n    this.errorMessage = '';\n  }\n\n  get emailControl() {\n    return this.form.get('email');\n  }\n\n  get passwordControl() {\n    return this.form.get('password');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 51
            },
            "extends": [],
            "accessors": {
                "emailControl": {
                    "name": "emailControl",
                    "getSignature": {
                        "name": "emailControl",
                        "type": "",
                        "returnType": "",
                        "line": 95
                    }
                },
                "passwordControl": {
                    "name": "passwordControl",
                    "getSignature": {
                        "name": "passwordControl",
                        "type": "",
                        "returnType": "",
                        "line": 99
                    }
                }
            },
            "templateData": "<p-dialog\n  [(visible)]=\"visible\"\n  [modal]=\"true\"\n  [draggable]=\"false\"\n  [resizable]=\"false\"\n  [closeOnEscape]=\"true\"\n  [dismissableMask]=\"true\"\n  [style]=\"{ width: '90vw', maxWidth: '500px' }\"\n  header=\"Create Account\"\n  (onHide)=\"onDialogHide()\"\n>\n  <form [formGroup]=\"form\" (ngSubmit)=\"onSubmit()\" class=\"space-y-6\">\n    <div class=\"flex flex-col gap-2\">\n      <label for=\"email\" class=\"text-sm font-medium\">Email</label>\n      <input\n        id=\"email\"\n        type=\"email\"\n        pInputText\n        formControlName=\"email\"\n        [class.ng-invalid]=\"emailControl?.invalid && emailControl?.touched\"\n        class=\"w-full\"\n        placeholder=\"Enter your email\"\n      />\n      <small class=\"text-red-500\" *ngIf=\"emailControl?.errors?.['required'] && emailControl?.touched\">\n        Email is required\n      </small>\n      <small class=\"text-red-500\" *ngIf=\"emailControl?.errors?.['email'] && emailControl?.touched\">\n        Please enter a valid email address\n      </small>\n    </div>\n\n    <div class=\"flex flex-col gap-2\">\n      <label for=\"password\" class=\"text-sm font-medium\">Password</label>\n      <p-password\n        id=\"password\"\n        formControlName=\"password\"\n        [toggleMask]=\"true\"\n        [feedback]=\"true\"\n        [class.ng-invalid]=\"passwordControl?.invalid && passwordControl?.touched\"\n        placeholder=\"Enter your password\"\n        styleClass=\"w-full\"\n        [inputStyle]=\"{ width: '100%' }\"\n        [style]=\"{ width: '100%' }\"\n      ></p-password>\n      <small class=\"text-red-500\" *ngIf=\"passwordControl?.errors?.['required'] && passwordControl?.touched\">\n        Password is required\n      </small>\n      <small class=\"text-red-500\" *ngIf=\"passwordControl?.errors?.['minlength'] && passwordControl?.touched\">\n        Password must be at least 8 characters\n      </small>\n    </div>\n\n    <div *ngIf=\"errorMessage\" class=\"text-red-500 text-sm\">\n      {{ errorMessage }}\n    </div>\n\n    <div class=\"flex flex-col gap-2\">\n      <p-button\n        type=\"submit\"\n        [disabled]=\"form.invalid || isLoading\"\n        styleClass=\"w-full\"\n        [label]=\"isLoading ? 'Creating Account...' : 'Sign Up'\"\n        severity=\"primary\"\n      >\n        <p-progressSpinner\n          *ngIf=\"isLoading\"\n          [style]=\"{ width: '20px', height: '20px' }\"\n          styleClass=\"ml-2\"\n          strokeWidth=\"4\"\n          fill=\"transparent\"\n          animationDuration=\".5s\"\n        ></p-progressSpinner>\n      </p-button>\n    </div>\n  </form>\n</p-dialog>\n"
        },
        {
            "name": "SandboxComponent",
            "id": "component-SandboxComponent-e894f1b25cbc104bb249a29a1d0fa30d35a6e935e1bf88f277c00a15f38414ea1a42648fdd52c49729a5476d49c486fe46472461c869ec9a01c4d98520dc749c",
            "file": "src/app/core/pages/sandbox/sandbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sandbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sandbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "showLoginDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "showRegisterDialog",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CryptoPriceComponent",
                    "type": "component"
                },
                {
                    "name": "MetalPriceComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CryptoPriceComponent } from '@/features/prices/components/crypto/crypto-price.component';\nimport { MetalPriceComponent } from '@/features/prices/components/metal/metal-price.component';\n\n@Component({\n  selector: 'app-sandbox',\n  templateUrl: './sandbox.component.html',\n  standalone: true,\n  imports: [CryptoPriceComponent, MetalPriceComponent],\n})\nexport class SandboxComponent {\n  showRegisterDialog = false;\n  showLoginDialog = false;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"p-4\">\n  <h1 class=\"text-2xl font-bold mb-4\">Sandbox</h1>\n\n  <div class=\"space-y-8\">\n    <section>\n      <app-crypto-price></app-crypto-price>\n    </section>\n\n    <section>\n      <app-metal-price></app-metal-price>\n    </section>\n  </div>\n</div>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-9b6df03fde82ba739a0246cba4d8c9c7b65415bd3ab4eca65290e9515201f34a383a212cba68a9e9a0d5bf18df1dbafb42c1b1ef477fa16b78fb70961463e090",
            "file": "src/app/core/layout/sidebar/sidebar.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "menuItems$",
                    "defaultValue": "this.authService.currentUser$.pipe(map(() => this.buildMenuItems()))",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "buildMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "MenuItem[]",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PanelMenuModule",
                    "type": "module"
                },
                {
                    "name": "RouterLink"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { PanelMenuModule } from 'primeng/panelmenu';\nimport { MenuItem } from 'primeng/api';\nimport { RouterLink } from '@angular/router';\nimport { ButtonModule } from 'primeng/button';\nimport { AuthService } from '@/features/auth/services/auth.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-sidebar',\n  imports: [CommonModule, PanelMenuModule, RouterLink, ButtonModule],\n  templateUrl: './sidebar.component.html',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class SidebarComponent {\n  private authService = inject(AuthService);\n  menuItems$ = this.authService.currentUser$.pipe(map(() => this.buildMenuItems()));\n\n  private buildMenuItems(): MenuItem[] {\n    const menuItems: MenuItem[] = [\n      {\n        label: 'Dashboard',\n        icon: 'pi pi-th-large',\n        expanded: true,\n        items: [\n          {\n            label: 'Overview',\n            icon: 'pi pi-home',\n            routerLink: '/',\n          },\n        ],\n      },\n    ];\n\n    if (this.authService.isAuthenticatedUser()) {\n      menuItems.push({\n        label: 'Settings',\n        icon: 'pi pi-cog',\n        items: [\n          {\n            label: 'Account',\n            icon: 'pi pi-user',\n            routerLink: '/account',\n          },\n          {\n            label: 'Preferences',\n            icon: 'pi pi-sliders-h',\n            routerLink: '/preferences',\n          },\n        ],\n      });\n\n      if (this.authService.isSuperUser()) {\n        const dashboardMenu = menuItems.find((item) => item.label === 'Dashboard');\n        if (dashboardMenu?.items) {\n          dashboardMenu.items.push({\n            label: 'Sandbox',\n            icon: 'pi pi-code',\n            routerLink: '/sandbox',\n          });\n        }\n      }\n    }\n\n    return menuItems;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"h-full w-64\">\n  <div class=\"p-4\">\n    <div class=\"pb-6\">\n      <p-button styleClass=\"flex items-center p-0\" [text]=\"true\" routerLink=\"/\">\n        <ng-template pTemplate=\"content\">\n          <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 1024 1024\" width=\"40\" height=\"40\" class=\"inline-block\">\n            <circle cx=\"512\" cy=\"512\" r=\"500\" fill=\"green\" />\n            <g fill=\"white\">\n              <circle cx=\"350\" cy=\"400\" r=\"100\" />\n              <circle cx=\"674\" cy=\"400\" r=\"100\" />\n            </g>\n            <g fill=\"black\">\n              <circle cx=\"350\" cy=\"400\" r=\"50\" />\n              <circle cx=\"674\" cy=\"400\" r=\"50\" />\n            </g>\n            <path d=\"M512 500 Q450 650 512 800 Q574 650 512 500\" fill=\"#4d4d4d\" />\n            <path d=\"M200 300 Q512 100 824 300\" fill=\"none\" stroke=\"white\" stroke-width=\"50\" />\n            <path d=\"M300 700 Q512 900 724 700\" fill=\"none\" stroke=\"white\" stroke-width=\"50\" />\n          </svg>\n          <span class=\"pl-4 text-xl font-bold text-emerald-500\">Price Alert</span>\n        </ng-template>\n      </p-button>\n    </div>\n    <p-panelMenu [model]=\"(menuItems$ | async) || []\" [multiple]=\"false\" styleClass=\"[&_.p-menuitem-icon]:mr-2\">\n      <ng-template #item let-item>\n        <a [routerLink]=\"item.routerLink\" class=\"flex items-center px-4 py-2 cursor-pointer group\">\n          <i [class]=\"item.icon + ' text-slate-300 group-hover:text-inherit mr-2'\"></i>\n          <span class=\"ml-2\">{{ item.label }}</span>\n          <i *ngIf=\"item.items\" class=\"pi pi-angle-down ml-auto text-slate-300\"></i>\n        </a>\n      </ng-template>\n    </p-panelMenu>\n  </div>\n</div>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "angularApp",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new AngularNodeAppEngine()"
            },
            {
                "name": "app",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "express()"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideAnimationsAsync(),\n    provideRouter(routes),\n    provideHttpClient(withFetch(), withInterceptors([authInterceptor])),\n    provideClientHydration(),\n    providePrimeNG({\n      theme: {\n        preset: MyPreset,\n        options: {\n          mode: 'dark',\n          cssLayer: {\n            name: 'primeng',\n            order: 'tailwind-base, primeng, tailwind-utilities',\n          },\n        },\n      },\n    }),\n    provideServiceWorker('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      registrationStrategy: 'registerWhenStable:30000',\n    }),\n  ],\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n\n  if (authService.isAuthenticatedUser()) {\n    return true;\n  }\n\n  // Store the attempted URL for redirecting\n  router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n  return false;\n}"
            },
            {
                "name": "bootstrap",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/main.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "() => bootstrapApplication(AppComponent, config)"
            },
            {
                "name": "browserDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "resolve(serverDistFolder, '../browser')"
            },
            {
                "name": "config",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.prod.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: true,\n  API_BASE_URL: '',\n  METAL_PRICE_API_KEY: '',\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\n  production: false,\n  API_BASE_URL: 'http://localhost:3000',\n  METAL_PRICE_API_KEY: '',\n}"
            },
            {
                "name": "isRefreshing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "MAX_REFRESH_ATTEMPTS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "3"
            },
            {
                "name": "MyPreset",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/prime-theme.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "definePreset(Aura, {\n  primitive: {\n    borderRadius: {\n      none: '0',\n      xs: '2px',\n      sm: '4px',\n      md: '6px',\n      lg: '8px',\n      xl: '12px',\n    },\n    emerald: {\n      50: '#ecfdf5',\n      100: '#d1fae5',\n      200: '#a7f3d0',\n      300: '#6ee7b7',\n      400: '#34d399',\n      500: '#10b981',\n      600: '#059669',\n      700: '#047857',\n      800: '#065f46',\n      900: '#064e3b',\n      950: '#022c22',\n    },\n    green: {\n      50: '#f0fdf4',\n      100: '#dcfce7',\n      200: '#bbf7d0',\n      300: '#86efac',\n      400: '#4ade80',\n      500: '#22c55e',\n      600: '#16a34a',\n      700: '#15803d',\n      800: '#166534',\n      900: '#14532d',\n      950: '#052e16',\n    },\n    lime: {\n      50: '#f7fee7',\n      100: '#ecfccb',\n      200: '#d9f99d',\n      300: '#bef264',\n      400: '#a3e635',\n      500: '#84cc16',\n      600: '#65a30d',\n      700: '#4d7c0f',\n      800: '#3f6212',\n      900: '#365314',\n      950: '#1a2e05',\n    },\n    red: {\n      50: '#fef2f2',\n      100: '#fee2e2',\n      200: '#fecaca',\n      300: '#fca5a5',\n      400: '#f87171',\n      500: '#ef4444',\n      600: '#dc2626',\n      700: '#b91c1c',\n      800: '#991b1b',\n      900: '#7f1d1d',\n      950: '#450a0a',\n    },\n    orange: {\n      50: '#fff7ed',\n      100: '#ffedd5',\n      200: '#fed7aa',\n      300: '#fdba74',\n      400: '#fb923c',\n      500: '#f97316',\n      600: '#ea580c',\n      700: '#c2410c',\n      800: '#9a3412',\n      900: '#7c2d12',\n      950: '#431407',\n    },\n    amber: {\n      50: '#fffbeb',\n      100: '#fef3c7',\n      200: '#fde68a',\n      300: '#fcd34d',\n      400: '#fbbf24',\n      500: '#f59e0b',\n      600: '#d97706',\n      700: '#b45309',\n      800: '#92400e',\n      900: '#78350f',\n      950: '#451a03',\n    },\n    yellow: {\n      50: '#fefce8',\n      100: '#fef9c3',\n      200: '#fef08a',\n      300: '#fde047',\n      400: '#facc15',\n      500: '#eab308',\n      600: '#ca8a04',\n      700: '#a16207',\n      800: '#854d0e',\n      900: '#713f12',\n      950: '#422006',\n    },\n    teal: {\n      50: '#f0fdfa',\n      100: '#ccfbf1',\n      200: '#99f6e4',\n      300: '#5eead4',\n      400: '#2dd4bf',\n      500: '#14b8a6',\n      600: '#0d9488',\n      700: '#0f766e',\n      800: '#115e59',\n      900: '#134e4a',\n      950: '#042f2e',\n    },\n    cyan: {\n      50: '#ecfeff',\n      100: '#cffafe',\n      200: '#a5f3fc',\n      300: '#67e8f9',\n      400: '#22d3ee',\n      500: '#06b6d4',\n      600: '#0891b2',\n      700: '#0e7490',\n      800: '#155e75',\n      900: '#164e63',\n      950: '#083344',\n    },\n    sky: {\n      50: '#f0f9ff',\n      100: '#e0f2fe',\n      200: '#bae6fd',\n      300: '#7dd3fc',\n      400: '#38bdf8',\n      500: '#0ea5e9',\n      600: '#0284c7',\n      700: '#0369a1',\n      800: '#075985',\n      900: '#0c4a6e',\n      950: '#082f49',\n    },\n    blue: {\n      50: '#eff6ff',\n      100: '#dbeafe',\n      200: '#bfdbfe',\n      300: '#93c5fd',\n      400: '#60a5fa',\n      500: '#3b82f6',\n      600: '#2563eb',\n      700: '#1d4ed8',\n      800: '#1e40af',\n      900: '#1e3a8a',\n      950: '#172554',\n    },\n    indigo: {\n      50: '#eef2ff',\n      100: '#e0e7ff',\n      200: '#c7d2fe',\n      300: '#a5b4fc',\n      400: '#818cf8',\n      500: '#6366f1',\n      600: '#4f46e5',\n      700: '#4338ca',\n      800: '#3730a3',\n      900: '#312e81',\n      950: '#1e1b4b',\n    },\n    violet: {\n      50: '#f5f3ff',\n      100: '#ede9fe',\n      200: '#ddd6fe',\n      300: '#c4b5fd',\n      400: '#a78bfa',\n      500: '#8b5cf6',\n      600: '#7c3aed',\n      700: '#6d28d9',\n      800: '#5b21b6',\n      900: '#4c1d95',\n      950: '#2e1065',\n    },\n    purple: {\n      50: '#faf5ff',\n      100: '#f3e8ff',\n      200: '#e9d5ff',\n      300: '#d8b4fe',\n      400: '#c084fc',\n      500: '#a855f7',\n      600: '#9333ea',\n      700: '#7e22ce',\n      800: '#6b21a8',\n      900: '#581c87',\n      950: '#3b0764',\n    },\n    fuchsia: {\n      50: '#fdf4ff',\n      100: '#fae8ff',\n      200: '#f5d0fe',\n      300: '#f0abfc',\n      400: '#e879f9',\n      500: '#d946ef',\n      600: '#c026d3',\n      700: '#a21caf',\n      800: '#86198f',\n      900: '#701a75',\n      950: '#4a044e',\n    },\n    pink: {\n      50: '#fdf2f8',\n      100: '#fce7f3',\n      200: '#fbcfe8',\n      300: '#f9a8d4',\n      400: '#f472b6',\n      500: '#ec4899',\n      600: '#db2777',\n      700: '#be185d',\n      800: '#9d174d',\n      900: '#831843',\n      950: '#500724',\n    },\n    rose: {\n      50: '#fff1f2',\n      100: '#ffe4e6',\n      200: '#fecdd3',\n      300: '#fda4af',\n      400: '#fb7185',\n      500: '#f43f5e',\n      600: '#e11d48',\n      700: '#be123c',\n      800: '#9f1239',\n      900: '#881337',\n      950: '#4c0519',\n    },\n    slate: {\n      50: '#f8fafc',\n      100: '#f1f5f9',\n      200: '#e2e8f0',\n      300: '#cbd5e1',\n      400: '#94a3b8',\n      500: '#64748b',\n      600: '#475569',\n      700: '#334155',\n      800: '#1e293b',\n      900: '#0f172a',\n      950: '#020617',\n    },\n    gray: {\n      50: '#f9fafb',\n      100: '#f3f4f6',\n      200: '#e5e7eb',\n      300: '#d1d5db',\n      400: '#9ca3af',\n      500: '#6b7280',\n      600: '#4b5563',\n      700: '#374151',\n      800: '#1f2937',\n      900: '#111827',\n      950: '#030712',\n    },\n    zinc: {\n      50: '#fafafa',\n      100: '#f4f4f5',\n      200: '#e4e4e7',\n      300: '#d4d4d8',\n      400: '#a1a1aa',\n      500: '#71717a',\n      600: '#52525b',\n      700: '#3f3f46',\n      800: '#27272a',\n      900: '#18181b',\n      950: '#09090b',\n    },\n    neutral: {\n      50: '#fafafa',\n      100: '#f5f5f5',\n      200: '#e5e5e5',\n      300: '#d4d4d4',\n      400: '#a3a3a3',\n      500: '#737373',\n      600: '#525252',\n      700: '#404040',\n      800: '#262626',\n      900: '#171717',\n      950: '#0a0a0a',\n    },\n    stone: {\n      50: '#fafaf9',\n      100: '#f5f5f4',\n      200: '#e7e5e4',\n      300: '#d6d3d1',\n      400: '#a8a29e',\n      500: '#78716c',\n      600: '#57534e',\n      700: '#44403c',\n      800: '#292524',\n      900: '#1c1917',\n      950: '#0c0a09',\n    },\n  },\n  semantic: {\n    transitionDuration: '0.2s',\n    focusRing: {\n      width: '1px',\n      style: 'solid',\n      color: '{primary.color}',\n      offset: '2px',\n      shadow: 'none',\n    },\n    disabledOpacity: '0.6',\n    iconSize: '1rem',\n    anchorGutter: '2px',\n    primary: {\n      50: '#ecfdf5',\n      100: '#d1fae5',\n      200: '#a7f3d0',\n      300: '#6ee7b7',\n      400: '#34d399',\n      500: '#10b981',\n      600: '#059669',\n      700: '#047857',\n      800: '#065f46',\n      900: '#064e3b',\n      950: '#022c22',\n    },\n    formField: {\n      paddingX: '0.75rem',\n      paddingY: '0.5rem',\n      sm: {\n        fontSize: '0.875rem',\n        paddingX: '0.625rem',\n        paddingY: '0.375rem',\n      },\n      lg: {\n        fontSize: '1.125rem',\n        paddingX: '0.875rem',\n        paddingY: '0.625rem',\n      },\n      borderRadius: '{border.radius.md}',\n      focusRing: {\n        width: '0',\n        style: 'none',\n        color: 'transparent',\n        offset: '0',\n        shadow: 'none',\n      },\n      transitionDuration: '{transition.duration}',\n    },\n    list: {\n      padding: '0.25rem 0.25rem',\n      gap: '2px',\n      header: {\n        padding: '0.5rem 1rem 0.25rem 1rem',\n      },\n      option: {\n        padding: '0.5rem 0.75rem',\n        borderRadius: '{border.radius.sm}',\n      },\n      optionGroup: {\n        padding: '0.5rem 0.75rem',\n        fontWeight: '600',\n      },\n    },\n    content: {\n      borderRadius: '{border.radius.md}',\n    },\n    mask: {\n      transitionDuration: '0.15s',\n    },\n    navigation: {\n      list: {\n        padding: '0.25rem 0.25rem',\n        gap: '2px',\n      },\n      item: {\n        padding: '0.5rem 0.75rem',\n        borderRadius: '{border.radius.sm}',\n        gap: '0.5rem',\n      },\n      submenuLabel: {\n        padding: '0.5rem 0.75rem',\n        fontWeight: '600',\n      },\n      submenuIcon: {\n        size: '0.875rem',\n      },\n    },\n    overlay: {\n      select: {\n        borderRadius: '{border.radius.md}',\n        shadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',\n      },\n      popover: {\n        borderRadius: '{border.radius.md}',\n        padding: '0.75rem',\n        shadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',\n      },\n      modal: {\n        borderRadius: '{border.radius.xl}',\n        padding: '1.25rem',\n        shadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)',\n      },\n      navigation: {\n        shadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',\n      },\n    },\n    colorScheme: {\n      light: {\n        surface: {\n          0: '#ffffff',\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          200: '#e2e8f0',\n          300: '#cbd5e1',\n          400: '#94a3b8',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a',\n          950: '#020617',\n        },\n        primary: {\n          color: '{primary.500}',\n          contrastColor: '#ffffff',\n          hoverColor: '{primary.600}',\n          activeColor: '{primary.700}',\n        },\n        highlight: {\n          background: '{primary.50}',\n          focusBackground: '{primary.100}',\n          color: '{primary.700}',\n          focusColor: '{primary.800}',\n        },\n        mask: {\n          background: 'rgba(0,0,0,0.4)',\n          color: '{surface.200}',\n        },\n        formField: {\n          background: '{surface.0}',\n          disabledBackground: '{surface.200}',\n          filledBackground: '{surface.50}',\n          filledHoverBackground: '{surface.50}',\n          filledFocusBackground: '{surface.50}',\n          borderColor: '{surface.300}',\n          hoverBorderColor: '{surface.400}',\n          focusBorderColor: '{primary.color}',\n          invalidBorderColor: '{red.400}',\n          color: '{surface.700}',\n          disabledColor: '{surface.500}',\n          placeholderColor: '{surface.500}',\n          invalidPlaceholderColor: '{red.600}',\n          floatLabelColor: '{surface.500}',\n          floatLabelFocusColor: '{primary.600}',\n          floatLabelActiveColor: '{surface.500}',\n          floatLabelInvalidColor: '{form.field.invalid.placeholder.color}',\n          iconColor: '{surface.400}',\n          shadow: '0 0 #0000, 0 0 #0000, 0 1px 2px 0 rgba(18, 18, 23, 0.05)',\n        },\n        text: {\n          color: '{surface.700}',\n          hoverColor: '{surface.800}',\n          mutedColor: '{surface.500}',\n          hoverMutedColor: '{surface.600}',\n        },\n        content: {\n          background: '{surface.0}',\n          hoverBackground: '{surface.100}',\n          borderColor: '{surface.200}',\n          color: '{text.color}',\n          hoverColor: '{text.hover.color}',\n        },\n        overlay: {\n          select: {\n            background: '{surface.0}',\n            borderColor: '{surface.200}',\n            color: '{text.color}',\n          },\n          popover: {\n            background: '{surface.0}',\n            borderColor: '{surface.200}',\n            color: '{text.color}',\n          },\n          modal: {\n            background: '{surface.0}',\n            borderColor: '{surface.200}',\n            color: '{text.color}',\n          },\n        },\n        list: {\n          option: {\n            focusBackground: '{surface.100}',\n            selectedBackground: '{highlight.background}',\n            selectedFocusBackground: '{highlight.focus.background}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            selectedColor: '{highlight.color}',\n            selectedFocusColor: '{highlight.focus.color}',\n            icon: {\n              color: '{surface.400}',\n              focusColor: '{surface.500}',\n            },\n          },\n          optionGroup: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n        },\n        navigation: {\n          item: {\n            focusBackground: '{surface.100}',\n            activeBackground: '{surface.100}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            activeColor: '{text.hover.color}',\n            icon: {\n              color: '{surface.400}',\n              focusColor: '{surface.500}',\n              activeColor: '{surface.500}',\n            },\n          },\n          submenuLabel: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n          submenuIcon: {\n            color: '{surface.400}',\n            focusColor: '{surface.500}',\n            activeColor: '{surface.500}',\n          },\n        },\n      },\n      dark: {\n        surface: {\n          0: '#ffffff',\n          50: '#fafafa',\n          100: '#f4f4f5',\n          200: '#e4e4e7',\n          300: '#d4d4d8',\n          400: '#a1a1aa',\n          500: '#71717a',\n          600: '#52525b',\n          700: '#3f3f46',\n          800: '#27272a',\n          900: '#18181b',\n          950: '#09090b',\n        },\n        primary: {\n          color: '{primary.400}',\n          contrastColor: '{surface.900}',\n          hoverColor: '{primary.300}',\n          activeColor: '{primary.200}',\n        },\n        highlight: {\n          background: 'color-mix(in srgb, {primary.400}, transparent 84%)',\n          focusBackground: 'color-mix(in srgb, {primary.400}, transparent 76%)',\n          color: 'rgba(255,255,255,.87)',\n          focusColor: 'rgba(255,255,255,.87)',\n        },\n        mask: {\n          background: 'rgba(0,0,0,0.6)',\n          color: '{surface.200}',\n        },\n        formField: {\n          background: '{surface.950}',\n          disabledBackground: '{surface.700}',\n          filledBackground: '{surface.800}',\n          filledHoverBackground: '{surface.800}',\n          filledFocusBackground: '{surface.800}',\n          borderColor: '{surface.600}',\n          hoverBorderColor: '{surface.500}',\n          focusBorderColor: '{primary.color}',\n          invalidBorderColor: '{red.300}',\n          color: '{surface.0}',\n          disabledColor: '{surface.400}',\n          placeholderColor: '{surface.400}',\n          invalidPlaceholderColor: '{red.400}',\n          floatLabelColor: '{surface.400}',\n          floatLabelFocusColor: '{primary.color}',\n          floatLabelActiveColor: '{surface.400}',\n          floatLabelInvalidColor: '{form.field.invalid.placeholder.color}',\n          iconColor: '{surface.400}',\n          shadow: '0 0 #0000, 0 0 #0000, 0 1px 2px 0 rgba(18, 18, 23, 0.05)',\n        },\n        text: {\n          color: '{surface.0}',\n          hoverColor: '{surface.0}',\n          mutedColor: '{surface.400}',\n          hoverMutedColor: '{surface.300}',\n        },\n        content: {\n          background: '{surface.900}',\n          hoverBackground: '{surface.800}',\n          borderColor: '{surface.700}',\n          color: '{text.color}',\n          hoverColor: '{text.hover.color}',\n        },\n        overlay: {\n          select: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n            color: '{text.color}',\n          },\n          popover: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n            color: '{text.color}',\n          },\n          modal: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n            color: '{text.color}',\n          },\n        },\n        list: {\n          option: {\n            focusBackground: '{surface.800}',\n            selectedBackground: '{highlight.background}',\n            selectedFocusBackground: '{highlight.focus.background}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            selectedColor: '{highlight.color}',\n            selectedFocusColor: '{highlight.focus.color}',\n            icon: {\n              color: '{surface.500}',\n              focusColor: '{surface.400}',\n            },\n          },\n          optionGroup: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n        },\n        navigation: {\n          item: {\n            focusBackground: '{surface.800}',\n            activeBackground: '{surface.800}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            activeColor: '{text.hover.color}',\n            icon: {\n              color: '{surface.500}',\n              focusColor: '{surface.400}',\n              activeColor: '{surface.400}',\n            },\n          },\n          submenuLabel: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n          submenuIcon: {\n            color: '{surface.500}',\n            focusColor: '{surface.400}',\n            activeColor: '{surface.400}',\n          },\n        },\n      },\n    },\n  },\n  components: {\n    accordion: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      panel: {\n        borderWidth: '0 0 1px 0',\n        borderColor: '{content.border.color}',\n      },\n      header: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{text.color}',\n        padding: '1.125rem',\n        fontWeight: '600',\n        borderRadius: '0',\n        borderWidth: '0',\n        borderColor: '{content.border.color}',\n        background: '{content.background}',\n        hoverBackground: '{content.background}',\n        activeBackground: '{content.background}',\n        activeHoverBackground: '{content.background}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n        toggleIcon: {\n          color: '{text.muted.color}',\n          hoverColor: '{text.color}',\n          activeColor: '{text.color}',\n          activeHoverColor: '{text.color}',\n        },\n        first: {\n          topBorderRadius: '{content.border.radius}',\n          borderWidth: '0',\n        },\n        last: {\n          bottomBorderRadius: '{content.border.radius}',\n          activeBottomBorderRadius: '0',\n        },\n      },\n      content: {\n        borderWidth: '0',\n        borderColor: '{content.border.color}',\n        background: '{content.background}',\n        color: '{text.color}',\n        padding: '0 1.125rem 1.125rem 1.125rem',\n      },\n    },\n    autocomplete: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      dropdown: {\n        width: '2.5rem',\n        sm: {\n          width: '2rem',\n        },\n        lg: {\n          width: '3rem',\n        },\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.border.color}',\n        activeBorderColor: '{form.field.border.color}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n      colorScheme: {\n        light: {\n          chip: {\n            focusBackground: '{surface.200}',\n            focusColor: '{surface.800}',\n          },\n          dropdown: {\n            background: '{surface.100}',\n            hoverBackground: '{surface.200}',\n            activeBackground: '{surface.300}',\n            color: '{surface.600}',\n            hoverColor: '{surface.700}',\n            activeColor: '{surface.800}',\n          },\n        },\n        dark: {\n          chip: {\n            focusBackground: '{surface.700}',\n            focusColor: '{surface.0}',\n          },\n          dropdown: {\n            background: '{surface.800}',\n            hoverBackground: '{surface.700}',\n            activeBackground: '{surface.600}',\n            color: '{surface.300}',\n            hoverColor: '{surface.200}',\n            activeColor: '{surface.100}',\n          },\n        },\n      },\n    },\n    avatar: {\n      root: {\n        width: '2rem',\n        height: '2rem',\n        fontSize: '1rem',\n        background: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n      },\n      icon: {\n        size: '1rem',\n      },\n      group: {\n        borderColor: '{content.background}',\n        offset: '-0.75rem',\n      },\n      lg: {\n        width: '3rem',\n        height: '3rem',\n        fontSize: '1.5rem',\n        icon: {\n          size: '1.5rem',\n        },\n        group: {\n          offset: '-1rem',\n        },\n      },\n      xl: {\n        width: '4rem',\n        height: '4rem',\n        fontSize: '2rem',\n        icon: {\n          size: '2rem',\n        },\n        group: {\n          offset: '-1.5rem',\n        },\n      },\n    },\n    badge: {\n      root: {\n        borderRadius: '{border.radius.md}',\n        padding: '0 0.5rem',\n        fontSize: '0.75rem',\n        fontWeight: '700',\n        minWidth: '1.5rem',\n        height: '1.5rem',\n      },\n      dot: {\n        size: '0.5rem',\n      },\n      sm: {\n        fontSize: '0.625rem',\n        minWidth: '1.25rem',\n        height: '1.25rem',\n      },\n      lg: {\n        fontSize: '0.875rem',\n        minWidth: '1.75rem',\n        height: '1.75rem',\n      },\n      xl: {\n        fontSize: '1rem',\n        minWidth: '2rem',\n        height: '2rem',\n      },\n      colorScheme: {\n        light: {\n          primary: {\n            background: '{primary.color}',\n            color: '{primary.contrast.color}',\n          },\n          secondary: {\n            background: '{surface.100}',\n            color: '{surface.600}',\n          },\n          success: {\n            background: '{green.500}',\n            color: '{surface.0}',\n          },\n          info: {\n            background: '{sky.500}',\n            color: '{surface.0}',\n          },\n          warn: {\n            background: '{orange.500}',\n            color: '{surface.0}',\n          },\n          danger: {\n            background: '{red.500}',\n            color: '{surface.0}',\n          },\n          contrast: {\n            background: '{surface.950}',\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          primary: {\n            background: '{primary.color}',\n            color: '{primary.contrast.color}',\n          },\n          secondary: {\n            background: '{surface.800}',\n            color: '{surface.300}',\n          },\n          success: {\n            background: '{green.400}',\n            color: '{green.950}',\n          },\n          info: {\n            background: '{sky.400}',\n            color: '{sky.950}',\n          },\n          warn: {\n            background: '{orange.400}',\n            color: '{orange.950}',\n          },\n          danger: {\n            background: '{red.400}',\n            color: '{red.950}',\n          },\n          contrast: {\n            background: '{surface.0}',\n            color: '{surface.950}',\n          },\n        },\n      },\n    },\n    blockui: {\n      root: {\n        borderRadius: '{content.border.radius}',\n      },\n    },\n    breadcrumb: {\n      root: {\n        padding: '1rem',\n        background: '{content.background}',\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n      item: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        borderRadius: '{content.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          hoverColor: '{navigation.item.icon.focus.color}',\n        },\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      separator: {\n        color: '{navigation.item.icon.color}',\n      },\n    },\n    button: {\n      root: {\n        borderRadius: '{form.field.border.radius}',\n        roundedBorderRadius: '2rem',\n        gap: '0.5rem',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        iconOnlyWidth: '2.5rem',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n        label: {\n          fontWeight: '500',\n        },\n        raisedShadow:\n          '0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          offset: '{focus.ring.offset}',\n        },\n        badgeSize: '1rem',\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            primary: {\n              background: '{primary.color}',\n              hoverBackground: '{primary.hover.color}',\n              activeBackground: '{primary.active.color}',\n              borderColor: '{primary.color}',\n              hoverBorderColor: '{primary.hover.color}',\n              activeBorderColor: '{primary.active.color}',\n              color: '{primary.contrast.color}',\n              hoverColor: '{primary.contrast.color}',\n              activeColor: '{primary.contrast.color}',\n              focusRing: {\n                color: '{primary.color}',\n                shadow: 'none',\n              },\n            },\n            secondary: {\n              background: '{surface.100}',\n              hoverBackground: '{surface.200}',\n              activeBackground: '{surface.300}',\n              borderColor: '{surface.100}',\n              hoverBorderColor: '{surface.200}',\n              activeBorderColor: '{surface.300}',\n              color: '{surface.600}',\n              hoverColor: '{surface.700}',\n              activeColor: '{surface.800}',\n              focusRing: {\n                color: '{surface.600}',\n                shadow: 'none',\n              },\n            },\n            info: {\n              background: '{sky.500}',\n              hoverBackground: '{sky.600}',\n              activeBackground: '{sky.700}',\n              borderColor: '{sky.500}',\n              hoverBorderColor: '{sky.600}',\n              activeBorderColor: '{sky.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{sky.500}',\n                shadow: 'none',\n              },\n            },\n            success: {\n              background: '{green.500}',\n              hoverBackground: '{green.600}',\n              activeBackground: '{green.700}',\n              borderColor: '{green.500}',\n              hoverBorderColor: '{green.600}',\n              activeBorderColor: '{green.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{green.500}',\n                shadow: 'none',\n              },\n            },\n            warn: {\n              background: '{orange.500}',\n              hoverBackground: '{orange.600}',\n              activeBackground: '{orange.700}',\n              borderColor: '{orange.500}',\n              hoverBorderColor: '{orange.600}',\n              activeBorderColor: '{orange.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{orange.500}',\n                shadow: 'none',\n              },\n            },\n            help: {\n              background: '{purple.500}',\n              hoverBackground: '{purple.600}',\n              activeBackground: '{purple.700}',\n              borderColor: '{purple.500}',\n              hoverBorderColor: '{purple.600}',\n              activeBorderColor: '{purple.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{purple.500}',\n                shadow: 'none',\n              },\n            },\n            danger: {\n              background: '{red.500}',\n              hoverBackground: '{red.600}',\n              activeBackground: '{red.700}',\n              borderColor: '{red.500}',\n              hoverBorderColor: '{red.600}',\n              activeBorderColor: '{red.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{red.500}',\n                shadow: 'none',\n              },\n            },\n            contrast: {\n              background: '{surface.950}',\n              hoverBackground: '{surface.900}',\n              activeBackground: '{surface.800}',\n              borderColor: '{surface.950}',\n              hoverBorderColor: '{surface.900}',\n              activeBorderColor: '{surface.800}',\n              color: '{surface.0}',\n              hoverColor: '{surface.0}',\n              activeColor: '{surface.0}',\n              focusRing: {\n                color: '{surface.950}',\n                shadow: 'none',\n              },\n            },\n          },\n          outlined: {\n            primary: {\n              hoverBackground: '{primary.50}',\n              activeBackground: '{primary.100}',\n              borderColor: '{primary.200}',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              borderColor: '{surface.200}',\n              color: '{surface.500}',\n            },\n            success: {\n              hoverBackground: '{green.50}',\n              activeBackground: '{green.100}',\n              borderColor: '{green.200}',\n              color: '{green.500}',\n            },\n            info: {\n              hoverBackground: '{sky.50}',\n              activeBackground: '{sky.100}',\n              borderColor: '{sky.200}',\n              color: '{sky.500}',\n            },\n            warn: {\n              hoverBackground: '{orange.50}',\n              activeBackground: '{orange.100}',\n              borderColor: '{orange.200}',\n              color: '{orange.500}',\n            },\n            help: {\n              hoverBackground: '{purple.50}',\n              activeBackground: '{purple.100}',\n              borderColor: '{purple.200}',\n              color: '{purple.500}',\n            },\n            danger: {\n              hoverBackground: '{red.50}',\n              activeBackground: '{red.100}',\n              borderColor: '{red.200}',\n              color: '{red.500}',\n            },\n            contrast: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              borderColor: '{surface.700}',\n              color: '{surface.950}',\n            },\n            plain: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              borderColor: '{surface.200}',\n              color: '{surface.700}',\n            },\n          },\n          text: {\n            primary: {\n              hoverBackground: '{primary.50}',\n              activeBackground: '{primary.100}',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              color: '{surface.500}',\n            },\n            success: {\n              hoverBackground: '{green.50}',\n              activeBackground: '{green.100}',\n              color: '{green.500}',\n            },\n            info: {\n              hoverBackground: '{sky.50}',\n              activeBackground: '{sky.100}',\n              color: '{sky.500}',\n            },\n            warn: {\n              hoverBackground: '{orange.50}',\n              activeBackground: '{orange.100}',\n              color: '{orange.500}',\n            },\n            help: {\n              hoverBackground: '{purple.50}',\n              activeBackground: '{purple.100}',\n              color: '{purple.500}',\n            },\n            danger: {\n              hoverBackground: '{red.50}',\n              activeBackground: '{red.100}',\n              color: '{red.500}',\n            },\n            contrast: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              color: '{surface.950}',\n            },\n            plain: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              color: '{surface.700}',\n            },\n          },\n          link: {\n            color: '{primary.color}',\n            hoverColor: '{primary.color}',\n            activeColor: '{primary.color}',\n          },\n        },\n        dark: {\n          root: {\n            primary: {\n              background: '{primary.color}',\n              hoverBackground: '{primary.hover.color}',\n              activeBackground: '{primary.active.color}',\n              borderColor: '{primary.color}',\n              hoverBorderColor: '{primary.hover.color}',\n              activeBorderColor: '{primary.active.color}',\n              color: '{primary.contrast.color}',\n              hoverColor: '{primary.contrast.color}',\n              activeColor: '{primary.contrast.color}',\n              focusRing: {\n                color: '{primary.color}',\n                shadow: 'none',\n              },\n            },\n            secondary: {\n              background: '{surface.800}',\n              hoverBackground: '{surface.700}',\n              activeBackground: '{surface.600}',\n              borderColor: '{surface.800}',\n              hoverBorderColor: '{surface.700}',\n              activeBorderColor: '{surface.600}',\n              color: '{surface.300}',\n              hoverColor: '{surface.200}',\n              activeColor: '{surface.100}',\n              focusRing: {\n                color: '{surface.300}',\n                shadow: 'none',\n              },\n            },\n            info: {\n              background: '{sky.400}',\n              hoverBackground: '{sky.300}',\n              activeBackground: '{sky.200}',\n              borderColor: '{sky.400}',\n              hoverBorderColor: '{sky.300}',\n              activeBorderColor: '{sky.200}',\n              color: '{sky.950}',\n              hoverColor: '{sky.950}',\n              activeColor: '{sky.950}',\n              focusRing: {\n                color: '{sky.400}',\n                shadow: 'none',\n              },\n            },\n            success: {\n              background: '{green.400}',\n              hoverBackground: '{green.300}',\n              activeBackground: '{green.200}',\n              borderColor: '{green.400}',\n              hoverBorderColor: '{green.300}',\n              activeBorderColor: '{green.200}',\n              color: '{green.950}',\n              hoverColor: '{green.950}',\n              activeColor: '{green.950}',\n              focusRing: {\n                color: '{green.400}',\n                shadow: 'none',\n              },\n            },\n            warn: {\n              background: '{orange.400}',\n              hoverBackground: '{orange.300}',\n              activeBackground: '{orange.200}',\n              borderColor: '{orange.400}',\n              hoverBorderColor: '{orange.300}',\n              activeBorderColor: '{orange.200}',\n              color: '{orange.950}',\n              hoverColor: '{orange.950}',\n              activeColor: '{orange.950}',\n              focusRing: {\n                color: '{orange.400}',\n                shadow: 'none',\n              },\n            },\n            help: {\n              background: '{purple.400}',\n              hoverBackground: '{purple.300}',\n              activeBackground: '{purple.200}',\n              borderColor: '{purple.400}',\n              hoverBorderColor: '{purple.300}',\n              activeBorderColor: '{purple.200}',\n              color: '{purple.950}',\n              hoverColor: '{purple.950}',\n              activeColor: '{purple.950}',\n              focusRing: {\n                color: '{purple.400}',\n                shadow: 'none',\n              },\n            },\n            danger: {\n              background: '{red.400}',\n              hoverBackground: '{red.300}',\n              activeBackground: '{red.200}',\n              borderColor: '{red.400}',\n              hoverBorderColor: '{red.300}',\n              activeBorderColor: '{red.200}',\n              color: '{red.950}',\n              hoverColor: '{red.950}',\n              activeColor: '{red.950}',\n              focusRing: {\n                color: '{red.400}',\n                shadow: 'none',\n              },\n            },\n            contrast: {\n              background: '{surface.0}',\n              hoverBackground: '{surface.100}',\n              activeBackground: '{surface.200}',\n              borderColor: '{surface.0}',\n              hoverBorderColor: '{surface.100}',\n              activeBorderColor: '{surface.200}',\n              color: '{surface.950}',\n              hoverColor: '{surface.950}',\n              activeColor: '{surface.950}',\n              focusRing: {\n                color: '{surface.0}',\n                shadow: 'none',\n              },\n            },\n          },\n          outlined: {\n            primary: {\n              hoverBackground: 'color-mix(in srgb, {primary.color}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {primary.color}, transparent 84%)',\n              borderColor: '{primary.700}',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: 'rgba(255,255,255,0.04)',\n              activeBackground: 'rgba(255,255,255,0.16)',\n              borderColor: '{surface.700}',\n              color: '{surface.400}',\n            },\n            success: {\n              hoverBackground: 'color-mix(in srgb, {green.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {green.400}, transparent 84%)',\n              borderColor: '{green.700}',\n              color: '{green.400}',\n            },\n            info: {\n              hoverBackground: 'color-mix(in srgb, {sky.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {sky.400}, transparent 84%)',\n              borderColor: '{sky.700}',\n              color: '{sky.400}',\n            },\n            warn: {\n              hoverBackground: 'color-mix(in srgb, {orange.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {orange.400}, transparent 84%)',\n              borderColor: '{orange.700}',\n              color: '{orange.400}',\n            },\n            help: {\n              hoverBackground: 'color-mix(in srgb, {purple.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {purple.400}, transparent 84%)',\n              borderColor: '{purple.700}',\n              color: '{purple.400}',\n            },\n            danger: {\n              hoverBackground: 'color-mix(in srgb, {red.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {red.400}, transparent 84%)',\n              borderColor: '{red.700}',\n              color: '{red.400}',\n            },\n            contrast: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              borderColor: '{surface.500}',\n              color: '{surface.0}',\n            },\n            plain: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              borderColor: '{surface.600}',\n              color: '{surface.0}',\n            },\n          },\n          text: {\n            primary: {\n              hoverBackground: 'color-mix(in srgb, {primary.color}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {primary.color}, transparent 84%)',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              color: '{surface.400}',\n            },\n            success: {\n              hoverBackground: 'color-mix(in srgb, {green.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {green.400}, transparent 84%)',\n              color: '{green.400}',\n            },\n            info: {\n              hoverBackground: 'color-mix(in srgb, {sky.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {sky.400}, transparent 84%)',\n              color: '{sky.400}',\n            },\n            warn: {\n              hoverBackground: 'color-mix(in srgb, {orange.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {orange.400}, transparent 84%)',\n              color: '{orange.400}',\n            },\n            help: {\n              hoverBackground: 'color-mix(in srgb, {purple.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {purple.400}, transparent 84%)',\n              color: '{purple.400}',\n            },\n            danger: {\n              hoverBackground: 'color-mix(in srgb, {red.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {red.400}, transparent 84%)',\n              color: '{red.400}',\n            },\n            contrast: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              color: '{surface.0}',\n            },\n            plain: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              color: '{surface.0}',\n            },\n          },\n          link: {\n            color: '{primary.color}',\n            hoverColor: '{primary.color}',\n            activeColor: '{primary.color}',\n          },\n        },\n      },\n    },\n    datepicker: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      panel: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.popover.shadow}',\n        padding: '{overlay.popover.padding}',\n      },\n      header: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        padding: '0 0 0.5rem 0',\n      },\n      title: {\n        gap: '0.5rem',\n        fontWeight: '500',\n      },\n      dropdown: {\n        width: '2.5rem',\n        sm: {\n          width: '2rem',\n        },\n        lg: {\n          width: '3rem',\n        },\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.border.color}',\n        activeBorderColor: '{form.field.border.color}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      inputIcon: {\n        color: '{form.field.icon.color}',\n      },\n      selectMonth: {\n        hoverBackground: '{content.hover.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        padding: '0.25rem 0.5rem',\n        borderRadius: '{content.border.radius}',\n      },\n      selectYear: {\n        hoverBackground: '{content.hover.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        padding: '0.25rem 0.5rem',\n        borderRadius: '{content.border.radius}',\n      },\n      group: {\n        borderColor: '{content.border.color}',\n        gap: '{overlay.popover.padding}',\n      },\n      dayView: {\n        margin: '0.5rem 0 0 0',\n      },\n      weekDay: {\n        padding: '0.25rem',\n        fontWeight: '500',\n        color: '{content.color}',\n      },\n      date: {\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{primary.color}',\n        rangeSelectedBackground: '{highlight.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{primary.contrast.color}',\n        rangeSelectedColor: '{highlight.color}',\n        width: '2rem',\n        height: '2rem',\n        borderRadius: '50%',\n        padding: '0.25rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      monthView: {\n        margin: '0.5rem 0 0 0',\n      },\n      month: {\n        padding: '0.375rem',\n        borderRadius: '{content.border.radius}',\n      },\n      yearView: {\n        margin: '0.5rem 0 0 0',\n      },\n      year: {\n        padding: '0.375rem',\n        borderRadius: '{content.border.radius}',\n      },\n      buttonbar: {\n        padding: '0.5rem 0 0 0',\n        borderColor: '{content.border.color}',\n      },\n      timePicker: {\n        padding: '0.5rem 0 0 0',\n        borderColor: '{content.border.color}',\n        gap: '0.5rem',\n        buttonGap: '0.25rem',\n      },\n      colorScheme: {\n        light: {\n          dropdown: {\n            background: '{surface.100}',\n            hoverBackground: '{surface.200}',\n            activeBackground: '{surface.300}',\n            color: '{surface.600}',\n            hoverColor: '{surface.700}',\n            activeColor: '{surface.800}',\n          },\n          today: {\n            background: '{surface.200}',\n            color: '{surface.900}',\n          },\n        },\n        dark: {\n          dropdown: {\n            background: '{surface.800}',\n            hoverBackground: '{surface.700}',\n            activeBackground: '{surface.600}',\n            color: '{surface.300}',\n            hoverColor: '{surface.200}',\n            activeColor: '{surface.100}',\n          },\n          today: {\n            background: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    card: {\n      root: {\n        background: '{content.background}',\n        borderRadius: '{border.radius.xl}',\n        color: '{content.color}',\n        shadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)',\n      },\n      body: {\n        padding: '1.25rem',\n        gap: '0.5rem',\n      },\n      caption: {\n        gap: '0.5rem',\n      },\n      title: {\n        fontSize: '1.25rem',\n        fontWeight: '500',\n      },\n      subtitle: {\n        color: '{text.muted.color}',\n      },\n    },\n    carousel: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      content: {\n        gap: '0.25rem',\n      },\n      indicatorList: {\n        padding: '1rem',\n        gap: '0.5rem',\n      },\n      indicator: {\n        width: '2rem',\n        height: '0.5rem',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          indicator: {\n            background: '{surface.200}',\n            hoverBackground: '{surface.300}',\n            activeBackground: '{primary.color}',\n          },\n        },\n        dark: {\n          indicator: {\n            background: '{surface.700}',\n            hoverBackground: '{surface.600}',\n            activeBackground: '{primary.color}',\n          },\n        },\n      },\n    },\n    cascadeselect: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        mobileIndent: '1rem',\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n        icon: {\n          color: '{list.option.icon.color}',\n          focusColor: '{list.option.icon.focus.color}',\n          size: '0.875rem',\n        },\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n    },\n    checkbox: {\n      root: {\n        borderRadius: '{border.radius.sm}',\n        width: '1.25rem',\n        height: '1.25rem',\n        background: '{form.field.background}',\n        checkedBackground: '{primary.color}',\n        checkedHoverBackground: '{primary.hover.color}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.border.color}',\n        checkedBorderColor: '{primary.color}',\n        checkedHoverBorderColor: '{primary.hover.color}',\n        checkedFocusBorderColor: '{primary.color}',\n        checkedDisabledBorderColor: '{form.field.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        shadow: '{form.field.shadow}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          width: '1rem',\n          height: '1rem',\n        },\n        lg: {\n          width: '1.5rem',\n          height: '1.5rem',\n        },\n      },\n      icon: {\n        size: '0.875rem',\n        color: '{form.field.color}',\n        checkedColor: '{primary.contrast.color}',\n        checkedHoverColor: '{primary.contrast.color}',\n        disabledColor: '{form.field.disabled.color}',\n        sm: {\n          size: '0.75rem',\n        },\n        lg: {\n          size: '1rem',\n        },\n      },\n    },\n    chip: {\n      root: {\n        borderRadius: '16px',\n        paddingX: '0.75rem',\n        paddingY: '0.5rem',\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n      image: {\n        width: '2rem',\n        height: '2rem',\n      },\n      icon: {\n        size: '1rem',\n      },\n      removeIcon: {\n        size: '1rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.100}',\n            color: '{surface.800}',\n          },\n          icon: {\n            color: '{surface.800}',\n          },\n          removeIcon: {\n            color: '{surface.800}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.800}',\n            color: '{surface.0}',\n          },\n          icon: {\n            color: '{surface.0}',\n          },\n          removeIcon: {\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    colorpicker: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      preview: {\n        width: '1.5rem',\n        height: '1.5rem',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      panel: {\n        shadow: '{overlay.popover.shadow}',\n        borderRadius: '{overlay.popover.borderRadius}',\n      },\n      colorScheme: {\n        light: {\n          panel: {\n            background: '{surface.800}',\n            borderColor: '{surface.900}',\n          },\n          handle: {\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          panel: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n          },\n          handle: {\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    confirmdialog: {\n      icon: {\n        size: '2rem',\n        color: '{overlay.modal.color}',\n      },\n      content: {\n        gap: '1rem',\n      },\n    },\n    confirmpopup: {\n      root: {\n        background: '{overlay.popover.background}',\n        borderColor: '{overlay.popover.border.color}',\n        color: '{overlay.popover.color}',\n        borderRadius: '{overlay.popover.border.radius}',\n        shadow: '{overlay.popover.shadow}',\n        gutter: '10px',\n        arrowOffset: '1.25rem',\n      },\n      content: {\n        padding: '{overlay.popover.padding}',\n        gap: '1rem',\n      },\n      icon: {\n        size: '1.5rem',\n        color: '{overlay.popover.color}',\n      },\n      footer: {\n        gap: '0.5rem',\n        padding: '0 {overlay.popover.padding} {overlay.popover.padding} {overlay.popover.padding}',\n      },\n    },\n    contextmenu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        transitionDuration: '{transition.duration}',\n      },\n      list: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      submenu: {\n        mobileIndent: '1rem',\n      },\n      submenuIcon: {\n        size: '{navigation.submenu.icon.size}',\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n        activeColor: '{navigation.submenu.icon.active.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n    },\n    dataview: {\n      root: {\n        borderColor: 'transparent',\n        borderWidth: '0',\n        borderRadius: '0',\n        padding: '0',\n      },\n      header: {\n        background: '{content.background}',\n        color: '{content.color}',\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n        borderRadius: '0',\n      },\n      content: {\n        background: '{content.background}',\n        color: '{content.color}',\n        borderColor: 'transparent',\n        borderWidth: '0',\n        padding: '0',\n        borderRadius: '0',\n      },\n      footer: {\n        background: '{content.background}',\n        color: '{content.color}',\n        borderColor: '{content.border.color}',\n        borderWidth: '1px 0 0 0',\n        padding: '0.75rem 1rem',\n        borderRadius: '0',\n      },\n      paginatorTop: {\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      paginatorBottom: {\n        borderColor: '{content.border.color}',\n        borderWidth: '1px 0 0 0',\n      },\n    },\n    datatable: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      header: {\n        background: '{content.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      headerCell: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        gap: '0.5rem',\n        padding: '0.75rem 1rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      columnTitle: {\n        fontWeight: '600',\n      },\n      row: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      bodyCell: {\n        borderColor: '{datatable.border.color}',\n        padding: '0.75rem 1rem',\n      },\n      footerCell: {\n        background: '{content.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        padding: '0.75rem 1rem',\n      },\n      columnFooter: {\n        fontWeight: '600',\n      },\n      footer: {\n        background: '{content.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      dropPoint: {\n        color: '{primary.color}',\n      },\n      columnResizerWidth: '0.5rem',\n      resizeIndicator: {\n        width: '1px',\n        color: '{primary.color}',\n      },\n      sortIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        size: '0.875rem',\n      },\n      loadingIcon: {\n        size: '2rem',\n      },\n      rowToggleButton: {\n        hoverBackground: '{content.hover.background}',\n        selectedHoverBackground: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        selectedHoverColor: '{primary.color}',\n        size: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      filter: {\n        inlineGap: '0.5rem',\n        overlaySelect: {\n          background: '{overlay.select.background}',\n          borderColor: '{overlay.select.border.color}',\n          borderRadius: '{overlay.select.border.radius}',\n          color: '{overlay.select.color}',\n          shadow: '{overlay.select.shadow}',\n        },\n        overlayPopover: {\n          background: '{overlay.popover.background}',\n          borderColor: '{overlay.popover.border.color}',\n          borderRadius: '{overlay.popover.border.radius}',\n          color: '{overlay.popover.color}',\n          shadow: '{overlay.popover.shadow}',\n          padding: '{overlay.popover.padding}',\n          gap: '0.5rem',\n        },\n        rule: {\n          borderColor: '{content.border.color}',\n        },\n        constraintList: {\n          padding: '{list.padding}',\n          gap: '{list.gap}',\n        },\n        constraint: {\n          focusBackground: '{list.option.focus.background}',\n          selectedBackground: '{list.option.selected.background}',\n          selectedFocusBackground: '{list.option.selected.focus.background}',\n          color: '{list.option.color}',\n          focusColor: '{list.option.focus.color}',\n          selectedColor: '{list.option.selected.color}',\n          selectedFocusColor: '{list.option.selected.focus.color}',\n          separator: {\n            borderColor: '{content.border.color}',\n          },\n          padding: '{list.option.padding}',\n          borderRadius: '{list.option.border.radius}',\n        },\n      },\n      paginatorTop: {\n        borderColor: '{datatable.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      paginatorBottom: {\n        borderColor: '{datatable.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            borderColor: '{content.border.color}',\n          },\n          row: {\n            stripedBackground: '{surface.50}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.100}',\n          },\n        },\n        dark: {\n          root: {\n            borderColor: '{surface.800}',\n          },\n          row: {\n            stripedBackground: '{surface.950}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.900}',\n          },\n        },\n      },\n    },\n    dialog: {\n      root: {\n        background: '{overlay.modal.background}',\n        borderColor: '{overlay.modal.border.color}',\n        color: '{overlay.modal.color}',\n        borderRadius: '{overlay.modal.border.radius}',\n        shadow: '{overlay.modal.shadow}',\n      },\n      header: {\n        padding: '{overlay.modal.padding}',\n        gap: '0.5rem',\n      },\n      title: {\n        fontSize: '1.25rem',\n        fontWeight: '600',\n      },\n      content: {\n        padding: '0 {overlay.modal.padding} {overlay.modal.padding} {overlay.modal.padding}',\n      },\n      footer: {\n        padding: '0 {overlay.modal.padding} {overlay.modal.padding} {overlay.modal.padding}',\n        gap: '0.5rem',\n      },\n    },\n    divider: {\n      root: {\n        borderColor: '{content.border.color}',\n      },\n      content: {\n        background: '{content.background}',\n        color: '{text.color}',\n      },\n      horizontal: {\n        margin: '1rem 0',\n        padding: '0 1rem',\n        content: {\n          padding: '0 0.5rem',\n        },\n      },\n      vertical: {\n        margin: '0 1rem',\n        padding: '0.5rem 0',\n        content: {\n          padding: '0.5rem 0',\n        },\n      },\n    },\n    dock: {\n      root: {\n        background: 'rgba(255, 255, 255, 0.1)',\n        borderColor: 'rgba(255, 255, 255, 0.2)',\n        padding: '0.5rem',\n        borderRadius: '{border.radius.xl}',\n      },\n      item: {\n        borderRadius: '{content.border.radius}',\n        padding: '0.5rem',\n        size: '3rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    drawer: {\n      root: {\n        background: '{overlay.modal.background}',\n        borderColor: '{overlay.modal.border.color}',\n        color: '{overlay.modal.color}',\n        shadow: '{overlay.modal.shadow}',\n      },\n      header: {\n        padding: '{overlay.modal.padding}',\n      },\n      title: {\n        fontSize: '1.5rem',\n        fontWeight: '600',\n      },\n      content: {\n        padding: '0 {overlay.modal.padding} {overlay.modal.padding} {overlay.modal.padding}',\n      },\n      footer: {\n        padding: '{overlay.modal.padding}',\n      },\n    },\n    editor: {\n      toolbar: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n      },\n      toolbarItem: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n        padding: '{list.padding}',\n      },\n      overlayOption: {\n        focusBackground: '{list.option.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      content: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n      },\n    },\n    fieldset: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        padding: '0 1.125rem 1.125rem 1.125rem',\n        transitionDuration: '{transition.duration}',\n      },\n      legend: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        borderRadius: '{content.border.radius}',\n        borderWidth: '1px',\n        borderColor: 'transparent',\n        padding: '0.5rem 0.75rem',\n        gap: '0.5rem',\n        fontWeight: '600',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      toggleIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n      },\n      content: {\n        padding: '0',\n      },\n    },\n    fileupload: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        transitionDuration: '{transition.duration}',\n      },\n      header: {\n        background: 'transparent',\n        color: '{text.color}',\n        padding: '1.125rem',\n        borderColor: 'unset',\n        borderWidth: '0',\n        borderRadius: '0',\n        gap: '0.5rem',\n      },\n      content: {\n        highlightBorderColor: '{primary.color}',\n        padding: '0 1.125rem 1.125rem 1.125rem',\n        gap: '1rem',\n      },\n      file: {\n        padding: '1rem',\n        gap: '1rem',\n        borderColor: '{content.border.color}',\n        info: {\n          gap: '0.5rem',\n        },\n      },\n      fileList: {\n        gap: '0.5rem',\n      },\n      progressbar: {\n        height: '0.25rem',\n      },\n      basic: {\n        gap: '0.5rem',\n      },\n    },\n    iftalabel: {\n      root: {\n        color: '{form.field.float.label.color}',\n        focusColor: '{form.field.float.label.focus.color}',\n        invalidColor: '{form.field.float.label.invalid.color}',\n        transitionDuration: '0.2s',\n        positionX: '{form.field.padding.x}',\n        top: '{form.field.padding.y}',\n        fontSize: '0.75rem',\n        fontWeight: '400',\n      },\n      input: {\n        paddingTop: '1.5rem',\n        paddingBottom: '{form.field.padding.y}',\n      },\n    },\n    floatlabel: {\n      root: {\n        color: '{form.field.float.label.color}',\n        focusColor: '{form.field.float.label.focus.color}',\n        activeColor: '{form.field.float.label.active.color}',\n        invalidColor: '{form.field.float.label.invalid.color}',\n        transitionDuration: '0.2s',\n        positionX: '{form.field.padding.x}',\n        positionY: '{form.field.padding.y}',\n        fontWeight: '500',\n        active: {\n          fontSize: '0.75rem',\n          fontWeight: '400',\n        },\n      },\n      over: {\n        active: {\n          top: '-1.25rem',\n        },\n      },\n      in: {\n        input: {\n          paddingTop: '1.5rem',\n          paddingBottom: '{form.field.padding.y}',\n        },\n        active: {\n          top: '{form.field.padding.y}',\n        },\n      },\n      on: {\n        borderRadius: '{border.radius.xs}',\n        active: {\n          background: '{form.field.background}',\n          padding: '0 0.125rem',\n        },\n      },\n    },\n    galleria: {\n      root: {\n        borderWidth: '1px',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        transitionDuration: '{transition.duration}',\n      },\n      navButton: {\n        background: 'rgba(255, 255, 255, 0.1)',\n        hoverBackground: 'rgba(255, 255, 255, 0.2)',\n        color: '{surface.100}',\n        hoverColor: '{surface.0}',\n        size: '3rem',\n        gutter: '0.5rem',\n        prev: {\n          borderRadius: '50%',\n        },\n        next: {\n          borderRadius: '50%',\n        },\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      navIcon: {\n        size: '1.5rem',\n      },\n      thumbnailsContent: {\n        background: '{content.background}',\n        padding: '1rem 0.25rem',\n      },\n      thumbnailNavButton: {\n        size: '2rem',\n        borderRadius: '{content.border.radius}',\n        gutter: '0.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      thumbnailNavButtonIcon: {\n        size: '1rem',\n      },\n      caption: {\n        background: 'rgba(0, 0, 0, 0.5)',\n        color: '{surface.100}',\n        padding: '1rem',\n      },\n      indicatorList: {\n        gap: '0.5rem',\n        padding: '1rem',\n      },\n      indicatorButton: {\n        width: '1rem',\n        height: '1rem',\n        activeBackground: '{primary.color}',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      insetIndicatorList: {\n        background: 'rgba(0, 0, 0, 0.5)',\n      },\n      insetIndicatorButton: {\n        background: 'rgba(255, 255, 255, 0.4)',\n        hoverBackground: 'rgba(255, 255, 255, 0.6)',\n        activeBackground: 'rgba(255, 255, 255, 0.9)',\n      },\n      closeButton: {\n        size: '3rem',\n        gutter: '0.5rem',\n        background: 'rgba(255, 255, 255, 0.1)',\n        hoverBackground: 'rgba(255, 255, 255, 0.2)',\n        color: '{surface.50}',\n        hoverColor: '{surface.0}',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      closeButtonIcon: {\n        size: '1.5rem',\n      },\n      colorScheme: {\n        light: {\n          thumbnailNavButton: {\n            hoverBackground: '{surface.100}',\n            color: '{surface.600}',\n            hoverColor: '{surface.700}',\n          },\n          indicatorButton: {\n            background: '{surface.200}',\n            hoverBackground: '{surface.300}',\n          },\n        },\n        dark: {\n          thumbnailNavButton: {\n            hoverBackground: '{surface.700}',\n            color: '{surface.400}',\n            hoverColor: '{surface.0}',\n          },\n          indicatorButton: {\n            background: '{surface.700}',\n            hoverBackground: '{surface.600}',\n          },\n        },\n      },\n    },\n    iconfield: {\n      icon: {\n        color: '{form.field.icon.color}',\n      },\n    },\n    image: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      preview: {\n        icon: {\n          size: '1.5rem',\n        },\n        mask: {\n          background: '{mask.background}',\n          color: '{mask.color}',\n        },\n      },\n      toolbar: {\n        position: {\n          left: 'auto',\n          right: '1rem',\n          top: '1rem',\n          bottom: 'auto',\n        },\n        blur: '8px',\n        background: 'rgba(255,255,255,0.1)',\n        borderColor: 'rgba(255,255,255,0.2)',\n        borderWidth: '1px',\n        borderRadius: '30px',\n        padding: '.5rem',\n        gap: '0.5rem',\n      },\n      action: {\n        hoverBackground: 'rgba(255,255,255,0.1)',\n        color: '{surface.50}',\n        hoverColor: '{surface.0}',\n        size: '3rem',\n        iconSize: '1.5rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    imagecompare: {\n      handle: {\n        size: '15px',\n        hoverSize: '30px',\n        background: 'rgba(255,255,255,0.3)',\n        hoverBackground: 'rgba(255,255,255,0.3)',\n        borderColor: 'unset',\n        hoverBorderColor: 'unset',\n        borderWidth: '0',\n        borderRadius: '50%',\n        transitionDuration: '{transition.duration}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: 'rgba(255,255,255,0.3)',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    inlinemessage: {\n      root: {\n        padding: '{form.field.padding.y} {form.field.padding.x}',\n        borderRadius: '{content.border.radius}',\n        gap: '0.5rem',\n      },\n      text: {\n        fontWeight: '500',\n      },\n      icon: {\n        size: '1rem',\n      },\n      colorScheme: {\n        light: {\n          info: {\n            background: 'color-mix(in srgb, {blue.50}, transparent 5%)',\n            borderColor: '{blue.200}',\n            color: '{blue.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.50}, transparent 5%)',\n            borderColor: '{green.200}',\n            color: '{green.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n          },\n          warn: {\n            background: 'color-mix(in srgb,{yellow.50}, transparent 5%)',\n            borderColor: '{yellow.200}',\n            color: '{yellow.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.50}, transparent 5%)',\n            borderColor: '{red.200}',\n            color: '{red.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n          },\n          secondary: {\n            background: '{surface.100}',\n            borderColor: '{surface.200}',\n            color: '{surface.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n          },\n          contrast: {\n            background: '{surface.900}',\n            borderColor: '{surface.950}',\n            color: '{surface.50}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n          },\n        },\n        dark: {\n          info: {\n            background: 'color-mix(in srgb, {blue.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {blue.700}, transparent 64%)',\n            color: '{blue.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {green.700}, transparent 64%)',\n            color: '{green.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n          },\n          warn: {\n            background: 'color-mix(in srgb, {yellow.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {yellow.700}, transparent 64%)',\n            color: '{yellow.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {red.700}, transparent 64%)',\n            color: '{red.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n          },\n          secondary: {\n            background: '{surface.800}',\n            borderColor: '{surface.700}',\n            color: '{surface.300}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n          },\n          contrast: {\n            background: '{surface.0}',\n            borderColor: '{surface.100}',\n            color: '{surface.950}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n          },\n        },\n      },\n    },\n    inplace: {\n      root: {\n        padding: '{form.field.padding.y} {form.field.padding.x}',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{transition.duration}',\n      },\n      display: {\n        hoverBackground: '{content.hover.background}',\n        hoverColor: '{content.hover.color}',\n      },\n    },\n    inputchips: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n      colorScheme: {\n        light: {\n          chip: {\n            focusBackground: '{surface.200}',\n            color: '{surface.800}',\n          },\n        },\n        dark: {\n          chip: {\n            focusBackground: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    inputgroup: {\n      addon: {\n        background: '{form.field.background}',\n        borderColor: '{form.field.border.color}',\n        color: '{form.field.icon.color}',\n        borderRadius: '{form.field.border.radius}',\n        padding: '0.5rem',\n        minWidth: '2.5rem',\n      },\n    },\n    inputnumber: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      button: {\n        width: '2.5rem',\n        borderRadius: '{form.field.border.radius}',\n        verticalPadding: '{form.field.padding.y}',\n      },\n      colorScheme: {\n        light: {\n          button: {\n            background: 'transparent',\n            hoverBackground: '{surface.100}',\n            activeBackground: '{surface.200}',\n            borderColor: '{form.field.border.color}',\n            hoverBorderColor: '{form.field.border.color}',\n            activeBorderColor: '{form.field.border.color}',\n            color: '{surface.400}',\n            hoverColor: '{surface.500}',\n            activeColor: '{surface.600}',\n          },\n        },\n        dark: {\n          button: {\n            background: 'transparent',\n            hoverBackground: '{surface.800}',\n            activeBackground: '{surface.700}',\n            borderColor: '{form.field.border.color}',\n            hoverBorderColor: '{form.field.border.color}',\n            activeBorderColor: '{form.field.border.color}',\n            color: '{surface.400}',\n            hoverColor: '{surface.300}',\n            activeColor: '{surface.200}',\n          },\n        },\n      },\n    },\n    inputotp: {\n      root: {\n        gap: '0.5rem',\n      },\n      input: {\n        width: '2.5rem',\n        sm: {\n          width: '2rem',\n        },\n        lg: {\n          width: '3rem',\n        },\n      },\n    },\n    inputtext: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n    },\n    knob: {\n      root: {\n        transitionDuration: '{transition.duration}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      value: {\n        background: '{primary.color}',\n      },\n      range: {\n        background: '{content.border.color}',\n      },\n      text: {\n        color: '{text.muted.color}',\n      },\n    },\n    listbox: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        borderColor: '{form.field.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        shadow: '{form.field.shadow}',\n        borderRadius: '{form.field.border.radius}',\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        header: {\n          padding: '{list.header.padding}',\n        },\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      checkmark: {\n        color: '{list.option.color}',\n        gutterStart: '-0.375rem',\n        gutterEnd: '0.375rem',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n      colorScheme: {\n        light: {\n          option: {\n            stripedBackground: '{surface.50}',\n          },\n        },\n        dark: {\n          option: {\n            stripedBackground: '{surface.900}',\n          },\n        },\n      },\n    },\n    megamenu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        gap: '0.5rem',\n        verticalOrientation: {\n          padding: '{navigation.list.padding}',\n          gap: '{navigation.list.gap}',\n        },\n        horizontalOrientation: {\n          padding: '0.5rem 0.75rem',\n          gap: '0.5rem',\n        },\n        transitionDuration: '{transition.duration}',\n      },\n      baseItem: {\n        borderRadius: '{content.border.radius}',\n        padding: '{navigation.item.padding}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      overlay: {\n        padding: '0',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        shadow: '{overlay.navigation.shadow}',\n        gap: '0.5rem',\n      },\n      submenu: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      submenuLabel: {\n        padding: '{navigation.submenu.label.padding}',\n        fontWeight: '{navigation.submenu.label.font.weight}',\n        background: '{navigation.submenu.label.background.}',\n        color: '{navigation.submenu.label.color}',\n      },\n      submenuIcon: {\n        size: '{navigation.submenu.icon.size}',\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n        activeColor: '{navigation.submenu.icon.active.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n      mobileButton: {\n        borderRadius: '50%',\n        size: '1.75rem',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        hoverBackground: '{content.hover.background}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    menu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        transitionDuration: '{transition.duration}',\n      },\n      list: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n        },\n      },\n      submenuLabel: {\n        padding: '{navigation.submenu.label.padding}',\n        fontWeight: '{navigation.submenu.label.font.weight}',\n        background: '{navigation.submenu.label.background}',\n        color: '{navigation.submenu.label.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n    },\n    menubar: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        gap: '0.5rem',\n        padding: '0.5rem 0.75rem',\n        transitionDuration: '{transition.duration}',\n      },\n      baseItem: {\n        borderRadius: '{content.border.radius}',\n        padding: '{navigation.item.padding}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      submenu: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        mobileIndent: '1rem',\n        icon: {\n          size: '{navigation.submenu.icon.size}',\n          color: '{navigation.submenu.icon.color}',\n          focusColor: '{navigation.submenu.icon.focus.color}',\n          activeColor: '{navigation.submenu.icon.active.color}',\n        },\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n      mobileButton: {\n        borderRadius: '50%',\n        size: '1.75rem',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        hoverBackground: '{content.hover.background}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    message: {\n      root: {\n        borderRadius: '{content.border.radius}',\n        borderWidth: '1px',\n        transitionDuration: '{transition.duration}',\n      },\n      content: {\n        padding: '0.5rem 0.75rem',\n        gap: '0.5rem',\n        sm: {\n          padding: '0.375rem 0.625rem',\n        },\n        lg: {\n          padding: '0.625rem 0.875rem',\n        },\n      },\n      text: {\n        fontSize: '1rem',\n        fontWeight: '500',\n        sm: {\n          fontSize: '0.875rem',\n        },\n        lg: {\n          fontSize: '1.125rem',\n        },\n      },\n      icon: {\n        size: '1.125rem',\n        sm: {\n          size: '1rem',\n        },\n        lg: {\n          size: '1.25rem',\n        },\n      },\n      closeButton: {\n        width: '1.75rem',\n        height: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          offset: '{focus.ring.offset}',\n        },\n      },\n      closeIcon: {\n        size: '1rem',\n        sm: {\n          size: '0.875rem',\n        },\n        lg: {\n          size: '1.125rem',\n        },\n      },\n      outlined: {\n        root: {\n          borderWidth: '1px',\n        },\n      },\n      simple: {\n        content: {\n          padding: '0',\n        },\n      },\n      colorScheme: {\n        light: {\n          info: {\n            background: 'color-mix(in srgb, {blue.50}, transparent 5%)',\n            borderColor: '{blue.200}',\n            color: '{blue.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{blue.100}',\n              focusRing: {\n                color: '{blue.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{blue.600}',\n              borderColor: '{blue.600}',\n            },\n            simple: {\n              color: '{blue.600}',\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.50}, transparent 5%)',\n            borderColor: '{green.200}',\n            color: '{green.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{green.100}',\n              focusRing: {\n                color: '{green.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{green.600}',\n              borderColor: '{green.600}',\n            },\n            simple: {\n              color: '{green.600}',\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb,{yellow.50}, transparent 5%)',\n            borderColor: '{yellow.200}',\n            color: '{yellow.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{yellow.100}',\n              focusRing: {\n                color: '{yellow.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{yellow.600}',\n              borderColor: '{yellow.600}',\n            },\n            simple: {\n              color: '{yellow.600}',\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.50}, transparent 5%)',\n            borderColor: '{red.200}',\n            color: '{red.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{red.100}',\n              focusRing: {\n                color: '{red.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{red.600}',\n              borderColor: '{red.600}',\n            },\n            simple: {\n              color: '{red.600}',\n            },\n          },\n          secondary: {\n            background: '{surface.100}',\n            borderColor: '{surface.200}',\n            color: '{surface.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.200}',\n              focusRing: {\n                color: '{surface.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.500}',\n              borderColor: '{surface.500}',\n            },\n            simple: {\n              color: '{surface.500}',\n            },\n          },\n          contrast: {\n            background: '{surface.900}',\n            borderColor: '{surface.950}',\n            color: '{surface.50}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.800}',\n              focusRing: {\n                color: '{surface.50}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.950}',\n              borderColor: '{surface.950}',\n            },\n            simple: {\n              color: '{surface.950}',\n            },\n          },\n        },\n        dark: {\n          info: {\n            background: 'color-mix(in srgb, {blue.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {blue.700}, transparent 64%)',\n            color: '{blue.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{blue.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{blue.500}',\n              borderColor: '{blue.500}',\n            },\n            simple: {\n              color: '{blue.500}',\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {green.700}, transparent 64%)',\n            color: '{green.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{green.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{green.500}',\n              borderColor: '{green.500}',\n            },\n            simple: {\n              color: '{green.500}',\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb, {yellow.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {yellow.700}, transparent 64%)',\n            color: '{yellow.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{yellow.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{yellow.500}',\n              borderColor: '{yellow.500}',\n            },\n            simple: {\n              color: '{yellow.500}',\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {red.700}, transparent 64%)',\n            color: '{red.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{red.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{red.500}',\n              borderColor: '{red.500}',\n            },\n            simple: {\n              color: '{red.500}',\n            },\n          },\n          secondary: {\n            background: '{surface.800}',\n            borderColor: '{surface.700}',\n            color: '{surface.300}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.700}',\n              focusRing: {\n                color: '{surface.300}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.400}',\n              borderColor: '{surface.400}',\n            },\n            simple: {\n              color: '{surface.400}',\n            },\n          },\n          contrast: {\n            background: '{surface.0}',\n            borderColor: '{surface.100}',\n            color: '{surface.950}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.100}',\n              focusRing: {\n                color: '{surface.950}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.0}',\n              borderColor: '{surface.0}',\n            },\n            simple: {\n              color: '{surface.0}',\n            },\n          },\n        },\n      },\n    },\n    metergroup: {\n      root: {\n        borderRadius: '{content.border.radius}',\n        gap: '1rem',\n      },\n      meters: {\n        background: '{content.border.color}',\n        size: '0.5rem',\n      },\n      label: {\n        gap: '0.5rem',\n      },\n      labelMarker: {\n        size: '0.5rem',\n      },\n      labelIcon: {\n        size: '1rem',\n      },\n      labelList: {\n        verticalGap: '0.5rem',\n        horizontalGap: '1rem',\n      },\n    },\n    multiselect: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        header: {\n          padding: '{list.header.padding}',\n        },\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n        gap: '0.5rem',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n    },\n    orderlist: {\n      root: {\n        gap: '1.125rem',\n      },\n      controls: {\n        gap: '0.5rem',\n      },\n    },\n    organizationchart: {\n      root: {\n        gutter: '0.75rem',\n        transitionDuration: '{transition.duration}',\n      },\n      node: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        selectedColor: '{highlight.color}',\n        hoverColor: '{content.hover.color}',\n        padding: '0.75rem 1rem',\n        toggleablePadding: '0.75rem 1rem 1.25rem 1rem',\n        borderRadius: '{content.border.radius}',\n      },\n      nodeToggleButton: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        borderColor: '{content.border.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        size: '1.5rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      connector: {\n        color: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        height: '24px',\n      },\n    },\n    overlaybadge: {\n      root: {\n        outline: {\n          width: '2px',\n          color: '{content.background}',\n        },\n      },\n    },\n    popover: {\n      root: {\n        background: '{overlay.popover.background}',\n        borderColor: '{overlay.popover.border.color}',\n        color: '{overlay.popover.color}',\n        borderRadius: '{overlay.popover.border.radius}',\n        shadow: '{overlay.popover.shadow}',\n        gutter: '10px',\n        arrowOffset: '1.25rem',\n      },\n      content: {\n        padding: '{overlay.popover.padding}',\n      },\n    },\n    paginator: {\n      root: {\n        padding: '0.5rem 1rem',\n        gap: '0.25rem',\n        borderRadius: '{content.border.radius}',\n        background: '{content.background}',\n        color: '{content.color}',\n        transitionDuration: '{transition.duration}',\n      },\n      navButton: {\n        background: 'transparent',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        selectedColor: '{highlight.color}',\n        width: '2.5rem',\n        height: '2.5rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      currentPageReport: {\n        color: '{text.muted.color}',\n      },\n      jumpToPageInput: {\n        maxWidth: '2.5rem',\n      },\n    },\n    password: {\n      meter: {\n        background: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        height: '.75rem',\n      },\n      icon: {\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.popover.background}',\n        borderColor: '{overlay.popover.border.color}',\n        borderRadius: '{overlay.popover.border.radius}',\n        color: '{overlay.popover.color}',\n        padding: '{overlay.popover.padding}',\n        shadow: '{overlay.popover.shadow}',\n      },\n      content: {\n        gap: '0.5rem',\n      },\n      colorScheme: {\n        light: {\n          strength: {\n            weakBackground: '{red.500}',\n            mediumBackground: '{amber.500}',\n            strongBackground: '{green.500}',\n          },\n        },\n        dark: {\n          strength: {\n            weakBackground: '{red.400}',\n            mediumBackground: '{amber.400}',\n            strongBackground: '{green.400}',\n          },\n        },\n      },\n    },\n    panel: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n      },\n      header: {\n        background: 'transparent',\n        color: '{text.color}',\n        padding: '1.125rem',\n        borderColor: '{content.border.color}',\n        borderWidth: '0',\n        borderRadius: '0',\n      },\n      toggleableHeader: {\n        padding: '0.375rem 1.125rem',\n      },\n      title: {\n        fontWeight: '600',\n      },\n      content: {\n        padding: '0 1.125rem 1.125rem 1.125rem',\n      },\n      footer: {\n        padding: '0 1.125rem 1.125rem 1.125rem',\n      },\n    },\n    panelmenu: {\n      root: {\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n      panel: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderWidth: '1px',\n        color: '{content.color}',\n        padding: '0.25rem 0.25rem',\n        borderRadius: '{content.border.radius}',\n        first: {\n          borderWidth: '1px',\n          topBorderRadius: '{content.border.radius}',\n        },\n        last: {\n          borderWidth: '1px',\n          bottomBorderRadius: '{content.border.radius}',\n        },\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        gap: '0.5rem',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{content.border.radius}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n        },\n      },\n      submenu: {\n        indent: '1rem',\n      },\n      submenuIcon: {\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n      },\n    },\n    picklist: {\n      root: {\n        gap: '1.125rem',\n      },\n      controls: {\n        gap: '0.5rem',\n      },\n    },\n    progressbar: {\n      root: {\n        background: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        height: '1.25rem',\n      },\n      value: {\n        background: '{primary.color}',\n      },\n      label: {\n        color: '{primary.contrast.color}',\n        fontSize: '0.75rem',\n        fontWeight: '600',\n      },\n    },\n    progressspinner: {\n      colorScheme: {\n        light: {\n          root: {\n            'color.1': '{red.500}',\n            'color.2': '{blue.500}',\n            'color.3': '{green.500}',\n            'color.4': '{yellow.500}',\n          },\n        },\n        dark: {\n          root: {\n            'color.1': '{red.400}',\n            'color.2': '{blue.400}',\n            'color.3': '{green.400}',\n            'color.4': '{yellow.400}',\n          },\n        },\n      },\n    },\n    radiobutton: {\n      root: {\n        width: '1.25rem',\n        height: '1.25rem',\n        background: '{form.field.background}',\n        checkedBackground: '{primary.color}',\n        checkedHoverBackground: '{primary.hover.color}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.border.color}',\n        checkedBorderColor: '{primary.color}',\n        checkedHoverBorderColor: '{primary.hover.color}',\n        checkedFocusBorderColor: '{primary.color}',\n        checkedDisabledBorderColor: '{form.field.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        shadow: '{form.field.shadow}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          width: '1rem',\n          height: '1rem',\n        },\n        lg: {\n          width: '1.5rem',\n          height: '1.5rem',\n        },\n      },\n      icon: {\n        size: '0.75rem',\n        checkedColor: '{primary.contrast.color}',\n        checkedHoverColor: '{primary.contrast.color}',\n        disabledColor: '{form.field.disabled.color}',\n        sm: {\n          size: '0.5rem',\n        },\n        lg: {\n          size: '1rem',\n        },\n      },\n    },\n    rating: {\n      root: {\n        gap: '0.25rem',\n        transitionDuration: '{transition.duration}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      icon: {\n        size: '1rem',\n        color: '{text.muted.color}',\n        hoverColor: '{primary.color}',\n        activeColor: '{primary.color}',\n      },\n    },\n    scrollpanel: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      bar: {\n        size: '9px',\n        borderRadius: '{border.radius.sm}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          bar: {\n            background: '{surface.100}',\n          },\n        },\n        dark: {\n          bar: {\n            background: '{surface.800}',\n          },\n        },\n      },\n    },\n    select: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        header: {\n          padding: '{list.header.padding}',\n        },\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n      checkmark: {\n        color: '{list.option.color}',\n        gutterStart: '-0.375rem',\n        gutterEnd: '0.375rem',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n    },\n    selectbutton: {\n      root: {\n        borderRadius: '{form.field.border.radius}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            invalidBorderColor: '{form.field.invalid.border.color}',\n          },\n        },\n        dark: {\n          root: {\n            invalidBorderColor: '{form.field.invalid.border.color}',\n          },\n        },\n      },\n    },\n    skeleton: {\n      root: {\n        borderRadius: '{content.border.radius}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.200}',\n            animationBackground: 'rgba(255,255,255,0.4)',\n          },\n        },\n        dark: {\n          root: {\n            background: 'rgba(255, 255, 255, 0.06)',\n            animationBackground: 'rgba(255, 255, 255, 0.04)',\n          },\n        },\n      },\n    },\n    slider: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      track: {\n        background: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        size: '3px',\n      },\n      range: {\n        background: '{primary.color}',\n      },\n      handle: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '50%',\n        background: '{content.border.color}',\n        hoverBackground: '{content.border.color}',\n        content: {\n          borderRadius: '50%',\n          hoverBackground: '{content.background}',\n          width: '16px',\n          height: '16px',\n          shadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.08), 0px 1px 1px 0px rgba(0, 0, 0, 0.14)',\n        },\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          handle: {\n            contentBackground: '{surface.0}',\n          },\n        },\n        dark: {\n          handle: {\n            contentBackground: '{surface.950}',\n          },\n        },\n      },\n    },\n    speeddial: {\n      root: {\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n    },\n    splitter: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        transitionDuration: '{transition.duration}',\n      },\n      gutter: {\n        background: '{content.border.color}',\n      },\n      handle: {\n        size: '24px',\n        background: 'transparent',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    splitbutton: {\n      root: {\n        borderRadius: '{form.field.border.radius}',\n        roundedBorderRadius: '2rem',\n        raisedShadow:\n          '0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n      },\n    },\n    stepper: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      separator: {\n        background: '{content.border.color}',\n        activeBackground: '{primary.color}',\n        margin: '0 0 0 1.625rem',\n        size: '2px',\n      },\n      step: {\n        padding: '0.5rem',\n        gap: '1rem',\n      },\n      stepHeader: {\n        padding: '0',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        gap: '0.5rem',\n      },\n      stepTitle: {\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        fontWeight: '500',\n      },\n      stepNumber: {\n        background: '{content.background}',\n        activeBackground: '{content.background}',\n        borderColor: '{content.border.color}',\n        activeBorderColor: '{content.border.color}',\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        size: '2rem',\n        fontSize: '1.143rem',\n        fontWeight: '500',\n        borderRadius: '50%',\n        shadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12)',\n      },\n      steppanels: {\n        padding: '0.875rem 0.5rem 1.125rem 0.5rem',\n      },\n      steppanel: {\n        background: '{content.background}',\n        color: '{content.color}',\n        padding: '0',\n        indent: '1rem',\n      },\n    },\n    steps: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      separator: {\n        background: '{content.border.color}',\n      },\n      itemLink: {\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        gap: '0.5rem',\n      },\n      itemLabel: {\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        fontWeight: '500',\n      },\n      itemNumber: {\n        background: '{content.background}',\n        activeBackground: '{content.background}',\n        borderColor: '{content.border.color}',\n        activeBorderColor: '{content.border.color}',\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        size: '2rem',\n        fontSize: '1.143rem',\n        fontWeight: '500',\n        borderRadius: '50%',\n        shadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12)',\n      },\n    },\n    tabmenu: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      tablist: {\n        borderWidth: '0 0 1px 0',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n      },\n      item: {\n        background: 'transparent',\n        hoverBackground: 'transparent',\n        activeBackground: 'transparent',\n        borderWidth: '0 0 1px 0',\n        borderColor: '{content.border.color}',\n        hoverBorderColor: '{content.border.color}',\n        activeBorderColor: '{primary.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n        padding: '1rem 1.125rem',\n        fontWeight: '600',\n        margin: '0 0 -1px 0',\n        gap: '0.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      itemIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n      },\n      activeBar: {\n        height: '1px',\n        bottom: '-1px',\n        background: '{primary.color}',\n      },\n    },\n    tabs: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      tablist: {\n        borderWidth: '0 0 1px 0',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n      },\n      tab: {\n        background: 'transparent',\n        hoverBackground: 'transparent',\n        activeBackground: 'transparent',\n        borderWidth: '0 0 1px 0',\n        borderColor: '{content.border.color}',\n        hoverBorderColor: '{content.border.color}',\n        activeBorderColor: '{primary.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n        padding: '1rem 1.125rem',\n        fontWeight: '600',\n        margin: '0 0 -1px 0',\n        gap: '0.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      tabpanel: {\n        background: '{content.background}',\n        color: '{content.color}',\n        padding: '0.875rem 1.125rem 1.125rem 1.125rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: 'inset {focus.ring.shadow}',\n        },\n      },\n      navButton: {\n        background: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        width: '2.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      activeBar: {\n        height: '1px',\n        bottom: '-1px',\n        background: '{primary.color}',\n      },\n      colorScheme: {\n        light: {\n          navButton: {\n            shadow: '0px 0px 10px 50px rgba(255, 255, 255, 0.6)',\n          },\n        },\n        dark: {\n          navButton: {\n            shadow: '0px 0px 10px 50px color-mix(in srgb, {content.background}, transparent 50%)',\n          },\n        },\n      },\n    },\n    tabview: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      tabList: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n      },\n      tab: {\n        borderColor: '{content.border.color}',\n        activeBorderColor: '{primary.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n      },\n      tabPanel: {\n        background: '{content.background}',\n        color: '{content.color}',\n      },\n      navButton: {\n        background: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n      },\n      colorScheme: {\n        light: {\n          navButton: {\n            shadow: '0px 0px 10px 50px rgba(255, 255, 255, 0.6)',\n          },\n        },\n        dark: {\n          navButton: {\n            shadow: '0px 0px 10px 50px color-mix(in srgb, {content.background}, transparent 50%)',\n          },\n        },\n      },\n    },\n    textarea: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n    },\n    tieredmenu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        transitionDuration: '{transition.duration}',\n      },\n      list: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      submenu: {\n        mobileIndent: '1rem',\n      },\n      submenuIcon: {\n        size: '{navigation.submenu.icon.size}',\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n        activeColor: '{navigation.submenu.icon.active.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n    },\n    tag: {\n      root: {\n        fontSize: '0.875rem',\n        fontWeight: '700',\n        padding: '0.25rem 0.5rem',\n        gap: '0.25rem',\n        borderRadius: '{content.border.radius}',\n        roundedBorderRadius: '{border.radius.xl}',\n      },\n      icon: {\n        size: '0.75rem',\n      },\n      colorScheme: {\n        light: {\n          primary: {\n            background: '{primary.100}',\n            color: '{primary.700}',\n          },\n          secondary: {\n            background: '{surface.100}',\n            color: '{surface.600}',\n          },\n          success: {\n            background: '{green.100}',\n            color: '{green.700}',\n          },\n          info: {\n            background: '{sky.100}',\n            color: '{sky.700}',\n          },\n          warn: {\n            background: '{orange.100}',\n            color: '{orange.700}',\n          },\n          danger: {\n            background: '{red.100}',\n            color: '{red.700}',\n          },\n          contrast: {\n            background: '{surface.950}',\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          primary: {\n            background: 'color-mix(in srgb, {primary.500}, transparent 84%)',\n            color: '{primary.300}',\n          },\n          secondary: {\n            background: '{surface.800}',\n            color: '{surface.300}',\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            color: '{green.300}',\n          },\n          info: {\n            background: 'color-mix(in srgb, {sky.500}, transparent 84%)',\n            color: '{sky.300}',\n          },\n          warn: {\n            background: 'color-mix(in srgb, {orange.500}, transparent 84%)',\n            color: '{orange.300}',\n          },\n          danger: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            color: '{red.300}',\n          },\n          contrast: {\n            background: '{surface.0}',\n            color: '{surface.950}',\n          },\n        },\n      },\n    },\n    terminal: {\n      root: {\n        background: '{form.field.background}',\n        borderColor: '{form.field.border.color}',\n        color: '{form.field.color}',\n        height: '18rem',\n        padding: '{form.field.padding.y} {form.field.padding.x}',\n        borderRadius: '{form.field.border.radius}',\n      },\n      prompt: {\n        gap: '0.25rem',\n      },\n      commandResponse: {\n        margin: '2px 0',\n      },\n    },\n    timeline: {\n      event: {\n        minHeight: '5rem',\n      },\n      horizontal: {\n        eventContent: {\n          padding: '1rem 0',\n        },\n      },\n      vertical: {\n        eventContent: {\n          padding: '0 1rem',\n        },\n      },\n      eventMarker: {\n        size: '1.125rem',\n        borderRadius: '50%',\n        borderWidth: '2px',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        content: {\n          borderRadius: '50%',\n          size: '0.375rem',\n          background: '{primary.color}',\n          insetShadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12)',\n        },\n      },\n      eventConnector: {\n        color: '{content.border.color}',\n        size: '2px',\n      },\n    },\n    togglebutton: {\n      root: {\n        padding: '0.5rem 1rem',\n        borderRadius: '{content.border.radius}',\n        gap: '0.5rem',\n        fontWeight: '500',\n        disabledBackground: '{form.field.disabled.background}',\n        disabledBorderColor: '{form.field.disabled.background}',\n        disabledColor: '{form.field.disabled.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          padding: '0.375rem 0.75rem',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          padding: '0.625rem 1.25rem',\n        },\n      },\n      icon: {\n        disabledColor: '{form.field.disabled.color}',\n      },\n      content: {\n        left: '0.25rem',\n        top: '0.25rem',\n        checkedShadow: '0px 1px 2px 0px rgba(0, 0, 0, 0.02), 0px 1px 2px 0px rgba(0, 0, 0, 0.04)',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.100}',\n            checkedBackground: '{surface.100}',\n            hoverBackground: '{surface.100}',\n            borderColor: '{surface.100}',\n            color: '{surface.500}',\n            hoverColor: '{surface.700}',\n            checkedColor: '{surface.900}',\n            checkedBorderColor: '{surface.100}',\n          },\n          content: {\n            checkedBackground: '{surface.0}',\n          },\n          icon: {\n            color: '{surface.500}',\n            hoverColor: '{surface.700}',\n            checkedColor: '{surface.900}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.950}',\n            checkedBackground: '{surface.950}',\n            hoverBackground: '{surface.950}',\n            borderColor: '{surface.950}',\n            color: '{surface.400}',\n            hoverColor: '{surface.300}',\n            checkedColor: '{surface.0}',\n            checkedBorderColor: '{surface.950}',\n          },\n          content: {\n            checkedBackground: '{surface.800}',\n          },\n          icon: {\n            color: '{surface.400}',\n            hoverColor: '{surface.300}',\n            checkedColor: '{surface.0}',\n          },\n        },\n      },\n    },\n    toggleswitch: {\n      root: {\n        width: '2.5rem',\n        height: '1.5rem',\n        borderRadius: '30px',\n        gap: '0.25rem',\n        shadow: '{form.field.shadow}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        borderWidth: '1px',\n        borderColor: 'transparent',\n        hoverBorderColor: 'transparent',\n        checkedBorderColor: 'transparent',\n        checkedHoverBorderColor: 'transparent',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        transitionDuration: '{form.field.transition.duration}',\n        slideDuration: '0.2s',\n      },\n      handle: {\n        borderRadius: '50%',\n        size: '1rem',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.300}',\n            disabledBackground: '{form.field.disabled.background}',\n            hoverBackground: '{surface.400}',\n            checkedBackground: '{primary.color}',\n            checkedHoverBackground: '{primary.hover.color}',\n          },\n          handle: {\n            background: '{surface.0}',\n            disabledBackground: '{form.field.disabled.color}',\n            hoverBackground: '{surface.0}',\n            checkedBackground: '{surface.0}',\n            checkedHoverBackground: '{surface.0}',\n            color: '{text.muted.color}',\n            hoverColor: '{text.color}',\n            checkedColor: '{primary.color}',\n            checkedHoverColor: '{primary.hover.color}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.700}',\n            disabledBackground: '{surface.600}',\n            hoverBackground: '{surface.600}',\n            checkedBackground: '{primary.color}',\n            checkedHoverBackground: '{primary.hover.color}',\n          },\n          handle: {\n            background: '{surface.400}',\n            disabledBackground: '{surface.900}',\n            hoverBackground: '{surface.300}',\n            checkedBackground: '{surface.900}',\n            checkedHoverBackground: '{surface.900}',\n            color: '{surface.900}',\n            hoverColor: '{surface.800}',\n            checkedColor: '{primary.color}',\n            checkedHoverColor: '{primary.hover.color}',\n          },\n        },\n      },\n    },\n    tree: {\n      root: {\n        background: '{content.background}',\n        color: '{content.color}',\n        padding: '1rem',\n        gap: '2px',\n        indent: '1rem',\n        transitionDuration: '{transition.duration}',\n      },\n      node: {\n        padding: '0.25rem 0.5rem',\n        borderRadius: '{content.border.radius}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{text.color}',\n        hoverColor: '{text.hover.color}',\n        selectedColor: '{highlight.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n        gap: '0.25rem',\n      },\n      nodeIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        selectedColor: '{highlight.color}',\n      },\n      nodeToggleButton: {\n        borderRadius: '50%',\n        size: '1.75rem',\n        hoverBackground: '{content.hover.background}',\n        selectedHoverBackground: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        selectedHoverColor: '{primary.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      loadingIcon: {\n        size: '2rem',\n      },\n      filter: {\n        margin: '0 0 0.5rem 0',\n      },\n    },\n    treeselect: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      tree: {\n        padding: '{list.padding}',\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n    },\n    treetable: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      header: {\n        background: '{content.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      headerCell: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        gap: '0.5rem',\n        padding: '0.75rem 1rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      columnTitle: {\n        fontWeight: '600',\n      },\n      row: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      bodyCell: {\n        borderColor: '{treetable.border.color}',\n        padding: '0.75rem 1rem',\n        gap: '0.5rem',\n      },\n      footerCell: {\n        background: '{content.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        padding: '0.75rem 1rem',\n      },\n      columnFooter: {\n        fontWeight: '600',\n      },\n      footer: {\n        background: '{content.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      columnResizerWidth: '0.5rem',\n      resizeIndicator: {\n        width: '1px',\n        color: '{primary.color}',\n      },\n      sortIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        size: '0.875rem',\n      },\n      loadingIcon: {\n        size: '2rem',\n      },\n      nodeToggleButton: {\n        hoverBackground: '{content.hover.background}',\n        selectedHoverBackground: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        selectedHoverColor: '{primary.color}',\n        size: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      paginatorTop: {\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      paginatorBottom: {\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            borderColor: '{content.border.color}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.100}',\n          },\n        },\n        dark: {\n          root: {\n            borderColor: '{surface.800}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.900}',\n          },\n        },\n      },\n    },\n    toast: {\n      root: {\n        width: '25rem',\n        borderRadius: '{content.border.radius}',\n        borderWidth: '1px',\n        transitionDuration: '{transition.duration}',\n      },\n      icon: {\n        size: '1.125rem',\n      },\n      content: {\n        padding: '{overlay.popover.padding}',\n        gap: '0.5rem',\n      },\n      text: {\n        gap: '0.5rem',\n      },\n      summary: {\n        fontWeight: '500',\n        fontSize: '1rem',\n      },\n      detail: {\n        fontWeight: '500',\n        fontSize: '0.875rem',\n      },\n      closeButton: {\n        width: '1.75rem',\n        height: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          offset: '{focus.ring.offset}',\n        },\n      },\n      closeIcon: {\n        size: '1rem',\n      },\n      colorScheme: {\n        light: {\n          blur: '1.5px',\n          info: {\n            background: 'color-mix(in srgb, {blue.50}, transparent 5%)',\n            borderColor: '{blue.200}',\n            color: '{blue.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{blue.100}',\n              focusRing: {\n                color: '{blue.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.50}, transparent 5%)',\n            borderColor: '{green.200}',\n            color: '{green.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{green.100}',\n              focusRing: {\n                color: '{green.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb,{yellow.50}, transparent 5%)',\n            borderColor: '{yellow.200}',\n            color: '{yellow.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{yellow.100}',\n              focusRing: {\n                color: '{yellow.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.50}, transparent 5%)',\n            borderColor: '{red.200}',\n            color: '{red.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{red.100}',\n              focusRing: {\n                color: '{red.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          secondary: {\n            background: '{surface.100}',\n            borderColor: '{surface.200}',\n            color: '{surface.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.200}',\n              focusRing: {\n                color: '{surface.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          contrast: {\n            background: '{surface.900}',\n            borderColor: '{surface.950}',\n            color: '{surface.50}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.800}',\n              focusRing: {\n                color: '{surface.50}',\n                shadow: 'none',\n              },\n            },\n          },\n        },\n        dark: {\n          blur: '10px',\n          info: {\n            background: 'color-mix(in srgb, {blue.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {blue.700}, transparent 64%)',\n            color: '{blue.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{blue.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {green.700}, transparent 64%)',\n            color: '{green.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{green.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb, {yellow.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {yellow.700}, transparent 64%)',\n            color: '{yellow.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{yellow.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {red.700}, transparent 64%)',\n            color: '{red.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{red.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          secondary: {\n            background: '{surface.800}',\n            borderColor: '{surface.700}',\n            color: '{surface.300}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.700}',\n              focusRing: {\n                color: '{surface.300}',\n                shadow: 'none',\n              },\n            },\n          },\n          contrast: {\n            background: '{surface.0}',\n            borderColor: '{surface.100}',\n            color: '{surface.950}',\n            detailColor: '{surface.950}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.100}',\n              focusRing: {\n                color: '{surface.950}',\n                shadow: 'none',\n              },\n            },\n          },\n        },\n      },\n    },\n    toolbar: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        gap: '0.5rem',\n        padding: '0.75rem',\n      },\n    },\n    virtualscroller: {\n      loader: {\n        mask: {\n          background: '{content.background}',\n          color: '{text.muted.color}',\n        },\n        icon: {\n          size: '2rem',\n        },\n      },\n    },\n    tooltip: {\n      root: {\n        maxWidth: '12.5rem',\n        gutter: '0.25rem',\n        shadow: '{overlay.popover.shadow}',\n        padding: '0.5rem 0.75rem',\n        borderRadius: '{overlay.popover.border.radius}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    ripple: {\n      colorScheme: {\n        light: {\n          root: {\n            background: 'rgba(0,0,0,0.1)',\n          },\n        },\n        dark: {\n          root: {\n            background: 'rgba(255,255,255,0.3)',\n          },\n        },\n      },\n    },\n  },\n})"
            },
            {
                "name": "refreshAttempts",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "number",
                "defaultValue": "0"
            },
            {
                "name": "refreshTokenSubject",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "new BehaviorSubject<string | null>(null)"
            },
            {
                "name": "reqHandler",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createNodeRequestHandler(app)",
                "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
            },
            {
                "name": "roleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/guards/role.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(allowedRoles: string[]): CanActivateFn => {\n  return (route, state) => {\n    const router = inject(Router);\n    const authService = inject(AuthService);\n\n    if (!authService.isAuthenticatedUser()) {\n      router.navigate(['/']);\n      return false;\n    }\n\n    const userRole = authService.getUserRole();\n    if (allowedRoles.includes(userRole)) {\n      return true;\n    }\n\n    router.navigate(['/']); // Redirect to home if role not allowed\n    return false;\n  };\n}"
            },
            {
                "name": "serverConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n    provideServerRoutesConfig(serverRoutes)\n  ]\n}"
            },
            {
                "name": "serverDistFolder",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "dirname(fileURLToPath(import.meta.url))"
            },
            {
                "name": "serverRoutes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.server.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ServerRoute[]",
                "defaultValue": "[\n  {\n    path: '**',\n    renderMode: RenderMode.Prerender\n  }\n]"
            }
        ],
        "functions": [
            {
                "name": "addToken",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "token",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "authInterceptor",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Observable<HttpEvent<>>",
                "jsdoctags": [
                    {
                        "name": "req",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "handle401Error",
                "file": "src/app/core/interceptors/auth.interceptor.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "jsdoctags": [
                    {
                        "name": "request",
                        "type": "HttpRequest",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "next",
                        "type": "HttpHandlerFn",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "Currency",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"usd\" | \"eur\"",
                "file": "src/app/core/models/currency.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "UserRole",
                "childs": [
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USER"
                    },
                    {
                        "name": "SUPER_USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "SUPER_USER"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/features/auth/services/auth.service.ts"
            }
        ],
        "groupedVariables": {
            "src/server.ts": [
                {
                    "name": "angularApp",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new AngularNodeAppEngine()"
                },
                {
                    "name": "app",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "express()"
                },
                {
                    "name": "browserDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "resolve(serverDistFolder, '../browser')"
                },
                {
                    "name": "reqHandler",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createNodeRequestHandler(app)",
                    "rawdescription": "The request handler used by the Angular CLI (dev-server and during build).",
                    "description": "<p>The request handler used by the Angular CLI (dev-server and during build).</p>\n"
                },
                {
                    "name": "serverDistFolder",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "dirname(fileURLToPath(import.meta.url))"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideAnimationsAsync(),\n    provideRouter(routes),\n    provideHttpClient(withFetch(), withInterceptors([authInterceptor])),\n    provideClientHydration(),\n    providePrimeNG({\n      theme: {\n        preset: MyPreset,\n        options: {\n          mode: 'dark',\n          cssLayer: {\n            name: 'primeng',\n            order: 'tailwind-base, primeng, tailwind-utilities',\n          },\n        },\n      },\n    }),\n    provideServiceWorker('ngsw-worker.js', {\n      enabled: !isDevMode(),\n      registrationStrategy: 'registerWhenStable:30000',\n    }),\n  ],\n}"
                }
            ],
            "src/app/core/guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\n  const router = inject(Router);\n  const authService = inject(AuthService);\n\n  if (authService.isAuthenticatedUser()) {\n    return true;\n  }\n\n  // Store the attempted URL for redirecting\n  router.navigate(['/login'], { queryParams: { returnUrl: state.url } });\n  return false;\n}"
                }
            ],
            "src/main.server.ts": [
                {
                    "name": "bootstrap",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/main.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "() => bootstrapApplication(AppComponent, config)"
                }
            ],
            "src/app/app.config.server.ts": [
                {
                    "name": "config",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "mergeApplicationConfig(appConfig, serverConfig)"
                },
                {
                    "name": "serverConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideServerRendering(),\n    provideServerRoutesConfig(serverRoutes)\n  ]\n}"
                }
            ],
            "src/environments/environment.prod.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.prod.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: true,\n  API_BASE_URL: '',\n  METAL_PRICE_API_KEY: '',\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\n  production: false,\n  API_BASE_URL: 'http://localhost:3000',\n  METAL_PRICE_API_KEY: '',\n}"
                }
            ],
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "isRefreshing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "MAX_REFRESH_ATTEMPTS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "3"
                },
                {
                    "name": "refreshAttempts",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "defaultValue": "0"
                },
                {
                    "name": "refreshTokenSubject",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "new BehaviorSubject<string | null>(null)"
                }
            ],
            "src/app/prime-theme.ts": [
                {
                    "name": "MyPreset",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/prime-theme.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "definePreset(Aura, {\n  primitive: {\n    borderRadius: {\n      none: '0',\n      xs: '2px',\n      sm: '4px',\n      md: '6px',\n      lg: '8px',\n      xl: '12px',\n    },\n    emerald: {\n      50: '#ecfdf5',\n      100: '#d1fae5',\n      200: '#a7f3d0',\n      300: '#6ee7b7',\n      400: '#34d399',\n      500: '#10b981',\n      600: '#059669',\n      700: '#047857',\n      800: '#065f46',\n      900: '#064e3b',\n      950: '#022c22',\n    },\n    green: {\n      50: '#f0fdf4',\n      100: '#dcfce7',\n      200: '#bbf7d0',\n      300: '#86efac',\n      400: '#4ade80',\n      500: '#22c55e',\n      600: '#16a34a',\n      700: '#15803d',\n      800: '#166534',\n      900: '#14532d',\n      950: '#052e16',\n    },\n    lime: {\n      50: '#f7fee7',\n      100: '#ecfccb',\n      200: '#d9f99d',\n      300: '#bef264',\n      400: '#a3e635',\n      500: '#84cc16',\n      600: '#65a30d',\n      700: '#4d7c0f',\n      800: '#3f6212',\n      900: '#365314',\n      950: '#1a2e05',\n    },\n    red: {\n      50: '#fef2f2',\n      100: '#fee2e2',\n      200: '#fecaca',\n      300: '#fca5a5',\n      400: '#f87171',\n      500: '#ef4444',\n      600: '#dc2626',\n      700: '#b91c1c',\n      800: '#991b1b',\n      900: '#7f1d1d',\n      950: '#450a0a',\n    },\n    orange: {\n      50: '#fff7ed',\n      100: '#ffedd5',\n      200: '#fed7aa',\n      300: '#fdba74',\n      400: '#fb923c',\n      500: '#f97316',\n      600: '#ea580c',\n      700: '#c2410c',\n      800: '#9a3412',\n      900: '#7c2d12',\n      950: '#431407',\n    },\n    amber: {\n      50: '#fffbeb',\n      100: '#fef3c7',\n      200: '#fde68a',\n      300: '#fcd34d',\n      400: '#fbbf24',\n      500: '#f59e0b',\n      600: '#d97706',\n      700: '#b45309',\n      800: '#92400e',\n      900: '#78350f',\n      950: '#451a03',\n    },\n    yellow: {\n      50: '#fefce8',\n      100: '#fef9c3',\n      200: '#fef08a',\n      300: '#fde047',\n      400: '#facc15',\n      500: '#eab308',\n      600: '#ca8a04',\n      700: '#a16207',\n      800: '#854d0e',\n      900: '#713f12',\n      950: '#422006',\n    },\n    teal: {\n      50: '#f0fdfa',\n      100: '#ccfbf1',\n      200: '#99f6e4',\n      300: '#5eead4',\n      400: '#2dd4bf',\n      500: '#14b8a6',\n      600: '#0d9488',\n      700: '#0f766e',\n      800: '#115e59',\n      900: '#134e4a',\n      950: '#042f2e',\n    },\n    cyan: {\n      50: '#ecfeff',\n      100: '#cffafe',\n      200: '#a5f3fc',\n      300: '#67e8f9',\n      400: '#22d3ee',\n      500: '#06b6d4',\n      600: '#0891b2',\n      700: '#0e7490',\n      800: '#155e75',\n      900: '#164e63',\n      950: '#083344',\n    },\n    sky: {\n      50: '#f0f9ff',\n      100: '#e0f2fe',\n      200: '#bae6fd',\n      300: '#7dd3fc',\n      400: '#38bdf8',\n      500: '#0ea5e9',\n      600: '#0284c7',\n      700: '#0369a1',\n      800: '#075985',\n      900: '#0c4a6e',\n      950: '#082f49',\n    },\n    blue: {\n      50: '#eff6ff',\n      100: '#dbeafe',\n      200: '#bfdbfe',\n      300: '#93c5fd',\n      400: '#60a5fa',\n      500: '#3b82f6',\n      600: '#2563eb',\n      700: '#1d4ed8',\n      800: '#1e40af',\n      900: '#1e3a8a',\n      950: '#172554',\n    },\n    indigo: {\n      50: '#eef2ff',\n      100: '#e0e7ff',\n      200: '#c7d2fe',\n      300: '#a5b4fc',\n      400: '#818cf8',\n      500: '#6366f1',\n      600: '#4f46e5',\n      700: '#4338ca',\n      800: '#3730a3',\n      900: '#312e81',\n      950: '#1e1b4b',\n    },\n    violet: {\n      50: '#f5f3ff',\n      100: '#ede9fe',\n      200: '#ddd6fe',\n      300: '#c4b5fd',\n      400: '#a78bfa',\n      500: '#8b5cf6',\n      600: '#7c3aed',\n      700: '#6d28d9',\n      800: '#5b21b6',\n      900: '#4c1d95',\n      950: '#2e1065',\n    },\n    purple: {\n      50: '#faf5ff',\n      100: '#f3e8ff',\n      200: '#e9d5ff',\n      300: '#d8b4fe',\n      400: '#c084fc',\n      500: '#a855f7',\n      600: '#9333ea',\n      700: '#7e22ce',\n      800: '#6b21a8',\n      900: '#581c87',\n      950: '#3b0764',\n    },\n    fuchsia: {\n      50: '#fdf4ff',\n      100: '#fae8ff',\n      200: '#f5d0fe',\n      300: '#f0abfc',\n      400: '#e879f9',\n      500: '#d946ef',\n      600: '#c026d3',\n      700: '#a21caf',\n      800: '#86198f',\n      900: '#701a75',\n      950: '#4a044e',\n    },\n    pink: {\n      50: '#fdf2f8',\n      100: '#fce7f3',\n      200: '#fbcfe8',\n      300: '#f9a8d4',\n      400: '#f472b6',\n      500: '#ec4899',\n      600: '#db2777',\n      700: '#be185d',\n      800: '#9d174d',\n      900: '#831843',\n      950: '#500724',\n    },\n    rose: {\n      50: '#fff1f2',\n      100: '#ffe4e6',\n      200: '#fecdd3',\n      300: '#fda4af',\n      400: '#fb7185',\n      500: '#f43f5e',\n      600: '#e11d48',\n      700: '#be123c',\n      800: '#9f1239',\n      900: '#881337',\n      950: '#4c0519',\n    },\n    slate: {\n      50: '#f8fafc',\n      100: '#f1f5f9',\n      200: '#e2e8f0',\n      300: '#cbd5e1',\n      400: '#94a3b8',\n      500: '#64748b',\n      600: '#475569',\n      700: '#334155',\n      800: '#1e293b',\n      900: '#0f172a',\n      950: '#020617',\n    },\n    gray: {\n      50: '#f9fafb',\n      100: '#f3f4f6',\n      200: '#e5e7eb',\n      300: '#d1d5db',\n      400: '#9ca3af',\n      500: '#6b7280',\n      600: '#4b5563',\n      700: '#374151',\n      800: '#1f2937',\n      900: '#111827',\n      950: '#030712',\n    },\n    zinc: {\n      50: '#fafafa',\n      100: '#f4f4f5',\n      200: '#e4e4e7',\n      300: '#d4d4d8',\n      400: '#a1a1aa',\n      500: '#71717a',\n      600: '#52525b',\n      700: '#3f3f46',\n      800: '#27272a',\n      900: '#18181b',\n      950: '#09090b',\n    },\n    neutral: {\n      50: '#fafafa',\n      100: '#f5f5f5',\n      200: '#e5e5e5',\n      300: '#d4d4d4',\n      400: '#a3a3a3',\n      500: '#737373',\n      600: '#525252',\n      700: '#404040',\n      800: '#262626',\n      900: '#171717',\n      950: '#0a0a0a',\n    },\n    stone: {\n      50: '#fafaf9',\n      100: '#f5f5f4',\n      200: '#e7e5e4',\n      300: '#d6d3d1',\n      400: '#a8a29e',\n      500: '#78716c',\n      600: '#57534e',\n      700: '#44403c',\n      800: '#292524',\n      900: '#1c1917',\n      950: '#0c0a09',\n    },\n  },\n  semantic: {\n    transitionDuration: '0.2s',\n    focusRing: {\n      width: '1px',\n      style: 'solid',\n      color: '{primary.color}',\n      offset: '2px',\n      shadow: 'none',\n    },\n    disabledOpacity: '0.6',\n    iconSize: '1rem',\n    anchorGutter: '2px',\n    primary: {\n      50: '#ecfdf5',\n      100: '#d1fae5',\n      200: '#a7f3d0',\n      300: '#6ee7b7',\n      400: '#34d399',\n      500: '#10b981',\n      600: '#059669',\n      700: '#047857',\n      800: '#065f46',\n      900: '#064e3b',\n      950: '#022c22',\n    },\n    formField: {\n      paddingX: '0.75rem',\n      paddingY: '0.5rem',\n      sm: {\n        fontSize: '0.875rem',\n        paddingX: '0.625rem',\n        paddingY: '0.375rem',\n      },\n      lg: {\n        fontSize: '1.125rem',\n        paddingX: '0.875rem',\n        paddingY: '0.625rem',\n      },\n      borderRadius: '{border.radius.md}',\n      focusRing: {\n        width: '0',\n        style: 'none',\n        color: 'transparent',\n        offset: '0',\n        shadow: 'none',\n      },\n      transitionDuration: '{transition.duration}',\n    },\n    list: {\n      padding: '0.25rem 0.25rem',\n      gap: '2px',\n      header: {\n        padding: '0.5rem 1rem 0.25rem 1rem',\n      },\n      option: {\n        padding: '0.5rem 0.75rem',\n        borderRadius: '{border.radius.sm}',\n      },\n      optionGroup: {\n        padding: '0.5rem 0.75rem',\n        fontWeight: '600',\n      },\n    },\n    content: {\n      borderRadius: '{border.radius.md}',\n    },\n    mask: {\n      transitionDuration: '0.15s',\n    },\n    navigation: {\n      list: {\n        padding: '0.25rem 0.25rem',\n        gap: '2px',\n      },\n      item: {\n        padding: '0.5rem 0.75rem',\n        borderRadius: '{border.radius.sm}',\n        gap: '0.5rem',\n      },\n      submenuLabel: {\n        padding: '0.5rem 0.75rem',\n        fontWeight: '600',\n      },\n      submenuIcon: {\n        size: '0.875rem',\n      },\n    },\n    overlay: {\n      select: {\n        borderRadius: '{border.radius.md}',\n        shadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',\n      },\n      popover: {\n        borderRadius: '{border.radius.md}',\n        padding: '0.75rem',\n        shadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',\n      },\n      modal: {\n        borderRadius: '{border.radius.xl}',\n        padding: '1.25rem',\n        shadow: '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.1)',\n      },\n      navigation: {\n        shadow: '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.1)',\n      },\n    },\n    colorScheme: {\n      light: {\n        surface: {\n          0: '#ffffff',\n          50: '#f8fafc',\n          100: '#f1f5f9',\n          200: '#e2e8f0',\n          300: '#cbd5e1',\n          400: '#94a3b8',\n          500: '#64748b',\n          600: '#475569',\n          700: '#334155',\n          800: '#1e293b',\n          900: '#0f172a',\n          950: '#020617',\n        },\n        primary: {\n          color: '{primary.500}',\n          contrastColor: '#ffffff',\n          hoverColor: '{primary.600}',\n          activeColor: '{primary.700}',\n        },\n        highlight: {\n          background: '{primary.50}',\n          focusBackground: '{primary.100}',\n          color: '{primary.700}',\n          focusColor: '{primary.800}',\n        },\n        mask: {\n          background: 'rgba(0,0,0,0.4)',\n          color: '{surface.200}',\n        },\n        formField: {\n          background: '{surface.0}',\n          disabledBackground: '{surface.200}',\n          filledBackground: '{surface.50}',\n          filledHoverBackground: '{surface.50}',\n          filledFocusBackground: '{surface.50}',\n          borderColor: '{surface.300}',\n          hoverBorderColor: '{surface.400}',\n          focusBorderColor: '{primary.color}',\n          invalidBorderColor: '{red.400}',\n          color: '{surface.700}',\n          disabledColor: '{surface.500}',\n          placeholderColor: '{surface.500}',\n          invalidPlaceholderColor: '{red.600}',\n          floatLabelColor: '{surface.500}',\n          floatLabelFocusColor: '{primary.600}',\n          floatLabelActiveColor: '{surface.500}',\n          floatLabelInvalidColor: '{form.field.invalid.placeholder.color}',\n          iconColor: '{surface.400}',\n          shadow: '0 0 #0000, 0 0 #0000, 0 1px 2px 0 rgba(18, 18, 23, 0.05)',\n        },\n        text: {\n          color: '{surface.700}',\n          hoverColor: '{surface.800}',\n          mutedColor: '{surface.500}',\n          hoverMutedColor: '{surface.600}',\n        },\n        content: {\n          background: '{surface.0}',\n          hoverBackground: '{surface.100}',\n          borderColor: '{surface.200}',\n          color: '{text.color}',\n          hoverColor: '{text.hover.color}',\n        },\n        overlay: {\n          select: {\n            background: '{surface.0}',\n            borderColor: '{surface.200}',\n            color: '{text.color}',\n          },\n          popover: {\n            background: '{surface.0}',\n            borderColor: '{surface.200}',\n            color: '{text.color}',\n          },\n          modal: {\n            background: '{surface.0}',\n            borderColor: '{surface.200}',\n            color: '{text.color}',\n          },\n        },\n        list: {\n          option: {\n            focusBackground: '{surface.100}',\n            selectedBackground: '{highlight.background}',\n            selectedFocusBackground: '{highlight.focus.background}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            selectedColor: '{highlight.color}',\n            selectedFocusColor: '{highlight.focus.color}',\n            icon: {\n              color: '{surface.400}',\n              focusColor: '{surface.500}',\n            },\n          },\n          optionGroup: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n        },\n        navigation: {\n          item: {\n            focusBackground: '{surface.100}',\n            activeBackground: '{surface.100}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            activeColor: '{text.hover.color}',\n            icon: {\n              color: '{surface.400}',\n              focusColor: '{surface.500}',\n              activeColor: '{surface.500}',\n            },\n          },\n          submenuLabel: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n          submenuIcon: {\n            color: '{surface.400}',\n            focusColor: '{surface.500}',\n            activeColor: '{surface.500}',\n          },\n        },\n      },\n      dark: {\n        surface: {\n          0: '#ffffff',\n          50: '#fafafa',\n          100: '#f4f4f5',\n          200: '#e4e4e7',\n          300: '#d4d4d8',\n          400: '#a1a1aa',\n          500: '#71717a',\n          600: '#52525b',\n          700: '#3f3f46',\n          800: '#27272a',\n          900: '#18181b',\n          950: '#09090b',\n        },\n        primary: {\n          color: '{primary.400}',\n          contrastColor: '{surface.900}',\n          hoverColor: '{primary.300}',\n          activeColor: '{primary.200}',\n        },\n        highlight: {\n          background: 'color-mix(in srgb, {primary.400}, transparent 84%)',\n          focusBackground: 'color-mix(in srgb, {primary.400}, transparent 76%)',\n          color: 'rgba(255,255,255,.87)',\n          focusColor: 'rgba(255,255,255,.87)',\n        },\n        mask: {\n          background: 'rgba(0,0,0,0.6)',\n          color: '{surface.200}',\n        },\n        formField: {\n          background: '{surface.950}',\n          disabledBackground: '{surface.700}',\n          filledBackground: '{surface.800}',\n          filledHoverBackground: '{surface.800}',\n          filledFocusBackground: '{surface.800}',\n          borderColor: '{surface.600}',\n          hoverBorderColor: '{surface.500}',\n          focusBorderColor: '{primary.color}',\n          invalidBorderColor: '{red.300}',\n          color: '{surface.0}',\n          disabledColor: '{surface.400}',\n          placeholderColor: '{surface.400}',\n          invalidPlaceholderColor: '{red.400}',\n          floatLabelColor: '{surface.400}',\n          floatLabelFocusColor: '{primary.color}',\n          floatLabelActiveColor: '{surface.400}',\n          floatLabelInvalidColor: '{form.field.invalid.placeholder.color}',\n          iconColor: '{surface.400}',\n          shadow: '0 0 #0000, 0 0 #0000, 0 1px 2px 0 rgba(18, 18, 23, 0.05)',\n        },\n        text: {\n          color: '{surface.0}',\n          hoverColor: '{surface.0}',\n          mutedColor: '{surface.400}',\n          hoverMutedColor: '{surface.300}',\n        },\n        content: {\n          background: '{surface.900}',\n          hoverBackground: '{surface.800}',\n          borderColor: '{surface.700}',\n          color: '{text.color}',\n          hoverColor: '{text.hover.color}',\n        },\n        overlay: {\n          select: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n            color: '{text.color}',\n          },\n          popover: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n            color: '{text.color}',\n          },\n          modal: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n            color: '{text.color}',\n          },\n        },\n        list: {\n          option: {\n            focusBackground: '{surface.800}',\n            selectedBackground: '{highlight.background}',\n            selectedFocusBackground: '{highlight.focus.background}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            selectedColor: '{highlight.color}',\n            selectedFocusColor: '{highlight.focus.color}',\n            icon: {\n              color: '{surface.500}',\n              focusColor: '{surface.400}',\n            },\n          },\n          optionGroup: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n        },\n        navigation: {\n          item: {\n            focusBackground: '{surface.800}',\n            activeBackground: '{surface.800}',\n            color: '{text.color}',\n            focusColor: '{text.hover.color}',\n            activeColor: '{text.hover.color}',\n            icon: {\n              color: '{surface.500}',\n              focusColor: '{surface.400}',\n              activeColor: '{surface.400}',\n            },\n          },\n          submenuLabel: {\n            background: 'transparent',\n            color: '{text.muted.color}',\n          },\n          submenuIcon: {\n            color: '{surface.500}',\n            focusColor: '{surface.400}',\n            activeColor: '{surface.400}',\n          },\n        },\n      },\n    },\n  },\n  components: {\n    accordion: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      panel: {\n        borderWidth: '0 0 1px 0',\n        borderColor: '{content.border.color}',\n      },\n      header: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{text.color}',\n        padding: '1.125rem',\n        fontWeight: '600',\n        borderRadius: '0',\n        borderWidth: '0',\n        borderColor: '{content.border.color}',\n        background: '{content.background}',\n        hoverBackground: '{content.background}',\n        activeBackground: '{content.background}',\n        activeHoverBackground: '{content.background}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n        toggleIcon: {\n          color: '{text.muted.color}',\n          hoverColor: '{text.color}',\n          activeColor: '{text.color}',\n          activeHoverColor: '{text.color}',\n        },\n        first: {\n          topBorderRadius: '{content.border.radius}',\n          borderWidth: '0',\n        },\n        last: {\n          bottomBorderRadius: '{content.border.radius}',\n          activeBottomBorderRadius: '0',\n        },\n      },\n      content: {\n        borderWidth: '0',\n        borderColor: '{content.border.color}',\n        background: '{content.background}',\n        color: '{text.color}',\n        padding: '0 1.125rem 1.125rem 1.125rem',\n      },\n    },\n    autocomplete: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      dropdown: {\n        width: '2.5rem',\n        sm: {\n          width: '2rem',\n        },\n        lg: {\n          width: '3rem',\n        },\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.border.color}',\n        activeBorderColor: '{form.field.border.color}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n      colorScheme: {\n        light: {\n          chip: {\n            focusBackground: '{surface.200}',\n            focusColor: '{surface.800}',\n          },\n          dropdown: {\n            background: '{surface.100}',\n            hoverBackground: '{surface.200}',\n            activeBackground: '{surface.300}',\n            color: '{surface.600}',\n            hoverColor: '{surface.700}',\n            activeColor: '{surface.800}',\n          },\n        },\n        dark: {\n          chip: {\n            focusBackground: '{surface.700}',\n            focusColor: '{surface.0}',\n          },\n          dropdown: {\n            background: '{surface.800}',\n            hoverBackground: '{surface.700}',\n            activeBackground: '{surface.600}',\n            color: '{surface.300}',\n            hoverColor: '{surface.200}',\n            activeColor: '{surface.100}',\n          },\n        },\n      },\n    },\n    avatar: {\n      root: {\n        width: '2rem',\n        height: '2rem',\n        fontSize: '1rem',\n        background: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n      },\n      icon: {\n        size: '1rem',\n      },\n      group: {\n        borderColor: '{content.background}',\n        offset: '-0.75rem',\n      },\n      lg: {\n        width: '3rem',\n        height: '3rem',\n        fontSize: '1.5rem',\n        icon: {\n          size: '1.5rem',\n        },\n        group: {\n          offset: '-1rem',\n        },\n      },\n      xl: {\n        width: '4rem',\n        height: '4rem',\n        fontSize: '2rem',\n        icon: {\n          size: '2rem',\n        },\n        group: {\n          offset: '-1.5rem',\n        },\n      },\n    },\n    badge: {\n      root: {\n        borderRadius: '{border.radius.md}',\n        padding: '0 0.5rem',\n        fontSize: '0.75rem',\n        fontWeight: '700',\n        minWidth: '1.5rem',\n        height: '1.5rem',\n      },\n      dot: {\n        size: '0.5rem',\n      },\n      sm: {\n        fontSize: '0.625rem',\n        minWidth: '1.25rem',\n        height: '1.25rem',\n      },\n      lg: {\n        fontSize: '0.875rem',\n        minWidth: '1.75rem',\n        height: '1.75rem',\n      },\n      xl: {\n        fontSize: '1rem',\n        minWidth: '2rem',\n        height: '2rem',\n      },\n      colorScheme: {\n        light: {\n          primary: {\n            background: '{primary.color}',\n            color: '{primary.contrast.color}',\n          },\n          secondary: {\n            background: '{surface.100}',\n            color: '{surface.600}',\n          },\n          success: {\n            background: '{green.500}',\n            color: '{surface.0}',\n          },\n          info: {\n            background: '{sky.500}',\n            color: '{surface.0}',\n          },\n          warn: {\n            background: '{orange.500}',\n            color: '{surface.0}',\n          },\n          danger: {\n            background: '{red.500}',\n            color: '{surface.0}',\n          },\n          contrast: {\n            background: '{surface.950}',\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          primary: {\n            background: '{primary.color}',\n            color: '{primary.contrast.color}',\n          },\n          secondary: {\n            background: '{surface.800}',\n            color: '{surface.300}',\n          },\n          success: {\n            background: '{green.400}',\n            color: '{green.950}',\n          },\n          info: {\n            background: '{sky.400}',\n            color: '{sky.950}',\n          },\n          warn: {\n            background: '{orange.400}',\n            color: '{orange.950}',\n          },\n          danger: {\n            background: '{red.400}',\n            color: '{red.950}',\n          },\n          contrast: {\n            background: '{surface.0}',\n            color: '{surface.950}',\n          },\n        },\n      },\n    },\n    blockui: {\n      root: {\n        borderRadius: '{content.border.radius}',\n      },\n    },\n    breadcrumb: {\n      root: {\n        padding: '1rem',\n        background: '{content.background}',\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n      item: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        borderRadius: '{content.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          hoverColor: '{navigation.item.icon.focus.color}',\n        },\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      separator: {\n        color: '{navigation.item.icon.color}',\n      },\n    },\n    button: {\n      root: {\n        borderRadius: '{form.field.border.radius}',\n        roundedBorderRadius: '2rem',\n        gap: '0.5rem',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        iconOnlyWidth: '2.5rem',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n        label: {\n          fontWeight: '500',\n        },\n        raisedShadow:\n          '0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          offset: '{focus.ring.offset}',\n        },\n        badgeSize: '1rem',\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            primary: {\n              background: '{primary.color}',\n              hoverBackground: '{primary.hover.color}',\n              activeBackground: '{primary.active.color}',\n              borderColor: '{primary.color}',\n              hoverBorderColor: '{primary.hover.color}',\n              activeBorderColor: '{primary.active.color}',\n              color: '{primary.contrast.color}',\n              hoverColor: '{primary.contrast.color}',\n              activeColor: '{primary.contrast.color}',\n              focusRing: {\n                color: '{primary.color}',\n                shadow: 'none',\n              },\n            },\n            secondary: {\n              background: '{surface.100}',\n              hoverBackground: '{surface.200}',\n              activeBackground: '{surface.300}',\n              borderColor: '{surface.100}',\n              hoverBorderColor: '{surface.200}',\n              activeBorderColor: '{surface.300}',\n              color: '{surface.600}',\n              hoverColor: '{surface.700}',\n              activeColor: '{surface.800}',\n              focusRing: {\n                color: '{surface.600}',\n                shadow: 'none',\n              },\n            },\n            info: {\n              background: '{sky.500}',\n              hoverBackground: '{sky.600}',\n              activeBackground: '{sky.700}',\n              borderColor: '{sky.500}',\n              hoverBorderColor: '{sky.600}',\n              activeBorderColor: '{sky.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{sky.500}',\n                shadow: 'none',\n              },\n            },\n            success: {\n              background: '{green.500}',\n              hoverBackground: '{green.600}',\n              activeBackground: '{green.700}',\n              borderColor: '{green.500}',\n              hoverBorderColor: '{green.600}',\n              activeBorderColor: '{green.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{green.500}',\n                shadow: 'none',\n              },\n            },\n            warn: {\n              background: '{orange.500}',\n              hoverBackground: '{orange.600}',\n              activeBackground: '{orange.700}',\n              borderColor: '{orange.500}',\n              hoverBorderColor: '{orange.600}',\n              activeBorderColor: '{orange.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{orange.500}',\n                shadow: 'none',\n              },\n            },\n            help: {\n              background: '{purple.500}',\n              hoverBackground: '{purple.600}',\n              activeBackground: '{purple.700}',\n              borderColor: '{purple.500}',\n              hoverBorderColor: '{purple.600}',\n              activeBorderColor: '{purple.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{purple.500}',\n                shadow: 'none',\n              },\n            },\n            danger: {\n              background: '{red.500}',\n              hoverBackground: '{red.600}',\n              activeBackground: '{red.700}',\n              borderColor: '{red.500}',\n              hoverBorderColor: '{red.600}',\n              activeBorderColor: '{red.700}',\n              color: '#ffffff',\n              hoverColor: '#ffffff',\n              activeColor: '#ffffff',\n              focusRing: {\n                color: '{red.500}',\n                shadow: 'none',\n              },\n            },\n            contrast: {\n              background: '{surface.950}',\n              hoverBackground: '{surface.900}',\n              activeBackground: '{surface.800}',\n              borderColor: '{surface.950}',\n              hoverBorderColor: '{surface.900}',\n              activeBorderColor: '{surface.800}',\n              color: '{surface.0}',\n              hoverColor: '{surface.0}',\n              activeColor: '{surface.0}',\n              focusRing: {\n                color: '{surface.950}',\n                shadow: 'none',\n              },\n            },\n          },\n          outlined: {\n            primary: {\n              hoverBackground: '{primary.50}',\n              activeBackground: '{primary.100}',\n              borderColor: '{primary.200}',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              borderColor: '{surface.200}',\n              color: '{surface.500}',\n            },\n            success: {\n              hoverBackground: '{green.50}',\n              activeBackground: '{green.100}',\n              borderColor: '{green.200}',\n              color: '{green.500}',\n            },\n            info: {\n              hoverBackground: '{sky.50}',\n              activeBackground: '{sky.100}',\n              borderColor: '{sky.200}',\n              color: '{sky.500}',\n            },\n            warn: {\n              hoverBackground: '{orange.50}',\n              activeBackground: '{orange.100}',\n              borderColor: '{orange.200}',\n              color: '{orange.500}',\n            },\n            help: {\n              hoverBackground: '{purple.50}',\n              activeBackground: '{purple.100}',\n              borderColor: '{purple.200}',\n              color: '{purple.500}',\n            },\n            danger: {\n              hoverBackground: '{red.50}',\n              activeBackground: '{red.100}',\n              borderColor: '{red.200}',\n              color: '{red.500}',\n            },\n            contrast: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              borderColor: '{surface.700}',\n              color: '{surface.950}',\n            },\n            plain: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              borderColor: '{surface.200}',\n              color: '{surface.700}',\n            },\n          },\n          text: {\n            primary: {\n              hoverBackground: '{primary.50}',\n              activeBackground: '{primary.100}',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              color: '{surface.500}',\n            },\n            success: {\n              hoverBackground: '{green.50}',\n              activeBackground: '{green.100}',\n              color: '{green.500}',\n            },\n            info: {\n              hoverBackground: '{sky.50}',\n              activeBackground: '{sky.100}',\n              color: '{sky.500}',\n            },\n            warn: {\n              hoverBackground: '{orange.50}',\n              activeBackground: '{orange.100}',\n              color: '{orange.500}',\n            },\n            help: {\n              hoverBackground: '{purple.50}',\n              activeBackground: '{purple.100}',\n              color: '{purple.500}',\n            },\n            danger: {\n              hoverBackground: '{red.50}',\n              activeBackground: '{red.100}',\n              color: '{red.500}',\n            },\n            contrast: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              color: '{surface.950}',\n            },\n            plain: {\n              hoverBackground: '{surface.50}',\n              activeBackground: '{surface.100}',\n              color: '{surface.700}',\n            },\n          },\n          link: {\n            color: '{primary.color}',\n            hoverColor: '{primary.color}',\n            activeColor: '{primary.color}',\n          },\n        },\n        dark: {\n          root: {\n            primary: {\n              background: '{primary.color}',\n              hoverBackground: '{primary.hover.color}',\n              activeBackground: '{primary.active.color}',\n              borderColor: '{primary.color}',\n              hoverBorderColor: '{primary.hover.color}',\n              activeBorderColor: '{primary.active.color}',\n              color: '{primary.contrast.color}',\n              hoverColor: '{primary.contrast.color}',\n              activeColor: '{primary.contrast.color}',\n              focusRing: {\n                color: '{primary.color}',\n                shadow: 'none',\n              },\n            },\n            secondary: {\n              background: '{surface.800}',\n              hoverBackground: '{surface.700}',\n              activeBackground: '{surface.600}',\n              borderColor: '{surface.800}',\n              hoverBorderColor: '{surface.700}',\n              activeBorderColor: '{surface.600}',\n              color: '{surface.300}',\n              hoverColor: '{surface.200}',\n              activeColor: '{surface.100}',\n              focusRing: {\n                color: '{surface.300}',\n                shadow: 'none',\n              },\n            },\n            info: {\n              background: '{sky.400}',\n              hoverBackground: '{sky.300}',\n              activeBackground: '{sky.200}',\n              borderColor: '{sky.400}',\n              hoverBorderColor: '{sky.300}',\n              activeBorderColor: '{sky.200}',\n              color: '{sky.950}',\n              hoverColor: '{sky.950}',\n              activeColor: '{sky.950}',\n              focusRing: {\n                color: '{sky.400}',\n                shadow: 'none',\n              },\n            },\n            success: {\n              background: '{green.400}',\n              hoverBackground: '{green.300}',\n              activeBackground: '{green.200}',\n              borderColor: '{green.400}',\n              hoverBorderColor: '{green.300}',\n              activeBorderColor: '{green.200}',\n              color: '{green.950}',\n              hoverColor: '{green.950}',\n              activeColor: '{green.950}',\n              focusRing: {\n                color: '{green.400}',\n                shadow: 'none',\n              },\n            },\n            warn: {\n              background: '{orange.400}',\n              hoverBackground: '{orange.300}',\n              activeBackground: '{orange.200}',\n              borderColor: '{orange.400}',\n              hoverBorderColor: '{orange.300}',\n              activeBorderColor: '{orange.200}',\n              color: '{orange.950}',\n              hoverColor: '{orange.950}',\n              activeColor: '{orange.950}',\n              focusRing: {\n                color: '{orange.400}',\n                shadow: 'none',\n              },\n            },\n            help: {\n              background: '{purple.400}',\n              hoverBackground: '{purple.300}',\n              activeBackground: '{purple.200}',\n              borderColor: '{purple.400}',\n              hoverBorderColor: '{purple.300}',\n              activeBorderColor: '{purple.200}',\n              color: '{purple.950}',\n              hoverColor: '{purple.950}',\n              activeColor: '{purple.950}',\n              focusRing: {\n                color: '{purple.400}',\n                shadow: 'none',\n              },\n            },\n            danger: {\n              background: '{red.400}',\n              hoverBackground: '{red.300}',\n              activeBackground: '{red.200}',\n              borderColor: '{red.400}',\n              hoverBorderColor: '{red.300}',\n              activeBorderColor: '{red.200}',\n              color: '{red.950}',\n              hoverColor: '{red.950}',\n              activeColor: '{red.950}',\n              focusRing: {\n                color: '{red.400}',\n                shadow: 'none',\n              },\n            },\n            contrast: {\n              background: '{surface.0}',\n              hoverBackground: '{surface.100}',\n              activeBackground: '{surface.200}',\n              borderColor: '{surface.0}',\n              hoverBorderColor: '{surface.100}',\n              activeBorderColor: '{surface.200}',\n              color: '{surface.950}',\n              hoverColor: '{surface.950}',\n              activeColor: '{surface.950}',\n              focusRing: {\n                color: '{surface.0}',\n                shadow: 'none',\n              },\n            },\n          },\n          outlined: {\n            primary: {\n              hoverBackground: 'color-mix(in srgb, {primary.color}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {primary.color}, transparent 84%)',\n              borderColor: '{primary.700}',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: 'rgba(255,255,255,0.04)',\n              activeBackground: 'rgba(255,255,255,0.16)',\n              borderColor: '{surface.700}',\n              color: '{surface.400}',\n            },\n            success: {\n              hoverBackground: 'color-mix(in srgb, {green.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {green.400}, transparent 84%)',\n              borderColor: '{green.700}',\n              color: '{green.400}',\n            },\n            info: {\n              hoverBackground: 'color-mix(in srgb, {sky.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {sky.400}, transparent 84%)',\n              borderColor: '{sky.700}',\n              color: '{sky.400}',\n            },\n            warn: {\n              hoverBackground: 'color-mix(in srgb, {orange.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {orange.400}, transparent 84%)',\n              borderColor: '{orange.700}',\n              color: '{orange.400}',\n            },\n            help: {\n              hoverBackground: 'color-mix(in srgb, {purple.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {purple.400}, transparent 84%)',\n              borderColor: '{purple.700}',\n              color: '{purple.400}',\n            },\n            danger: {\n              hoverBackground: 'color-mix(in srgb, {red.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {red.400}, transparent 84%)',\n              borderColor: '{red.700}',\n              color: '{red.400}',\n            },\n            contrast: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              borderColor: '{surface.500}',\n              color: '{surface.0}',\n            },\n            plain: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              borderColor: '{surface.600}',\n              color: '{surface.0}',\n            },\n          },\n          text: {\n            primary: {\n              hoverBackground: 'color-mix(in srgb, {primary.color}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {primary.color}, transparent 84%)',\n              color: '{primary.color}',\n            },\n            secondary: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              color: '{surface.400}',\n            },\n            success: {\n              hoverBackground: 'color-mix(in srgb, {green.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {green.400}, transparent 84%)',\n              color: '{green.400}',\n            },\n            info: {\n              hoverBackground: 'color-mix(in srgb, {sky.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {sky.400}, transparent 84%)',\n              color: '{sky.400}',\n            },\n            warn: {\n              hoverBackground: 'color-mix(in srgb, {orange.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {orange.400}, transparent 84%)',\n              color: '{orange.400}',\n            },\n            help: {\n              hoverBackground: 'color-mix(in srgb, {purple.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {purple.400}, transparent 84%)',\n              color: '{purple.400}',\n            },\n            danger: {\n              hoverBackground: 'color-mix(in srgb, {red.400}, transparent 96%)',\n              activeBackground: 'color-mix(in srgb, {red.400}, transparent 84%)',\n              color: '{red.400}',\n            },\n            contrast: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              color: '{surface.0}',\n            },\n            plain: {\n              hoverBackground: '{surface.800}',\n              activeBackground: '{surface.700}',\n              color: '{surface.0}',\n            },\n          },\n          link: {\n            color: '{primary.color}',\n            hoverColor: '{primary.color}',\n            activeColor: '{primary.color}',\n          },\n        },\n      },\n    },\n    datepicker: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      panel: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.popover.shadow}',\n        padding: '{overlay.popover.padding}',\n      },\n      header: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        padding: '0 0 0.5rem 0',\n      },\n      title: {\n        gap: '0.5rem',\n        fontWeight: '500',\n      },\n      dropdown: {\n        width: '2.5rem',\n        sm: {\n          width: '2rem',\n        },\n        lg: {\n          width: '3rem',\n        },\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.border.color}',\n        activeBorderColor: '{form.field.border.color}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      inputIcon: {\n        color: '{form.field.icon.color}',\n      },\n      selectMonth: {\n        hoverBackground: '{content.hover.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        padding: '0.25rem 0.5rem',\n        borderRadius: '{content.border.radius}',\n      },\n      selectYear: {\n        hoverBackground: '{content.hover.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        padding: '0.25rem 0.5rem',\n        borderRadius: '{content.border.radius}',\n      },\n      group: {\n        borderColor: '{content.border.color}',\n        gap: '{overlay.popover.padding}',\n      },\n      dayView: {\n        margin: '0.5rem 0 0 0',\n      },\n      weekDay: {\n        padding: '0.25rem',\n        fontWeight: '500',\n        color: '{content.color}',\n      },\n      date: {\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{primary.color}',\n        rangeSelectedBackground: '{highlight.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{primary.contrast.color}',\n        rangeSelectedColor: '{highlight.color}',\n        width: '2rem',\n        height: '2rem',\n        borderRadius: '50%',\n        padding: '0.25rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      monthView: {\n        margin: '0.5rem 0 0 0',\n      },\n      month: {\n        padding: '0.375rem',\n        borderRadius: '{content.border.radius}',\n      },\n      yearView: {\n        margin: '0.5rem 0 0 0',\n      },\n      year: {\n        padding: '0.375rem',\n        borderRadius: '{content.border.radius}',\n      },\n      buttonbar: {\n        padding: '0.5rem 0 0 0',\n        borderColor: '{content.border.color}',\n      },\n      timePicker: {\n        padding: '0.5rem 0 0 0',\n        borderColor: '{content.border.color}',\n        gap: '0.5rem',\n        buttonGap: '0.25rem',\n      },\n      colorScheme: {\n        light: {\n          dropdown: {\n            background: '{surface.100}',\n            hoverBackground: '{surface.200}',\n            activeBackground: '{surface.300}',\n            color: '{surface.600}',\n            hoverColor: '{surface.700}',\n            activeColor: '{surface.800}',\n          },\n          today: {\n            background: '{surface.200}',\n            color: '{surface.900}',\n          },\n        },\n        dark: {\n          dropdown: {\n            background: '{surface.800}',\n            hoverBackground: '{surface.700}',\n            activeBackground: '{surface.600}',\n            color: '{surface.300}',\n            hoverColor: '{surface.200}',\n            activeColor: '{surface.100}',\n          },\n          today: {\n            background: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    card: {\n      root: {\n        background: '{content.background}',\n        borderRadius: '{border.radius.xl}',\n        color: '{content.color}',\n        shadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px -1px rgba(0, 0, 0, 0.1)',\n      },\n      body: {\n        padding: '1.25rem',\n        gap: '0.5rem',\n      },\n      caption: {\n        gap: '0.5rem',\n      },\n      title: {\n        fontSize: '1.25rem',\n        fontWeight: '500',\n      },\n      subtitle: {\n        color: '{text.muted.color}',\n      },\n    },\n    carousel: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      content: {\n        gap: '0.25rem',\n      },\n      indicatorList: {\n        padding: '1rem',\n        gap: '0.5rem',\n      },\n      indicator: {\n        width: '2rem',\n        height: '0.5rem',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          indicator: {\n            background: '{surface.200}',\n            hoverBackground: '{surface.300}',\n            activeBackground: '{primary.color}',\n          },\n        },\n        dark: {\n          indicator: {\n            background: '{surface.700}',\n            hoverBackground: '{surface.600}',\n            activeBackground: '{primary.color}',\n          },\n        },\n      },\n    },\n    cascadeselect: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        mobileIndent: '1rem',\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n        icon: {\n          color: '{list.option.icon.color}',\n          focusColor: '{list.option.icon.focus.color}',\n          size: '0.875rem',\n        },\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n    },\n    checkbox: {\n      root: {\n        borderRadius: '{border.radius.sm}',\n        width: '1.25rem',\n        height: '1.25rem',\n        background: '{form.field.background}',\n        checkedBackground: '{primary.color}',\n        checkedHoverBackground: '{primary.hover.color}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.border.color}',\n        checkedBorderColor: '{primary.color}',\n        checkedHoverBorderColor: '{primary.hover.color}',\n        checkedFocusBorderColor: '{primary.color}',\n        checkedDisabledBorderColor: '{form.field.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        shadow: '{form.field.shadow}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          width: '1rem',\n          height: '1rem',\n        },\n        lg: {\n          width: '1.5rem',\n          height: '1.5rem',\n        },\n      },\n      icon: {\n        size: '0.875rem',\n        color: '{form.field.color}',\n        checkedColor: '{primary.contrast.color}',\n        checkedHoverColor: '{primary.contrast.color}',\n        disabledColor: '{form.field.disabled.color}',\n        sm: {\n          size: '0.75rem',\n        },\n        lg: {\n          size: '1rem',\n        },\n      },\n    },\n    chip: {\n      root: {\n        borderRadius: '16px',\n        paddingX: '0.75rem',\n        paddingY: '0.5rem',\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n      image: {\n        width: '2rem',\n        height: '2rem',\n      },\n      icon: {\n        size: '1rem',\n      },\n      removeIcon: {\n        size: '1rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.100}',\n            color: '{surface.800}',\n          },\n          icon: {\n            color: '{surface.800}',\n          },\n          removeIcon: {\n            color: '{surface.800}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.800}',\n            color: '{surface.0}',\n          },\n          icon: {\n            color: '{surface.0}',\n          },\n          removeIcon: {\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    colorpicker: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      preview: {\n        width: '1.5rem',\n        height: '1.5rem',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      panel: {\n        shadow: '{overlay.popover.shadow}',\n        borderRadius: '{overlay.popover.borderRadius}',\n      },\n      colorScheme: {\n        light: {\n          panel: {\n            background: '{surface.800}',\n            borderColor: '{surface.900}',\n          },\n          handle: {\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          panel: {\n            background: '{surface.900}',\n            borderColor: '{surface.700}',\n          },\n          handle: {\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    confirmdialog: {\n      icon: {\n        size: '2rem',\n        color: '{overlay.modal.color}',\n      },\n      content: {\n        gap: '1rem',\n      },\n    },\n    confirmpopup: {\n      root: {\n        background: '{overlay.popover.background}',\n        borderColor: '{overlay.popover.border.color}',\n        color: '{overlay.popover.color}',\n        borderRadius: '{overlay.popover.border.radius}',\n        shadow: '{overlay.popover.shadow}',\n        gutter: '10px',\n        arrowOffset: '1.25rem',\n      },\n      content: {\n        padding: '{overlay.popover.padding}',\n        gap: '1rem',\n      },\n      icon: {\n        size: '1.5rem',\n        color: '{overlay.popover.color}',\n      },\n      footer: {\n        gap: '0.5rem',\n        padding: '0 {overlay.popover.padding} {overlay.popover.padding} {overlay.popover.padding}',\n      },\n    },\n    contextmenu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        transitionDuration: '{transition.duration}',\n      },\n      list: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      submenu: {\n        mobileIndent: '1rem',\n      },\n      submenuIcon: {\n        size: '{navigation.submenu.icon.size}',\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n        activeColor: '{navigation.submenu.icon.active.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n    },\n    dataview: {\n      root: {\n        borderColor: 'transparent',\n        borderWidth: '0',\n        borderRadius: '0',\n        padding: '0',\n      },\n      header: {\n        background: '{content.background}',\n        color: '{content.color}',\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n        borderRadius: '0',\n      },\n      content: {\n        background: '{content.background}',\n        color: '{content.color}',\n        borderColor: 'transparent',\n        borderWidth: '0',\n        padding: '0',\n        borderRadius: '0',\n      },\n      footer: {\n        background: '{content.background}',\n        color: '{content.color}',\n        borderColor: '{content.border.color}',\n        borderWidth: '1px 0 0 0',\n        padding: '0.75rem 1rem',\n        borderRadius: '0',\n      },\n      paginatorTop: {\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      paginatorBottom: {\n        borderColor: '{content.border.color}',\n        borderWidth: '1px 0 0 0',\n      },\n    },\n    datatable: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      header: {\n        background: '{content.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      headerCell: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        gap: '0.5rem',\n        padding: '0.75rem 1rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      columnTitle: {\n        fontWeight: '600',\n      },\n      row: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      bodyCell: {\n        borderColor: '{datatable.border.color}',\n        padding: '0.75rem 1rem',\n      },\n      footerCell: {\n        background: '{content.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        padding: '0.75rem 1rem',\n      },\n      columnFooter: {\n        fontWeight: '600',\n      },\n      footer: {\n        background: '{content.background}',\n        borderColor: '{datatable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      dropPoint: {\n        color: '{primary.color}',\n      },\n      columnResizerWidth: '0.5rem',\n      resizeIndicator: {\n        width: '1px',\n        color: '{primary.color}',\n      },\n      sortIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        size: '0.875rem',\n      },\n      loadingIcon: {\n        size: '2rem',\n      },\n      rowToggleButton: {\n        hoverBackground: '{content.hover.background}',\n        selectedHoverBackground: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        selectedHoverColor: '{primary.color}',\n        size: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      filter: {\n        inlineGap: '0.5rem',\n        overlaySelect: {\n          background: '{overlay.select.background}',\n          borderColor: '{overlay.select.border.color}',\n          borderRadius: '{overlay.select.border.radius}',\n          color: '{overlay.select.color}',\n          shadow: '{overlay.select.shadow}',\n        },\n        overlayPopover: {\n          background: '{overlay.popover.background}',\n          borderColor: '{overlay.popover.border.color}',\n          borderRadius: '{overlay.popover.border.radius}',\n          color: '{overlay.popover.color}',\n          shadow: '{overlay.popover.shadow}',\n          padding: '{overlay.popover.padding}',\n          gap: '0.5rem',\n        },\n        rule: {\n          borderColor: '{content.border.color}',\n        },\n        constraintList: {\n          padding: '{list.padding}',\n          gap: '{list.gap}',\n        },\n        constraint: {\n          focusBackground: '{list.option.focus.background}',\n          selectedBackground: '{list.option.selected.background}',\n          selectedFocusBackground: '{list.option.selected.focus.background}',\n          color: '{list.option.color}',\n          focusColor: '{list.option.focus.color}',\n          selectedColor: '{list.option.selected.color}',\n          selectedFocusColor: '{list.option.selected.focus.color}',\n          separator: {\n            borderColor: '{content.border.color}',\n          },\n          padding: '{list.option.padding}',\n          borderRadius: '{list.option.border.radius}',\n        },\n      },\n      paginatorTop: {\n        borderColor: '{datatable.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      paginatorBottom: {\n        borderColor: '{datatable.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            borderColor: '{content.border.color}',\n          },\n          row: {\n            stripedBackground: '{surface.50}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.100}',\n          },\n        },\n        dark: {\n          root: {\n            borderColor: '{surface.800}',\n          },\n          row: {\n            stripedBackground: '{surface.950}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.900}',\n          },\n        },\n      },\n    },\n    dialog: {\n      root: {\n        background: '{overlay.modal.background}',\n        borderColor: '{overlay.modal.border.color}',\n        color: '{overlay.modal.color}',\n        borderRadius: '{overlay.modal.border.radius}',\n        shadow: '{overlay.modal.shadow}',\n      },\n      header: {\n        padding: '{overlay.modal.padding}',\n        gap: '0.5rem',\n      },\n      title: {\n        fontSize: '1.25rem',\n        fontWeight: '600',\n      },\n      content: {\n        padding: '0 {overlay.modal.padding} {overlay.modal.padding} {overlay.modal.padding}',\n      },\n      footer: {\n        padding: '0 {overlay.modal.padding} {overlay.modal.padding} {overlay.modal.padding}',\n        gap: '0.5rem',\n      },\n    },\n    divider: {\n      root: {\n        borderColor: '{content.border.color}',\n      },\n      content: {\n        background: '{content.background}',\n        color: '{text.color}',\n      },\n      horizontal: {\n        margin: '1rem 0',\n        padding: '0 1rem',\n        content: {\n          padding: '0 0.5rem',\n        },\n      },\n      vertical: {\n        margin: '0 1rem',\n        padding: '0.5rem 0',\n        content: {\n          padding: '0.5rem 0',\n        },\n      },\n    },\n    dock: {\n      root: {\n        background: 'rgba(255, 255, 255, 0.1)',\n        borderColor: 'rgba(255, 255, 255, 0.2)',\n        padding: '0.5rem',\n        borderRadius: '{border.radius.xl}',\n      },\n      item: {\n        borderRadius: '{content.border.radius}',\n        padding: '0.5rem',\n        size: '3rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    drawer: {\n      root: {\n        background: '{overlay.modal.background}',\n        borderColor: '{overlay.modal.border.color}',\n        color: '{overlay.modal.color}',\n        shadow: '{overlay.modal.shadow}',\n      },\n      header: {\n        padding: '{overlay.modal.padding}',\n      },\n      title: {\n        fontSize: '1.5rem',\n        fontWeight: '600',\n      },\n      content: {\n        padding: '0 {overlay.modal.padding} {overlay.modal.padding} {overlay.modal.padding}',\n      },\n      footer: {\n        padding: '{overlay.modal.padding}',\n      },\n    },\n    editor: {\n      toolbar: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n      },\n      toolbarItem: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n        padding: '{list.padding}',\n      },\n      overlayOption: {\n        focusBackground: '{list.option.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      content: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n      },\n    },\n    fieldset: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        padding: '0 1.125rem 1.125rem 1.125rem',\n        transitionDuration: '{transition.duration}',\n      },\n      legend: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        borderRadius: '{content.border.radius}',\n        borderWidth: '1px',\n        borderColor: 'transparent',\n        padding: '0.5rem 0.75rem',\n        gap: '0.5rem',\n        fontWeight: '600',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      toggleIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n      },\n      content: {\n        padding: '0',\n      },\n    },\n    fileupload: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        transitionDuration: '{transition.duration}',\n      },\n      header: {\n        background: 'transparent',\n        color: '{text.color}',\n        padding: '1.125rem',\n        borderColor: 'unset',\n        borderWidth: '0',\n        borderRadius: '0',\n        gap: '0.5rem',\n      },\n      content: {\n        highlightBorderColor: '{primary.color}',\n        padding: '0 1.125rem 1.125rem 1.125rem',\n        gap: '1rem',\n      },\n      file: {\n        padding: '1rem',\n        gap: '1rem',\n        borderColor: '{content.border.color}',\n        info: {\n          gap: '0.5rem',\n        },\n      },\n      fileList: {\n        gap: '0.5rem',\n      },\n      progressbar: {\n        height: '0.25rem',\n      },\n      basic: {\n        gap: '0.5rem',\n      },\n    },\n    iftalabel: {\n      root: {\n        color: '{form.field.float.label.color}',\n        focusColor: '{form.field.float.label.focus.color}',\n        invalidColor: '{form.field.float.label.invalid.color}',\n        transitionDuration: '0.2s',\n        positionX: '{form.field.padding.x}',\n        top: '{form.field.padding.y}',\n        fontSize: '0.75rem',\n        fontWeight: '400',\n      },\n      input: {\n        paddingTop: '1.5rem',\n        paddingBottom: '{form.field.padding.y}',\n      },\n    },\n    floatlabel: {\n      root: {\n        color: '{form.field.float.label.color}',\n        focusColor: '{form.field.float.label.focus.color}',\n        activeColor: '{form.field.float.label.active.color}',\n        invalidColor: '{form.field.float.label.invalid.color}',\n        transitionDuration: '0.2s',\n        positionX: '{form.field.padding.x}',\n        positionY: '{form.field.padding.y}',\n        fontWeight: '500',\n        active: {\n          fontSize: '0.75rem',\n          fontWeight: '400',\n        },\n      },\n      over: {\n        active: {\n          top: '-1.25rem',\n        },\n      },\n      in: {\n        input: {\n          paddingTop: '1.5rem',\n          paddingBottom: '{form.field.padding.y}',\n        },\n        active: {\n          top: '{form.field.padding.y}',\n        },\n      },\n      on: {\n        borderRadius: '{border.radius.xs}',\n        active: {\n          background: '{form.field.background}',\n          padding: '0 0.125rem',\n        },\n      },\n    },\n    galleria: {\n      root: {\n        borderWidth: '1px',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        transitionDuration: '{transition.duration}',\n      },\n      navButton: {\n        background: 'rgba(255, 255, 255, 0.1)',\n        hoverBackground: 'rgba(255, 255, 255, 0.2)',\n        color: '{surface.100}',\n        hoverColor: '{surface.0}',\n        size: '3rem',\n        gutter: '0.5rem',\n        prev: {\n          borderRadius: '50%',\n        },\n        next: {\n          borderRadius: '50%',\n        },\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      navIcon: {\n        size: '1.5rem',\n      },\n      thumbnailsContent: {\n        background: '{content.background}',\n        padding: '1rem 0.25rem',\n      },\n      thumbnailNavButton: {\n        size: '2rem',\n        borderRadius: '{content.border.radius}',\n        gutter: '0.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      thumbnailNavButtonIcon: {\n        size: '1rem',\n      },\n      caption: {\n        background: 'rgba(0, 0, 0, 0.5)',\n        color: '{surface.100}',\n        padding: '1rem',\n      },\n      indicatorList: {\n        gap: '0.5rem',\n        padding: '1rem',\n      },\n      indicatorButton: {\n        width: '1rem',\n        height: '1rem',\n        activeBackground: '{primary.color}',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      insetIndicatorList: {\n        background: 'rgba(0, 0, 0, 0.5)',\n      },\n      insetIndicatorButton: {\n        background: 'rgba(255, 255, 255, 0.4)',\n        hoverBackground: 'rgba(255, 255, 255, 0.6)',\n        activeBackground: 'rgba(255, 255, 255, 0.9)',\n      },\n      closeButton: {\n        size: '3rem',\n        gutter: '0.5rem',\n        background: 'rgba(255, 255, 255, 0.1)',\n        hoverBackground: 'rgba(255, 255, 255, 0.2)',\n        color: '{surface.50}',\n        hoverColor: '{surface.0}',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      closeButtonIcon: {\n        size: '1.5rem',\n      },\n      colorScheme: {\n        light: {\n          thumbnailNavButton: {\n            hoverBackground: '{surface.100}',\n            color: '{surface.600}',\n            hoverColor: '{surface.700}',\n          },\n          indicatorButton: {\n            background: '{surface.200}',\n            hoverBackground: '{surface.300}',\n          },\n        },\n        dark: {\n          thumbnailNavButton: {\n            hoverBackground: '{surface.700}',\n            color: '{surface.400}',\n            hoverColor: '{surface.0}',\n          },\n          indicatorButton: {\n            background: '{surface.700}',\n            hoverBackground: '{surface.600}',\n          },\n        },\n      },\n    },\n    iconfield: {\n      icon: {\n        color: '{form.field.icon.color}',\n      },\n    },\n    image: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      preview: {\n        icon: {\n          size: '1.5rem',\n        },\n        mask: {\n          background: '{mask.background}',\n          color: '{mask.color}',\n        },\n      },\n      toolbar: {\n        position: {\n          left: 'auto',\n          right: '1rem',\n          top: '1rem',\n          bottom: 'auto',\n        },\n        blur: '8px',\n        background: 'rgba(255,255,255,0.1)',\n        borderColor: 'rgba(255,255,255,0.2)',\n        borderWidth: '1px',\n        borderRadius: '30px',\n        padding: '.5rem',\n        gap: '0.5rem',\n      },\n      action: {\n        hoverBackground: 'rgba(255,255,255,0.1)',\n        color: '{surface.50}',\n        hoverColor: '{surface.0}',\n        size: '3rem',\n        iconSize: '1.5rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    imagecompare: {\n      handle: {\n        size: '15px',\n        hoverSize: '30px',\n        background: 'rgba(255,255,255,0.3)',\n        hoverBackground: 'rgba(255,255,255,0.3)',\n        borderColor: 'unset',\n        hoverBorderColor: 'unset',\n        borderWidth: '0',\n        borderRadius: '50%',\n        transitionDuration: '{transition.duration}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: 'rgba(255,255,255,0.3)',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    inlinemessage: {\n      root: {\n        padding: '{form.field.padding.y} {form.field.padding.x}',\n        borderRadius: '{content.border.radius}',\n        gap: '0.5rem',\n      },\n      text: {\n        fontWeight: '500',\n      },\n      icon: {\n        size: '1rem',\n      },\n      colorScheme: {\n        light: {\n          info: {\n            background: 'color-mix(in srgb, {blue.50}, transparent 5%)',\n            borderColor: '{blue.200}',\n            color: '{blue.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.50}, transparent 5%)',\n            borderColor: '{green.200}',\n            color: '{green.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n          },\n          warn: {\n            background: 'color-mix(in srgb,{yellow.50}, transparent 5%)',\n            borderColor: '{yellow.200}',\n            color: '{yellow.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.50}, transparent 5%)',\n            borderColor: '{red.200}',\n            color: '{red.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n          },\n          secondary: {\n            background: '{surface.100}',\n            borderColor: '{surface.200}',\n            color: '{surface.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n          },\n          contrast: {\n            background: '{surface.900}',\n            borderColor: '{surface.950}',\n            color: '{surface.50}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n          },\n        },\n        dark: {\n          info: {\n            background: 'color-mix(in srgb, {blue.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {blue.700}, transparent 64%)',\n            color: '{blue.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {green.700}, transparent 64%)',\n            color: '{green.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n          },\n          warn: {\n            background: 'color-mix(in srgb, {yellow.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {yellow.700}, transparent 64%)',\n            color: '{yellow.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {red.700}, transparent 64%)',\n            color: '{red.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n          },\n          secondary: {\n            background: '{surface.800}',\n            borderColor: '{surface.700}',\n            color: '{surface.300}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n          },\n          contrast: {\n            background: '{surface.0}',\n            borderColor: '{surface.100}',\n            color: '{surface.950}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n          },\n        },\n      },\n    },\n    inplace: {\n      root: {\n        padding: '{form.field.padding.y} {form.field.padding.x}',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{transition.duration}',\n      },\n      display: {\n        hoverBackground: '{content.hover.background}',\n        hoverColor: '{content.hover.color}',\n      },\n    },\n    inputchips: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n      colorScheme: {\n        light: {\n          chip: {\n            focusBackground: '{surface.200}',\n            color: '{surface.800}',\n          },\n        },\n        dark: {\n          chip: {\n            focusBackground: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    inputgroup: {\n      addon: {\n        background: '{form.field.background}',\n        borderColor: '{form.field.border.color}',\n        color: '{form.field.icon.color}',\n        borderRadius: '{form.field.border.radius}',\n        padding: '0.5rem',\n        minWidth: '2.5rem',\n      },\n    },\n    inputnumber: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      button: {\n        width: '2.5rem',\n        borderRadius: '{form.field.border.radius}',\n        verticalPadding: '{form.field.padding.y}',\n      },\n      colorScheme: {\n        light: {\n          button: {\n            background: 'transparent',\n            hoverBackground: '{surface.100}',\n            activeBackground: '{surface.200}',\n            borderColor: '{form.field.border.color}',\n            hoverBorderColor: '{form.field.border.color}',\n            activeBorderColor: '{form.field.border.color}',\n            color: '{surface.400}',\n            hoverColor: '{surface.500}',\n            activeColor: '{surface.600}',\n          },\n        },\n        dark: {\n          button: {\n            background: 'transparent',\n            hoverBackground: '{surface.800}',\n            activeBackground: '{surface.700}',\n            borderColor: '{form.field.border.color}',\n            hoverBorderColor: '{form.field.border.color}',\n            activeBorderColor: '{form.field.border.color}',\n            color: '{surface.400}',\n            hoverColor: '{surface.300}',\n            activeColor: '{surface.200}',\n          },\n        },\n      },\n    },\n    inputotp: {\n      root: {\n        gap: '0.5rem',\n      },\n      input: {\n        width: '2.5rem',\n        sm: {\n          width: '2rem',\n        },\n        lg: {\n          width: '3rem',\n        },\n      },\n    },\n    inputtext: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n    },\n    knob: {\n      root: {\n        transitionDuration: '{transition.duration}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      value: {\n        background: '{primary.color}',\n      },\n      range: {\n        background: '{content.border.color}',\n      },\n      text: {\n        color: '{text.muted.color}',\n      },\n    },\n    listbox: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        borderColor: '{form.field.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        shadow: '{form.field.shadow}',\n        borderRadius: '{form.field.border.radius}',\n        transitionDuration: '{form.field.transition.duration}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        header: {\n          padding: '{list.header.padding}',\n        },\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      checkmark: {\n        color: '{list.option.color}',\n        gutterStart: '-0.375rem',\n        gutterEnd: '0.375rem',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n      colorScheme: {\n        light: {\n          option: {\n            stripedBackground: '{surface.50}',\n          },\n        },\n        dark: {\n          option: {\n            stripedBackground: '{surface.900}',\n          },\n        },\n      },\n    },\n    megamenu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        gap: '0.5rem',\n        verticalOrientation: {\n          padding: '{navigation.list.padding}',\n          gap: '{navigation.list.gap}',\n        },\n        horizontalOrientation: {\n          padding: '0.5rem 0.75rem',\n          gap: '0.5rem',\n        },\n        transitionDuration: '{transition.duration}',\n      },\n      baseItem: {\n        borderRadius: '{content.border.radius}',\n        padding: '{navigation.item.padding}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      overlay: {\n        padding: '0',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        shadow: '{overlay.navigation.shadow}',\n        gap: '0.5rem',\n      },\n      submenu: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      submenuLabel: {\n        padding: '{navigation.submenu.label.padding}',\n        fontWeight: '{navigation.submenu.label.font.weight}',\n        background: '{navigation.submenu.label.background.}',\n        color: '{navigation.submenu.label.color}',\n      },\n      submenuIcon: {\n        size: '{navigation.submenu.icon.size}',\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n        activeColor: '{navigation.submenu.icon.active.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n      mobileButton: {\n        borderRadius: '50%',\n        size: '1.75rem',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        hoverBackground: '{content.hover.background}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    menu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        transitionDuration: '{transition.duration}',\n      },\n      list: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n        },\n      },\n      submenuLabel: {\n        padding: '{navigation.submenu.label.padding}',\n        fontWeight: '{navigation.submenu.label.font.weight}',\n        background: '{navigation.submenu.label.background}',\n        color: '{navigation.submenu.label.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n    },\n    menubar: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        gap: '0.5rem',\n        padding: '0.5rem 0.75rem',\n        transitionDuration: '{transition.duration}',\n      },\n      baseItem: {\n        borderRadius: '{content.border.radius}',\n        padding: '{navigation.item.padding}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      submenu: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        mobileIndent: '1rem',\n        icon: {\n          size: '{navigation.submenu.icon.size}',\n          color: '{navigation.submenu.icon.color}',\n          focusColor: '{navigation.submenu.icon.focus.color}',\n          activeColor: '{navigation.submenu.icon.active.color}',\n        },\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n      mobileButton: {\n        borderRadius: '50%',\n        size: '1.75rem',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        hoverBackground: '{content.hover.background}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    message: {\n      root: {\n        borderRadius: '{content.border.radius}',\n        borderWidth: '1px',\n        transitionDuration: '{transition.duration}',\n      },\n      content: {\n        padding: '0.5rem 0.75rem',\n        gap: '0.5rem',\n        sm: {\n          padding: '0.375rem 0.625rem',\n        },\n        lg: {\n          padding: '0.625rem 0.875rem',\n        },\n      },\n      text: {\n        fontSize: '1rem',\n        fontWeight: '500',\n        sm: {\n          fontSize: '0.875rem',\n        },\n        lg: {\n          fontSize: '1.125rem',\n        },\n      },\n      icon: {\n        size: '1.125rem',\n        sm: {\n          size: '1rem',\n        },\n        lg: {\n          size: '1.25rem',\n        },\n      },\n      closeButton: {\n        width: '1.75rem',\n        height: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          offset: '{focus.ring.offset}',\n        },\n      },\n      closeIcon: {\n        size: '1rem',\n        sm: {\n          size: '0.875rem',\n        },\n        lg: {\n          size: '1.125rem',\n        },\n      },\n      outlined: {\n        root: {\n          borderWidth: '1px',\n        },\n      },\n      simple: {\n        content: {\n          padding: '0',\n        },\n      },\n      colorScheme: {\n        light: {\n          info: {\n            background: 'color-mix(in srgb, {blue.50}, transparent 5%)',\n            borderColor: '{blue.200}',\n            color: '{blue.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{blue.100}',\n              focusRing: {\n                color: '{blue.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{blue.600}',\n              borderColor: '{blue.600}',\n            },\n            simple: {\n              color: '{blue.600}',\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.50}, transparent 5%)',\n            borderColor: '{green.200}',\n            color: '{green.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{green.100}',\n              focusRing: {\n                color: '{green.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{green.600}',\n              borderColor: '{green.600}',\n            },\n            simple: {\n              color: '{green.600}',\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb,{yellow.50}, transparent 5%)',\n            borderColor: '{yellow.200}',\n            color: '{yellow.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{yellow.100}',\n              focusRing: {\n                color: '{yellow.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{yellow.600}',\n              borderColor: '{yellow.600}',\n            },\n            simple: {\n              color: '{yellow.600}',\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.50}, transparent 5%)',\n            borderColor: '{red.200}',\n            color: '{red.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{red.100}',\n              focusRing: {\n                color: '{red.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{red.600}',\n              borderColor: '{red.600}',\n            },\n            simple: {\n              color: '{red.600}',\n            },\n          },\n          secondary: {\n            background: '{surface.100}',\n            borderColor: '{surface.200}',\n            color: '{surface.600}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.200}',\n              focusRing: {\n                color: '{surface.600}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.500}',\n              borderColor: '{surface.500}',\n            },\n            simple: {\n              color: '{surface.500}',\n            },\n          },\n          contrast: {\n            background: '{surface.900}',\n            borderColor: '{surface.950}',\n            color: '{surface.50}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.800}',\n              focusRing: {\n                color: '{surface.50}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.950}',\n              borderColor: '{surface.950}',\n            },\n            simple: {\n              color: '{surface.950}',\n            },\n          },\n        },\n        dark: {\n          info: {\n            background: 'color-mix(in srgb, {blue.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {blue.700}, transparent 64%)',\n            color: '{blue.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{blue.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{blue.500}',\n              borderColor: '{blue.500}',\n            },\n            simple: {\n              color: '{blue.500}',\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {green.700}, transparent 64%)',\n            color: '{green.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{green.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{green.500}',\n              borderColor: '{green.500}',\n            },\n            simple: {\n              color: '{green.500}',\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb, {yellow.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {yellow.700}, transparent 64%)',\n            color: '{yellow.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{yellow.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{yellow.500}',\n              borderColor: '{yellow.500}',\n            },\n            simple: {\n              color: '{yellow.500}',\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {red.700}, transparent 64%)',\n            color: '{red.500}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{red.500}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{red.500}',\n              borderColor: '{red.500}',\n            },\n            simple: {\n              color: '{red.500}',\n            },\n          },\n          secondary: {\n            background: '{surface.800}',\n            borderColor: '{surface.700}',\n            color: '{surface.300}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.700}',\n              focusRing: {\n                color: '{surface.300}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.400}',\n              borderColor: '{surface.400}',\n            },\n            simple: {\n              color: '{surface.400}',\n            },\n          },\n          contrast: {\n            background: '{surface.0}',\n            borderColor: '{surface.100}',\n            color: '{surface.950}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.100}',\n              focusRing: {\n                color: '{surface.950}',\n                shadow: 'none',\n              },\n            },\n            outlined: {\n              color: '{surface.0}',\n              borderColor: '{surface.0}',\n            },\n            simple: {\n              color: '{surface.0}',\n            },\n          },\n        },\n      },\n    },\n    metergroup: {\n      root: {\n        borderRadius: '{content.border.radius}',\n        gap: '1rem',\n      },\n      meters: {\n        background: '{content.border.color}',\n        size: '0.5rem',\n      },\n      label: {\n        gap: '0.5rem',\n      },\n      labelMarker: {\n        size: '0.5rem',\n      },\n      labelIcon: {\n        size: '1rem',\n      },\n      labelList: {\n        verticalGap: '0.5rem',\n        horizontalGap: '1rem',\n      },\n    },\n    multiselect: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        header: {\n          padding: '{list.header.padding}',\n        },\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n        gap: '0.5rem',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n    },\n    orderlist: {\n      root: {\n        gap: '1.125rem',\n      },\n      controls: {\n        gap: '0.5rem',\n      },\n    },\n    organizationchart: {\n      root: {\n        gutter: '0.75rem',\n        transitionDuration: '{transition.duration}',\n      },\n      node: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        selectedColor: '{highlight.color}',\n        hoverColor: '{content.hover.color}',\n        padding: '0.75rem 1rem',\n        toggleablePadding: '0.75rem 1rem 1.25rem 1rem',\n        borderRadius: '{content.border.radius}',\n      },\n      nodeToggleButton: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        borderColor: '{content.border.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        size: '1.5rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      connector: {\n        color: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        height: '24px',\n      },\n    },\n    overlaybadge: {\n      root: {\n        outline: {\n          width: '2px',\n          color: '{content.background}',\n        },\n      },\n    },\n    popover: {\n      root: {\n        background: '{overlay.popover.background}',\n        borderColor: '{overlay.popover.border.color}',\n        color: '{overlay.popover.color}',\n        borderRadius: '{overlay.popover.border.radius}',\n        shadow: '{overlay.popover.shadow}',\n        gutter: '10px',\n        arrowOffset: '1.25rem',\n      },\n      content: {\n        padding: '{overlay.popover.padding}',\n      },\n    },\n    paginator: {\n      root: {\n        padding: '0.5rem 1rem',\n        gap: '0.25rem',\n        borderRadius: '{content.border.radius}',\n        background: '{content.background}',\n        color: '{content.color}',\n        transitionDuration: '{transition.duration}',\n      },\n      navButton: {\n        background: 'transparent',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        selectedColor: '{highlight.color}',\n        width: '2.5rem',\n        height: '2.5rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      currentPageReport: {\n        color: '{text.muted.color}',\n      },\n      jumpToPageInput: {\n        maxWidth: '2.5rem',\n      },\n    },\n    password: {\n      meter: {\n        background: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        height: '.75rem',\n      },\n      icon: {\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.popover.background}',\n        borderColor: '{overlay.popover.border.color}',\n        borderRadius: '{overlay.popover.border.radius}',\n        color: '{overlay.popover.color}',\n        padding: '{overlay.popover.padding}',\n        shadow: '{overlay.popover.shadow}',\n      },\n      content: {\n        gap: '0.5rem',\n      },\n      colorScheme: {\n        light: {\n          strength: {\n            weakBackground: '{red.500}',\n            mediumBackground: '{amber.500}',\n            strongBackground: '{green.500}',\n          },\n        },\n        dark: {\n          strength: {\n            weakBackground: '{red.400}',\n            mediumBackground: '{amber.400}',\n            strongBackground: '{green.400}',\n          },\n        },\n      },\n    },\n    panel: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n      },\n      header: {\n        background: 'transparent',\n        color: '{text.color}',\n        padding: '1.125rem',\n        borderColor: '{content.border.color}',\n        borderWidth: '0',\n        borderRadius: '0',\n      },\n      toggleableHeader: {\n        padding: '0.375rem 1.125rem',\n      },\n      title: {\n        fontWeight: '600',\n      },\n      content: {\n        padding: '0 1.125rem 1.125rem 1.125rem',\n      },\n      footer: {\n        padding: '0 1.125rem 1.125rem 1.125rem',\n      },\n    },\n    panelmenu: {\n      root: {\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n      panel: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderWidth: '1px',\n        color: '{content.color}',\n        padding: '0.25rem 0.25rem',\n        borderRadius: '{content.border.radius}',\n        first: {\n          borderWidth: '1px',\n          topBorderRadius: '{content.border.radius}',\n        },\n        last: {\n          borderWidth: '1px',\n          bottomBorderRadius: '{content.border.radius}',\n        },\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        gap: '0.5rem',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{content.border.radius}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n        },\n      },\n      submenu: {\n        indent: '1rem',\n      },\n      submenuIcon: {\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n      },\n    },\n    picklist: {\n      root: {\n        gap: '1.125rem',\n      },\n      controls: {\n        gap: '0.5rem',\n      },\n    },\n    progressbar: {\n      root: {\n        background: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        height: '1.25rem',\n      },\n      value: {\n        background: '{primary.color}',\n      },\n      label: {\n        color: '{primary.contrast.color}',\n        fontSize: '0.75rem',\n        fontWeight: '600',\n      },\n    },\n    progressspinner: {\n      colorScheme: {\n        light: {\n          root: {\n            'color.1': '{red.500}',\n            'color.2': '{blue.500}',\n            'color.3': '{green.500}',\n            'color.4': '{yellow.500}',\n          },\n        },\n        dark: {\n          root: {\n            'color.1': '{red.400}',\n            'color.2': '{blue.400}',\n            'color.3': '{green.400}',\n            'color.4': '{yellow.400}',\n          },\n        },\n      },\n    },\n    radiobutton: {\n      root: {\n        width: '1.25rem',\n        height: '1.25rem',\n        background: '{form.field.background}',\n        checkedBackground: '{primary.color}',\n        checkedHoverBackground: '{primary.hover.color}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.border.color}',\n        checkedBorderColor: '{primary.color}',\n        checkedHoverBorderColor: '{primary.hover.color}',\n        checkedFocusBorderColor: '{primary.color}',\n        checkedDisabledBorderColor: '{form.field.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        shadow: '{form.field.shadow}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          width: '1rem',\n          height: '1rem',\n        },\n        lg: {\n          width: '1.5rem',\n          height: '1.5rem',\n        },\n      },\n      icon: {\n        size: '0.75rem',\n        checkedColor: '{primary.contrast.color}',\n        checkedHoverColor: '{primary.contrast.color}',\n        disabledColor: '{form.field.disabled.color}',\n        sm: {\n          size: '0.5rem',\n        },\n        lg: {\n          size: '1rem',\n        },\n      },\n    },\n    rating: {\n      root: {\n        gap: '0.25rem',\n        transitionDuration: '{transition.duration}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      icon: {\n        size: '1rem',\n        color: '{text.muted.color}',\n        hoverColor: '{primary.color}',\n        activeColor: '{primary.color}',\n      },\n    },\n    scrollpanel: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      bar: {\n        size: '9px',\n        borderRadius: '{border.radius.sm}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          bar: {\n            background: '{surface.100}',\n          },\n        },\n        dark: {\n          bar: {\n            background: '{surface.800}',\n          },\n        },\n      },\n    },\n    select: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      list: {\n        padding: '{list.padding}',\n        gap: '{list.gap}',\n        header: {\n          padding: '{list.header.padding}',\n        },\n      },\n      option: {\n        focusBackground: '{list.option.focus.background}',\n        selectedBackground: '{list.option.selected.background}',\n        selectedFocusBackground: '{list.option.selected.focus.background}',\n        color: '{list.option.color}',\n        focusColor: '{list.option.focus.color}',\n        selectedColor: '{list.option.selected.color}',\n        selectedFocusColor: '{list.option.selected.focus.color}',\n        padding: '{list.option.padding}',\n        borderRadius: '{list.option.border.radius}',\n      },\n      optionGroup: {\n        background: '{list.option.group.background}',\n        color: '{list.option.group.color}',\n        fontWeight: '{list.option.group.font.weight}',\n        padding: '{list.option.group.padding}',\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n      checkmark: {\n        color: '{list.option.color}',\n        gutterStart: '-0.375rem',\n        gutterEnd: '0.375rem',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n    },\n    selectbutton: {\n      root: {\n        borderRadius: '{form.field.border.radius}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            invalidBorderColor: '{form.field.invalid.border.color}',\n          },\n        },\n        dark: {\n          root: {\n            invalidBorderColor: '{form.field.invalid.border.color}',\n          },\n        },\n      },\n    },\n    skeleton: {\n      root: {\n        borderRadius: '{content.border.radius}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.200}',\n            animationBackground: 'rgba(255,255,255,0.4)',\n          },\n        },\n        dark: {\n          root: {\n            background: 'rgba(255, 255, 255, 0.06)',\n            animationBackground: 'rgba(255, 255, 255, 0.04)',\n          },\n        },\n      },\n    },\n    slider: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      track: {\n        background: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        size: '3px',\n      },\n      range: {\n        background: '{primary.color}',\n      },\n      handle: {\n        width: '20px',\n        height: '20px',\n        borderRadius: '50%',\n        background: '{content.border.color}',\n        hoverBackground: '{content.border.color}',\n        content: {\n          borderRadius: '50%',\n          hoverBackground: '{content.background}',\n          width: '16px',\n          height: '16px',\n          shadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.08), 0px 1px 1px 0px rgba(0, 0, 0, 0.14)',\n        },\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      colorScheme: {\n        light: {\n          handle: {\n            contentBackground: '{surface.0}',\n          },\n        },\n        dark: {\n          handle: {\n            contentBackground: '{surface.950}',\n          },\n        },\n      },\n    },\n    speeddial: {\n      root: {\n        gap: '0.5rem',\n        transitionDuration: '{transition.duration}',\n      },\n    },\n    splitter: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        transitionDuration: '{transition.duration}',\n      },\n      gutter: {\n        background: '{content.border.color}',\n      },\n      handle: {\n        size: '24px',\n        background: 'transparent',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n    },\n    splitbutton: {\n      root: {\n        borderRadius: '{form.field.border.radius}',\n        roundedBorderRadius: '2rem',\n        raisedShadow:\n          '0 3px 1px -2px rgba(0, 0, 0, 0.2), 0 2px 2px 0 rgba(0, 0, 0, 0.14), 0 1px 5px 0 rgba(0, 0, 0, 0.12)',\n      },\n    },\n    stepper: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      separator: {\n        background: '{content.border.color}',\n        activeBackground: '{primary.color}',\n        margin: '0 0 0 1.625rem',\n        size: '2px',\n      },\n      step: {\n        padding: '0.5rem',\n        gap: '1rem',\n      },\n      stepHeader: {\n        padding: '0',\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        gap: '0.5rem',\n      },\n      stepTitle: {\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        fontWeight: '500',\n      },\n      stepNumber: {\n        background: '{content.background}',\n        activeBackground: '{content.background}',\n        borderColor: '{content.border.color}',\n        activeBorderColor: '{content.border.color}',\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        size: '2rem',\n        fontSize: '1.143rem',\n        fontWeight: '500',\n        borderRadius: '50%',\n        shadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12)',\n      },\n      steppanels: {\n        padding: '0.875rem 0.5rem 1.125rem 0.5rem',\n      },\n      steppanel: {\n        background: '{content.background}',\n        color: '{content.color}',\n        padding: '0',\n        indent: '1rem',\n      },\n    },\n    steps: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      separator: {\n        background: '{content.border.color}',\n      },\n      itemLink: {\n        borderRadius: '{content.border.radius}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        gap: '0.5rem',\n      },\n      itemLabel: {\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        fontWeight: '500',\n      },\n      itemNumber: {\n        background: '{content.background}',\n        activeBackground: '{content.background}',\n        borderColor: '{content.border.color}',\n        activeBorderColor: '{content.border.color}',\n        color: '{text.muted.color}',\n        activeColor: '{primary.color}',\n        size: '2rem',\n        fontSize: '1.143rem',\n        fontWeight: '500',\n        borderRadius: '50%',\n        shadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12)',\n      },\n    },\n    tabmenu: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      tablist: {\n        borderWidth: '0 0 1px 0',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n      },\n      item: {\n        background: 'transparent',\n        hoverBackground: 'transparent',\n        activeBackground: 'transparent',\n        borderWidth: '0 0 1px 0',\n        borderColor: '{content.border.color}',\n        hoverBorderColor: '{content.border.color}',\n        activeBorderColor: '{primary.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n        padding: '1rem 1.125rem',\n        fontWeight: '600',\n        margin: '0 0 -1px 0',\n        gap: '0.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      itemIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n      },\n      activeBar: {\n        height: '1px',\n        bottom: '-1px',\n        background: '{primary.color}',\n      },\n    },\n    tabs: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      tablist: {\n        borderWidth: '0 0 1px 0',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n      },\n      tab: {\n        background: 'transparent',\n        hoverBackground: 'transparent',\n        activeBackground: 'transparent',\n        borderWidth: '0 0 1px 0',\n        borderColor: '{content.border.color}',\n        hoverBorderColor: '{content.border.color}',\n        activeBorderColor: '{primary.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n        padding: '1rem 1.125rem',\n        fontWeight: '600',\n        margin: '0 0 -1px 0',\n        gap: '0.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      tabpanel: {\n        background: '{content.background}',\n        color: '{content.color}',\n        padding: '0.875rem 1.125rem 1.125rem 1.125rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: 'inset {focus.ring.shadow}',\n        },\n      },\n      navButton: {\n        background: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        width: '2.5rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      activeBar: {\n        height: '1px',\n        bottom: '-1px',\n        background: '{primary.color}',\n      },\n      colorScheme: {\n        light: {\n          navButton: {\n            shadow: '0px 0px 10px 50px rgba(255, 255, 255, 0.6)',\n          },\n        },\n        dark: {\n          navButton: {\n            shadow: '0px 0px 10px 50px color-mix(in srgb, {content.background}, transparent 50%)',\n          },\n        },\n      },\n    },\n    tabview: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      tabList: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n      },\n      tab: {\n        borderColor: '{content.border.color}',\n        activeBorderColor: '{primary.color}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        activeColor: '{primary.color}',\n      },\n      tabPanel: {\n        background: '{content.background}',\n        color: '{content.color}',\n      },\n      navButton: {\n        background: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n      },\n      colorScheme: {\n        light: {\n          navButton: {\n            shadow: '0px 0px 10px 50px rgba(255, 255, 255, 0.6)',\n          },\n        },\n        dark: {\n          navButton: {\n            shadow: '0px 0px 10px 50px color-mix(in srgb, {content.background}, transparent 50%)',\n          },\n        },\n      },\n    },\n    textarea: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n    },\n    tieredmenu: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        color: '{content.color}',\n        borderRadius: '{content.border.radius}',\n        shadow: '{overlay.navigation.shadow}',\n        transitionDuration: '{transition.duration}',\n      },\n      list: {\n        padding: '{navigation.list.padding}',\n        gap: '{navigation.list.gap}',\n      },\n      item: {\n        focusBackground: '{navigation.item.focus.background}',\n        activeBackground: '{navigation.item.active.background}',\n        color: '{navigation.item.color}',\n        focusColor: '{navigation.item.focus.color}',\n        activeColor: '{navigation.item.active.color}',\n        padding: '{navigation.item.padding}',\n        borderRadius: '{navigation.item.border.radius}',\n        gap: '{navigation.item.gap}',\n        icon: {\n          color: '{navigation.item.icon.color}',\n          focusColor: '{navigation.item.icon.focus.color}',\n          activeColor: '{navigation.item.icon.active.color}',\n        },\n      },\n      submenu: {\n        mobileIndent: '1rem',\n      },\n      submenuIcon: {\n        size: '{navigation.submenu.icon.size}',\n        color: '{navigation.submenu.icon.color}',\n        focusColor: '{navigation.submenu.icon.focus.color}',\n        activeColor: '{navigation.submenu.icon.active.color}',\n      },\n      separator: {\n        borderColor: '{content.border.color}',\n      },\n    },\n    tag: {\n      root: {\n        fontSize: '0.875rem',\n        fontWeight: '700',\n        padding: '0.25rem 0.5rem',\n        gap: '0.25rem',\n        borderRadius: '{content.border.radius}',\n        roundedBorderRadius: '{border.radius.xl}',\n      },\n      icon: {\n        size: '0.75rem',\n      },\n      colorScheme: {\n        light: {\n          primary: {\n            background: '{primary.100}',\n            color: '{primary.700}',\n          },\n          secondary: {\n            background: '{surface.100}',\n            color: '{surface.600}',\n          },\n          success: {\n            background: '{green.100}',\n            color: '{green.700}',\n          },\n          info: {\n            background: '{sky.100}',\n            color: '{sky.700}',\n          },\n          warn: {\n            background: '{orange.100}',\n            color: '{orange.700}',\n          },\n          danger: {\n            background: '{red.100}',\n            color: '{red.700}',\n          },\n          contrast: {\n            background: '{surface.950}',\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          primary: {\n            background: 'color-mix(in srgb, {primary.500}, transparent 84%)',\n            color: '{primary.300}',\n          },\n          secondary: {\n            background: '{surface.800}',\n            color: '{surface.300}',\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            color: '{green.300}',\n          },\n          info: {\n            background: 'color-mix(in srgb, {sky.500}, transparent 84%)',\n            color: '{sky.300}',\n          },\n          warn: {\n            background: 'color-mix(in srgb, {orange.500}, transparent 84%)',\n            color: '{orange.300}',\n          },\n          danger: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            color: '{red.300}',\n          },\n          contrast: {\n            background: '{surface.0}',\n            color: '{surface.950}',\n          },\n        },\n      },\n    },\n    terminal: {\n      root: {\n        background: '{form.field.background}',\n        borderColor: '{form.field.border.color}',\n        color: '{form.field.color}',\n        height: '18rem',\n        padding: '{form.field.padding.y} {form.field.padding.x}',\n        borderRadius: '{form.field.border.radius}',\n      },\n      prompt: {\n        gap: '0.25rem',\n      },\n      commandResponse: {\n        margin: '2px 0',\n      },\n    },\n    timeline: {\n      event: {\n        minHeight: '5rem',\n      },\n      horizontal: {\n        eventContent: {\n          padding: '1rem 0',\n        },\n      },\n      vertical: {\n        eventContent: {\n          padding: '0 1rem',\n        },\n      },\n      eventMarker: {\n        size: '1.125rem',\n        borderRadius: '50%',\n        borderWidth: '2px',\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        content: {\n          borderRadius: '50%',\n          size: '0.375rem',\n          background: '{primary.color}',\n          insetShadow: '0px 0.5px 0px 0px rgba(0, 0, 0, 0.06), 0px 1px 1px 0px rgba(0, 0, 0, 0.12)',\n        },\n      },\n      eventConnector: {\n        color: '{content.border.color}',\n        size: '2px',\n      },\n    },\n    togglebutton: {\n      root: {\n        padding: '0.5rem 1rem',\n        borderRadius: '{content.border.radius}',\n        gap: '0.5rem',\n        fontWeight: '500',\n        disabledBackground: '{form.field.disabled.background}',\n        disabledBorderColor: '{form.field.disabled.background}',\n        disabledColor: '{form.field.disabled.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          padding: '0.375rem 0.75rem',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          padding: '0.625rem 1.25rem',\n        },\n      },\n      icon: {\n        disabledColor: '{form.field.disabled.color}',\n      },\n      content: {\n        left: '0.25rem',\n        top: '0.25rem',\n        checkedShadow: '0px 1px 2px 0px rgba(0, 0, 0, 0.02), 0px 1px 2px 0px rgba(0, 0, 0, 0.04)',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.100}',\n            checkedBackground: '{surface.100}',\n            hoverBackground: '{surface.100}',\n            borderColor: '{surface.100}',\n            color: '{surface.500}',\n            hoverColor: '{surface.700}',\n            checkedColor: '{surface.900}',\n            checkedBorderColor: '{surface.100}',\n          },\n          content: {\n            checkedBackground: '{surface.0}',\n          },\n          icon: {\n            color: '{surface.500}',\n            hoverColor: '{surface.700}',\n            checkedColor: '{surface.900}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.950}',\n            checkedBackground: '{surface.950}',\n            hoverBackground: '{surface.950}',\n            borderColor: '{surface.950}',\n            color: '{surface.400}',\n            hoverColor: '{surface.300}',\n            checkedColor: '{surface.0}',\n            checkedBorderColor: '{surface.950}',\n          },\n          content: {\n            checkedBackground: '{surface.800}',\n          },\n          icon: {\n            color: '{surface.400}',\n            hoverColor: '{surface.300}',\n            checkedColor: '{surface.0}',\n          },\n        },\n      },\n    },\n    toggleswitch: {\n      root: {\n        width: '2.5rem',\n        height: '1.5rem',\n        borderRadius: '30px',\n        gap: '0.25rem',\n        shadow: '{form.field.shadow}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n        borderWidth: '1px',\n        borderColor: 'transparent',\n        hoverBorderColor: 'transparent',\n        checkedBorderColor: 'transparent',\n        checkedHoverBorderColor: 'transparent',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        transitionDuration: '{form.field.transition.duration}',\n        slideDuration: '0.2s',\n      },\n      handle: {\n        borderRadius: '50%',\n        size: '1rem',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.300}',\n            disabledBackground: '{form.field.disabled.background}',\n            hoverBackground: '{surface.400}',\n            checkedBackground: '{primary.color}',\n            checkedHoverBackground: '{primary.hover.color}',\n          },\n          handle: {\n            background: '{surface.0}',\n            disabledBackground: '{form.field.disabled.color}',\n            hoverBackground: '{surface.0}',\n            checkedBackground: '{surface.0}',\n            checkedHoverBackground: '{surface.0}',\n            color: '{text.muted.color}',\n            hoverColor: '{text.color}',\n            checkedColor: '{primary.color}',\n            checkedHoverColor: '{primary.hover.color}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.700}',\n            disabledBackground: '{surface.600}',\n            hoverBackground: '{surface.600}',\n            checkedBackground: '{primary.color}',\n            checkedHoverBackground: '{primary.hover.color}',\n          },\n          handle: {\n            background: '{surface.400}',\n            disabledBackground: '{surface.900}',\n            hoverBackground: '{surface.300}',\n            checkedBackground: '{surface.900}',\n            checkedHoverBackground: '{surface.900}',\n            color: '{surface.900}',\n            hoverColor: '{surface.800}',\n            checkedColor: '{primary.color}',\n            checkedHoverColor: '{primary.hover.color}',\n          },\n        },\n      },\n    },\n    tree: {\n      root: {\n        background: '{content.background}',\n        color: '{content.color}',\n        padding: '1rem',\n        gap: '2px',\n        indent: '1rem',\n        transitionDuration: '{transition.duration}',\n      },\n      node: {\n        padding: '0.25rem 0.5rem',\n        borderRadius: '{content.border.radius}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{text.color}',\n        hoverColor: '{text.hover.color}',\n        selectedColor: '{highlight.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n        gap: '0.25rem',\n      },\n      nodeIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        selectedColor: '{highlight.color}',\n      },\n      nodeToggleButton: {\n        borderRadius: '50%',\n        size: '1.75rem',\n        hoverBackground: '{content.hover.background}',\n        selectedHoverBackground: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        selectedHoverColor: '{primary.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      loadingIcon: {\n        size: '2rem',\n      },\n      filter: {\n        margin: '0 0 0.5rem 0',\n      },\n    },\n    treeselect: {\n      root: {\n        background: '{form.field.background}',\n        disabledBackground: '{form.field.disabled.background}',\n        filledBackground: '{form.field.filled.background}',\n        filledHoverBackground: '{form.field.filled.hover.background}',\n        filledFocusBackground: '{form.field.filled.focus.background}',\n        borderColor: '{form.field.border.color}',\n        hoverBorderColor: '{form.field.hover.border.color}',\n        focusBorderColor: '{form.field.focus.border.color}',\n        invalidBorderColor: '{form.field.invalid.border.color}',\n        color: '{form.field.color}',\n        disabledColor: '{form.field.disabled.color}',\n        placeholderColor: '{form.field.placeholder.color}',\n        invalidPlaceholderColor: '{form.field.invalid.placeholder.color}',\n        shadow: '{form.field.shadow}',\n        paddingX: '{form.field.padding.x}',\n        paddingY: '{form.field.padding.y}',\n        borderRadius: '{form.field.border.radius}',\n        focusRing: {\n          width: '{form.field.focus.ring.width}',\n          style: '{form.field.focus.ring.style}',\n          color: '{form.field.focus.ring.color}',\n          offset: '{form.field.focus.ring.offset}',\n          shadow: '{form.field.focus.ring.shadow}',\n        },\n        transitionDuration: '{form.field.transition.duration}',\n        sm: {\n          fontSize: '{form.field.sm.font.size}',\n          paddingX: '{form.field.sm.padding.x}',\n          paddingY: '{form.field.sm.padding.y}',\n        },\n        lg: {\n          fontSize: '{form.field.lg.font.size}',\n          paddingX: '{form.field.lg.padding.x}',\n          paddingY: '{form.field.lg.padding.y}',\n        },\n      },\n      dropdown: {\n        width: '2.5rem',\n        color: '{form.field.icon.color}',\n      },\n      overlay: {\n        background: '{overlay.select.background}',\n        borderColor: '{overlay.select.border.color}',\n        borderRadius: '{overlay.select.border.radius}',\n        color: '{overlay.select.color}',\n        shadow: '{overlay.select.shadow}',\n      },\n      tree: {\n        padding: '{list.padding}',\n      },\n      clearIcon: {\n        color: '{form.field.icon.color}',\n      },\n      emptyMessage: {\n        padding: '{list.option.padding}',\n      },\n      chip: {\n        borderRadius: '{border.radius.sm}',\n      },\n    },\n    treetable: {\n      root: {\n        transitionDuration: '{transition.duration}',\n      },\n      header: {\n        background: '{content.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      headerCell: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        gap: '0.5rem',\n        padding: '0.75rem 1rem',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      columnTitle: {\n        fontWeight: '600',\n      },\n      row: {\n        background: '{content.background}',\n        hoverBackground: '{content.hover.background}',\n        selectedBackground: '{highlight.background}',\n        color: '{content.color}',\n        hoverColor: '{content.hover.color}',\n        selectedColor: '{highlight.color}',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '-1px',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      bodyCell: {\n        borderColor: '{treetable.border.color}',\n        padding: '0.75rem 1rem',\n        gap: '0.5rem',\n      },\n      footerCell: {\n        background: '{content.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        padding: '0.75rem 1rem',\n      },\n      columnFooter: {\n        fontWeight: '600',\n      },\n      footer: {\n        background: '{content.background}',\n        borderColor: '{treetable.border.color}',\n        color: '{content.color}',\n        borderWidth: '0 0 1px 0',\n        padding: '0.75rem 1rem',\n      },\n      columnResizerWidth: '0.5rem',\n      resizeIndicator: {\n        width: '1px',\n        color: '{primary.color}',\n      },\n      sortIcon: {\n        color: '{text.muted.color}',\n        hoverColor: '{text.hover.muted.color}',\n        size: '0.875rem',\n      },\n      loadingIcon: {\n        size: '2rem',\n      },\n      nodeToggleButton: {\n        hoverBackground: '{content.hover.background}',\n        selectedHoverBackground: '{content.background}',\n        color: '{text.muted.color}',\n        hoverColor: '{text.color}',\n        selectedHoverColor: '{primary.color}',\n        size: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          color: '{focus.ring.color}',\n          offset: '{focus.ring.offset}',\n          shadow: '{focus.ring.shadow}',\n        },\n      },\n      paginatorTop: {\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      paginatorBottom: {\n        borderColor: '{content.border.color}',\n        borderWidth: '0 0 1px 0',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            borderColor: '{content.border.color}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.100}',\n          },\n        },\n        dark: {\n          root: {\n            borderColor: '{surface.800}',\n          },\n          bodyCell: {\n            selectedBorderColor: '{primary.900}',\n          },\n        },\n      },\n    },\n    toast: {\n      root: {\n        width: '25rem',\n        borderRadius: '{content.border.radius}',\n        borderWidth: '1px',\n        transitionDuration: '{transition.duration}',\n      },\n      icon: {\n        size: '1.125rem',\n      },\n      content: {\n        padding: '{overlay.popover.padding}',\n        gap: '0.5rem',\n      },\n      text: {\n        gap: '0.5rem',\n      },\n      summary: {\n        fontWeight: '500',\n        fontSize: '1rem',\n      },\n      detail: {\n        fontWeight: '500',\n        fontSize: '0.875rem',\n      },\n      closeButton: {\n        width: '1.75rem',\n        height: '1.75rem',\n        borderRadius: '50%',\n        focusRing: {\n          width: '{focus.ring.width}',\n          style: '{focus.ring.style}',\n          offset: '{focus.ring.offset}',\n        },\n      },\n      closeIcon: {\n        size: '1rem',\n      },\n      colorScheme: {\n        light: {\n          blur: '1.5px',\n          info: {\n            background: 'color-mix(in srgb, {blue.50}, transparent 5%)',\n            borderColor: '{blue.200}',\n            color: '{blue.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{blue.100}',\n              focusRing: {\n                color: '{blue.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.50}, transparent 5%)',\n            borderColor: '{green.200}',\n            color: '{green.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{green.100}',\n              focusRing: {\n                color: '{green.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb,{yellow.50}, transparent 5%)',\n            borderColor: '{yellow.200}',\n            color: '{yellow.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{yellow.100}',\n              focusRing: {\n                color: '{yellow.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.50}, transparent 5%)',\n            borderColor: '{red.200}',\n            color: '{red.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{red.100}',\n              focusRing: {\n                color: '{red.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          secondary: {\n            background: '{surface.100}',\n            borderColor: '{surface.200}',\n            color: '{surface.600}',\n            detailColor: '{surface.700}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.200}',\n              focusRing: {\n                color: '{surface.600}',\n                shadow: 'none',\n              },\n            },\n          },\n          contrast: {\n            background: '{surface.900}',\n            borderColor: '{surface.950}',\n            color: '{surface.50}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.800}',\n              focusRing: {\n                color: '{surface.50}',\n                shadow: 'none',\n              },\n            },\n          },\n        },\n        dark: {\n          blur: '10px',\n          info: {\n            background: 'color-mix(in srgb, {blue.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {blue.700}, transparent 64%)',\n            color: '{blue.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {blue.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{blue.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          success: {\n            background: 'color-mix(in srgb, {green.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {green.700}, transparent 64%)',\n            color: '{green.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {green.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{green.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          warn: {\n            background: 'color-mix(in srgb, {yellow.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {yellow.700}, transparent 64%)',\n            color: '{yellow.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {yellow.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{yellow.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          error: {\n            background: 'color-mix(in srgb, {red.500}, transparent 84%)',\n            borderColor: 'color-mix(in srgb, {red.700}, transparent 64%)',\n            color: '{red.500}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {red.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: 'rgba(255, 255, 255, 0.05)',\n              focusRing: {\n                color: '{red.500}',\n                shadow: 'none',\n              },\n            },\n          },\n          secondary: {\n            background: '{surface.800}',\n            borderColor: '{surface.700}',\n            color: '{surface.300}',\n            detailColor: '{surface.0}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.500}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.700}',\n              focusRing: {\n                color: '{surface.300}',\n                shadow: 'none',\n              },\n            },\n          },\n          contrast: {\n            background: '{surface.0}',\n            borderColor: '{surface.100}',\n            color: '{surface.950}',\n            detailColor: '{surface.950}',\n            shadow: '0px 4px 8px 0px color-mix(in srgb, {surface.950}, transparent 96%)',\n            closeButton: {\n              hoverBackground: '{surface.100}',\n              focusRing: {\n                color: '{surface.950}',\n                shadow: 'none',\n              },\n            },\n          },\n        },\n      },\n    },\n    toolbar: {\n      root: {\n        background: '{content.background}',\n        borderColor: '{content.border.color}',\n        borderRadius: '{content.border.radius}',\n        color: '{content.color}',\n        gap: '0.5rem',\n        padding: '0.75rem',\n      },\n    },\n    virtualscroller: {\n      loader: {\n        mask: {\n          background: '{content.background}',\n          color: '{text.muted.color}',\n        },\n        icon: {\n          size: '2rem',\n        },\n      },\n    },\n    tooltip: {\n      root: {\n        maxWidth: '12.5rem',\n        gutter: '0.25rem',\n        shadow: '{overlay.popover.shadow}',\n        padding: '0.5rem 0.75rem',\n        borderRadius: '{overlay.popover.border.radius}',\n      },\n      colorScheme: {\n        light: {\n          root: {\n            background: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n        dark: {\n          root: {\n            background: '{surface.700}',\n            color: '{surface.0}',\n          },\n        },\n      },\n    },\n    ripple: {\n      colorScheme: {\n        light: {\n          root: {\n            background: 'rgba(0,0,0,0.1)',\n          },\n        },\n        dark: {\n          root: {\n            background: 'rgba(255,255,255,0.3)',\n          },\n        },\n      },\n    },\n  },\n})"
                }
            ],
            "src/app/core/guards/role.guard.ts": [
                {
                    "name": "roleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/guards/role.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(allowedRoles: string[]): CanActivateFn => {\n  return (route, state) => {\n    const router = inject(Router);\n    const authService = inject(AuthService);\n\n    if (!authService.isAuthenticatedUser()) {\n      router.navigate(['/']);\n      return false;\n    }\n\n    const userRole = authService.getUserRole();\n    if (allowedRoles.includes(userRole)) {\n      return true;\n    }\n\n    router.navigate(['/']); // Redirect to home if role not allowed\n    return false;\n  };\n}"
                }
            ],
            "src/app/app.routes.server.ts": [
                {
                    "name": "serverRoutes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.server.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ServerRoute[]",
                    "defaultValue": "[\n  {\n    path: '**',\n    renderMode: RenderMode.Prerender\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/app/core/interceptors/auth.interceptor.ts": [
                {
                    "name": "addToken",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "authInterceptor",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Observable<HttpEvent<>>",
                    "jsdoctags": [
                        {
                            "name": "req",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handle401Error",
                    "file": "src/app/core/interceptors/auth.interceptor.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "authService",
                            "type": "AuthService",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "jsdoctags": [
                        {
                            "name": "request",
                            "type": "HttpRequest",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "next",
                            "type": "HttpHandlerFn",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "authService",
                            "type": "AuthService",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {
            "src/app/features/auth/services/auth.service.ts": [
                {
                    "name": "UserRole",
                    "childs": [
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USER"
                        },
                        {
                            "name": "SUPER_USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "SUPER_USER"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/features/auth/services/auth.service.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/core/models/currency.model.ts": [
                {
                    "name": "Currency",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"usd\" | \"eur\"",
                    "file": "src/app/core/models/currency.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 1,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "config",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverRoutes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/guards/role.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "addToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "handle401Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isRefreshing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MAX_REFRESH_ATTEMPTS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshAttempts",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenSubject",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/layout/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/legal/disclaimer-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DisclaimerDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthResponse",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/auth.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/models/currency.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Currency",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pages/account/account.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccountComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pages/home/home.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HomeComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pages/preferences/preferences.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PreferencesComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/pages/sandbox/sandbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SandboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/crypto.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "CryptoService",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/crypto.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CoinGeckoSearchResult",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/crypto.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CryptoSearchResult",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/legal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LegalService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/metal.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "MetalService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/metal.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetalPriceResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/notification.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "NotificationService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/services/settings.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SettingsService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/features/alerts/components/buttons/create-alert-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlertButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/login/login.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/components/register/register.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/services/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/25",
                "status": "low"
            },
            {
                "filePath": "src/app/features/prices/components/crypto/crypto-price.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CryptoPriceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/features/prices/components/dialogs/create-alert-dialog.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateAlertDialogComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/features/prices/components/metal/metal-price.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MetalPriceComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/prime-theme.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MyPreset",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.prod.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/main.server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "bootstrap",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "angularApp",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "app",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "browserDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "reqHandler",
                "coveragePercent": 100,
                "coverageCount": "1/1",
                "status": "very-good"
            },
            {
                "filePath": "src/server.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "serverDistFolder",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}